/*
 * Copyright (c) Infor 2016. All rights reserved. www.infor.com
 */

var posX = 0;
var posY = 0;

//capturing the MouseDown event for Netscape in order to display pop-ups properly
if(navigator.appName=="Netscape") {
    document.captureEvents(Event.MOUSEDOWN);
}
document.onmousedown = getPosition

function getPosition(evt) {
    if(navigator.appName=="Netscape") {
        posX = evt.screenX;
        posY = evt.screenY;
    }
}

// Helper functions
String.prototype.trimLeft = function f(){
    return this.replace(/^\s+/,'');
}

String.prototype.trimRight = function f(){
   return this.replace(/\s+$/,'');
}

String.prototype.trimBothSides = function f(){
   return this.trimLeft().trimRight();
}

String.prototype.padLeft = function f(len,pad){
   var result = this;
   while(result.length<len){
       result = pad + result;
   }
   if(result.length>len) result = result.substring(result.length-len,result.length);
   return result;
}

String.prototype.isInt = function f(){
    var s = this.trimBothSides();
    for(var i = 0, c; i != s.length; i++){
        c = s.substring(i,i+1);
        if((i>0 || c!='-') && (c < '0' || c > '9')) return false;
    }
    return true;
}

String.prototype.toInt=function f(){
    var s  = this.trimBothSides();
    return s.isInt() ?  parseFloat(s) : 0;
}

String.prototype.isNumber = function f(){
    var s = this.trimBothSides();
    return new Number(s).toString() == s;
}

String.prototype.toNumber=function f(){
    return new Number(this.trimBothSides());
}

function isDigit(string){
  if (string.length!=1) return false;
  return string >= '0' && string <= '9';
}

String.prototype.isDigit=function f(){
  return isDigit(this);
}

function isEmpty(string){
    if(typeof string == "string"){
        return string.trimBothSides().length==0;
    } else if (typeof string == "object"){
        return new String(string).trimBothSides().length==0;
    } else if (typeof string == "undefined"){
        return true;
    }
    return false;
}

String.prototype.isEmpty=function f(){
    return isEmpty(this);
}

String.prototype.emptyDefault=function f(defaultValue){
    return this.isEmpty() ? defaultValue : this;
}

String.prototype.searchReplace=function f(findText,replaceText){
    var result = this;
    var i = result.lastIndexOf(findText);
    while(i>=0){
        result = result.substring(0,i)+ replaceText +
                 result.substring(i+findText.length,result.length);
        i = result.substring(0,i).lastIndexOf(findText,i);
    }
    return result;
}

var DIGITS = "0123456789"
var UPPERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
var LOWERS = "abcdefghijklmnopqrstuvwxyz"

String.prototype.fits=function f(picture){
    picture = ""+picture;
    var options = ""
    var pChar = ""
    var repeat = false;
    for (var i=0, j=0; i<this.length && j<picture.length; i++) {
        pChar=picture.substring(j,j+1);
        if (pChar == '[') {
            options = "";
            for (j++;j<picture.length;j++){
                if(picture.substring(j,j+1) == ']') break;
                options += picture.substring(j,j+1)
            }
        } else if (pChar =="@") {
            j++;
            continue;
        } else if (pChar == "?") {
            options = UPPERS + LOWERS;
        } else if (pChar == "#") {
            options = DIGITS;
        } else if(pChar =="$") {
            options = DIGITS + "." + "-" + "+";
        } else if(pChar == "*") {
            repeat = true;
            j++;
            i--;
            continue;
        } else {
            options = pChar;
        }
        if(options.indexOf(this.substring(i,i+1)) == -1) return false;
        if(!repeat) j++;
    }
    return !(j < picture.length || i < this.length);
}

String.prototype.project=function f(picture,projection){
    picture = new String(picture);
    result = "";
    var to, from = picture.indexOf(projection);
    while(from>=0){
        to =  from+projection.length;
        if(to>this.length) break;
        result = result+ this.substring(from,to);
        from = picture.indexOf(projection,to);
    }
    return result;
}

String.prototype.transform=function f(picture) {
    result = "";
    picture = ""+picture;
    var options = ""
    var pChar = ""
    var repeat = false;
    var literal = false;
    var i = 0;

    if (this.fits(picture)) return this;

    for (j=0; i<this.length && j<picture.length; j++) {
        pChar=picture.substring(j,j+1);
        if (pChar == '[') {
            for (j++;j<picture.length;j++){
                if(picture.substring(j,j+1) == ']') break;
                options += picture.substring(j,j+1)
            }
            result = result + this.substring(i,i+1);
            i++;
        } else if (pChar =="@" || pChar == "?" || pChar == "#" || pChar =="$") {
            result = result + this.substring(i,i+1);
            i++;
        } else {
            result = result + pChar;
            if (this.substring(i,i+1)==pChar) i++;
        }
    }
    if (result.fits(picture)) return result;
    else return "";
}

String.prototype.isDate=function f(mask){
    var picture = mask.searchReplace('y','#').searchReplace('M','#').searchReplace('d','#');
    picture     = picture.searchReplace('H','#').searchReplace('h','#').searchReplace('m','#');
    picture     = picture.searchReplace('s','#').searchReplace('S','#');

    picture     = picture.searchReplace('D','#');
    picture     = picture.searchReplace('G','?').searchReplace('E', '?');
    picture     = picture.searchReplace('z','?');

    if(!this.fits(picture)) return false;

    var year = this.project(mask,"y").emptyDefault("0");
    var mon  = this.project(mask,"M");
        mon  = ""+(mon.isEmpty() ? "0" : ""+mon.toInt()-1);
    var day  = ""+this.project(mask,"d").emptyDefault(1);
    var hour = ""+this.project(mask,"H").emptyDefault(0);
    var min  = ""+this.project(mask,"m").emptyDefault(0);
    var sec  = ""+this.project(mask,"s").emptyDefault(0);

    var d = new Date( year,mon,day,hour,min,sec);

    return d.getMonth()   == mon.toInt()
        && d.getDate()    == day.toInt()
        && d.getHours()   == hour.toInt()
        && d.getMinutes() == min.toInt()
        && d.getSeconds() == sec.toInt();
}

String.prototype.toDate=function f(mask){
    return new Date(
        this.project(mask,"y").emptyDefault("0"),
        this.project(mask,"M").isEmpty()
            ? "0"
            : ""+(this.project(mask,"M").toInt()-1),
        this.project(mask,"d").emptyDefault(1),
        this.project(mask,"H").emptyDefault(0),
        this.project(mask,"m").emptyDefault(0),
        this.project(mask,"s").emptyDefault(0)
    );
}

// ****************************************************************************
Date.prototype.toDatetimeString=function f(){
    var date =  new String(this.getFullYear());
        date = date +
           new String(this.getMonth()+1).padLeft(2,"0")+
           new String(this.getDate()).padLeft(2,"0");

    var h = this.getHours();
    var m = this.getMinutes();
    var s = this.getSeconds();
    return date + " " +
           (h==0?'00':new String(h).padLeft(2,"0"))+
           (m==0?'00':new String(m).padLeft(2,"0"))+
           (s==0?'00':new String(s).padLeft(2,"0"));
}


/* -----------------  Custom class   ------------------- */
// Hashtable class
function Hashtable() {
   this.keys           = new Array();
   this.values         = new Array();
   this.put            = HashtableMethod_put;
   this.get            = HashtableMethod_get;
   this.contains       = HashtableMethod_contains;
   this.remove         = HashtableMethod_remove;
   this.size           = HashtableMethod_size;
   this.getKey         = HashtableMethod_getKey;
   this.keyString      = HashtableMethod_keyString;
   this.valueString    = HashtableMethod_valueString;
}

    function HashtableMethod_get(key){
        for(i=0;i<this.keys.length;i++)
            if(this.keys[i] == key) return this.values[i];
        return null;
    }

    function HashtableMethod_put(key, value) {
        for(i=0;i<this.keys.length;i++){
            if(this.keys[i] == key){
                this.values[i] = value;
                return;
            }
        }
        this.keys[this.keys.length] = key;
        this.values[this.values.length] = value;
    }

    function HashtableMethod_size(){
        return this.keys.length;
    }

    function HashtableMethod_contains(key){
        return this.get(key) != null;
    }

    function HashtableMethod_remove(key){
        k = new Array(this.keys.length-1);
        v = new Array(this.keys.length-1);
        for(i=0,j=0;i<this.keys.length;i++){
            if(this.keys[i] != key){
                 k[j] = this.keys[i];
                 v[j] = this.values[i];
                 j++;
            }
        }
        this.keys = k;
        this.values = v;
    }

    function HashtableMethod_getKey(index){
        return this.keys[index];
    }


    function HashtableMethod_keyString(delimiter){
        return this.keys.join(delimiter);
    }

    function HashtableMethod_valueString(delimiter){
        return this.values.join(delimiter);
    }

/* -----------------  End custom class   ------------------- */

// ****************************************************************************
//             DatePicker section
// ****************************************************************************

// IE4+/NS4+ version - uses DIV tag to generate a JavaScript
// picker within the existing page
// call: DatePicker_v4plus
  function DaysPerMonth(AYear, AMonth) {
  var Result;
  DaysInMonth=new Array(31,28,31,30,31,30,31,31,30,31,30,31);
    Result=DaysInMonth[AMonth];
    if ((AMonth==2) && (IsLeapYear(AYear))) Result++;
    return Result;
  }

  function GetDayName(ADay) {
  var DayNames=new Array('Sun','Mon','Tue','Wed','Thu','Fri','Sat');
  var Result;
  Result=DayNames[ADay];
  return Result;
  }

  function GetMonthName(AMonth) {
  var MonthNames=new Array('January','February','March','April','May','June','July',
                           'August','September','October','November','December');
  var Result;
  Result=MonthNames[AMonth];
  return Result;
  }

  function IsLeapYear(AYear) {
  var Result;
    Result= ((AYear%4==0) && ((AYear % 100 != 0) || (AYear % 400==0)));
    return Result;
  }

  function GetCellText(AYear,AMonth,ACol,ARow) {
  var DayNum,MonthOffSet;
  var CalDate=new Date(AYear,AMonth,1);
  var Day=CalDate.getDay();
  var Result=0;
  MonthOffset=1-(Day+7) % 7; //Day of week for first day
  if (Day+1==7)
    Result=MonthOffset + ACol + (ARow-2)*7
  else
    Result=MonthOffset + ACol + (ARow - 1 ) * 7;
  if ((Result<1) || (Result>DaysPerMonth(AYear,AMonth))) Result=0;

  return Result;
  }

  function BuildCalendar(id,idHidden,mask,AYear,AMonth) {
  var x,y;
  var CellValue;
  var Result;
  var PrevMonth,PrevYear,NextMonth,NextYear;
  var tempDate;
  var tempStr;
  var dropdownid = id + '_pnl';
  var initDay  = (getInitYear(idHidden)!=AYear?0
                      :(getInitMonth(idHidden)!=AMonth?0
                        :getInitDay(idHidden)));

  PrevYear=AYear;
  if (AMonth>0)
    PrevMonth=AMonth-1
  else {
    PrevMonth=11;
    PrevYear=PrevYear-1;
    }

  NextYear=AYear;
  if (AMonth<11)
    NextMonth=AMonth+1
  else {
    NextMonth=0;
    NextYear=NextYear+1;
    }

  Result='<table class=contentTable cellspacing=0 cellpadding=0><tr><td>';
  // Build month cell at top of calendar
  Result=Result+'<table class=contentTable cellspacing=0 cellpadding=0 width="100%"><tr>';
  //Left button
  Result=Result+'<td align=left><a href="#" OnClick="javascript:DrawCalendar(\''+id+'\',\''+ idHidden + '\',\''+mask+'\','+PrevYear+','+PrevMonth+'); "><button type=button class=buttonSmall >&lt;</button></td>';
  //Center month
  Result=Result+'<td align=center>'+GetMonthName(AMonth)+' '+AYear+'</td>';
  //Right button
  Result=Result+'<td align=right><a href="#" OnClick="javascript:DrawCalendar(\''+id+'\',\''+ idHidden + '\',\''+mask+'\','+NextYear+','+NextMonth+'); "><button type=button class=buttonSmall >&gt;</button></td></tr></table>';
  Result=Result+'</td></tr><tr><td>'
  // Build actual calendar
  Result=Result+'<table width="100%" cellspacing=0 cellpadding=0 border="0">';
  for (y=1;y<8;y++) {
    Result=Result+'<tr align=center>';
    for (x=1;x<8;x++) {
      if (y==1) Result=Result+'<th>'+GetDayName(x-1)+'</th>';
      else {
        CellValue=GetCellText(AYear,AMonth,x-1,y-1);

        if (CellValue==0) Result+='<td></td>';
        else {
            Result+='<td><a href="#" class=' + (initDay == CellValue ?'textAlert ':'linkDark ') +
            ' onClick ="'+
                '(' + idHidden + ' ' +
                '? ' + idHidden + '.value = \'' +
                    formatDateHidden(CellValue.toString(), (AMonth+1).toString(), AYear.toString()) + '\'' +
                ': \'\' );' +
            id + '.value = \'' + formatDate(CellValue.toString(),(AMonth+1).toString(),AYear.toString(),mask) +
            '\'; DatePicker_v4plus(\'' + id + '\',\''+ idHidden + '\',\'' + mask + '\');' +
            'if (' + id + '.onchange) ' + id + '.onchange();return false;"> ' +
            CellValue +'</button> </td>';

            } //else
        }
      }
    Result+='</tr>';
    }
  Result+='</table></td>';
  Result+='</tr>';
  Result+="<tr><td align=center><button class=buttonSmall onClick=\"DatePicker_v4plus(\'" + id + "\',\'"+ idHidden + "\',\'" + mask + "\');return false;\">CLOSE</button></td></tr>";
  Result+='</table>';
  return Result;
  }

  //creates date in a format YYYYMMDD TTTTTT
  function formatDateHidden(day, month, year) {
    return year + padDDMM(month,'0') + padDDMM(day,'0') + ' 000000';
  }

  //creates date matching the mask
  function formatDate(day, month, year, mask) {

      dayNum = monthNum = yearNum = 0;
      dayInd = monthInd = yearInd = 0;
    result = "";

      //analyze mask
    for (i=0; i < mask.length; i++) {
        switch (mask.charAt(i)) {
            case "d":
                dayNum++; break;
            case "M":
                monthNum++; break;
            case "y":
                yearNum++; break;
            default: break;
        }
    }

    //prepare data
    if (    ((dayNum>0) & (dayNum<5)) &
            ((monthNum>0) & (monthNum<3)) &
            ((yearNum==2) | (yearNum==4))) {

        if (dayNum>1) day = padDDMM(day,'0');
        if (monthNum ==2) month = padDDMM(month,'0');
        if (yearNum == 2) year = year.substring(2,3);

      //form output
        for (i=0; i < mask.length; i++)
            switch (mask.charAt(i)) {
                case "d":
                    result += day.charAt(dayInd++);
                    break;
                case "M":
                    result += month.charAt(monthInd++);
                    break;
                case "y":
                    result += year.charAt(yearInd++);
                    break;
                default:
                    result += mask.charAt(i);
                    break;
        }

        return(result);
    }
    else    //mask is not supported

        return "";

  }
  // primitive LPAD
  function padDDMM(arg,symbol) {
    return (arg.length == 1)?symbol+arg:arg;
  }

  function DrawCalendar(id,idHidden,mask,AYear,AMonth, onChange) {
  var dropdownid = id + "_pnl";
    if (document.all)
      document.all[dropdownid].innerHTML=BuildCalendar(id,idHidden,mask,AYear,AMonth, onChange)
    else if (document.layers)
      document.layers[dropdownid].innerHTML=BuildCalendar(id,idHidden,mask,AYear,AMonth, onChange);
  }

  function getInitDay(idHidden) {

    if (document.forms[0].elements[idHidden].value != null &&
        document.forms[0].elements[idHidden].value != "")

        return parseFloat(document.forms[0].elements[idHidden].value.substring(6,8));

    else {
        var date = new Date();
        return date.getDate();
    }
  }

  function getInitMonth(idHidden) {

    if (document.forms[0].elements[idHidden].value != null &&
        document.forms[0].elements[idHidden].value != "")

        return parseFloat(document.forms[0].elements[idHidden].value.substring(4,6))-1;

    else {
        var date = new Date();
        return date.getMonth();
    }
  }

  function getInitYear(idHidden) {

    if (document.forms[0].elements[idHidden].value != null &&
        document.forms[0].elements[idHidden].value != "")

        return parseFloat(document.forms[0].elements[idHidden].value.substring(0,4));

    else {
        return( (new Date()).getFullYear() );
    }
  }


  function DatePicker_v4plus(id, idHidden, mask, onChange) {

    var dropdownid = id + "_pnl";

  // IE4+
    if (document.all) {
      if (document.all[dropdownid].style.visibility=='hidden')
             DrawCalendar(id,idHidden,mask,getInitYear(idHidden),getInitMonth(idHidden), onChange);
      document.all[dropdownid].style.visibility=(document.all[dropdownid].style.visibility=="hidden")?"":"hidden";
      }
  // NS4+
    else if (document.layers) {
      if (document.layers[dropdownid].visibility=='hide')
            DrawCalendar(id,idHidden,mask,getInitYear(idHidden),getInitMonth(idHidden), onChange);
      document.layers[dropdownid].visibility=(document.layers[dropdownid].visibility=="hide")?"show":"hide";
      }

  }

// ****************************************************************************
//             DBLookup section
//
// ****************************************************************************


var lookupOpened = false;

    resolveWindowsCount = 0;

        function DBLookup_resolveLabels(fieldHidden,
                                    fieldVisible,
                                    key,
                                    label,
                                    selectedLabels,
                                    dataSourceType,
                                    dataSourceSpec,
                                    dataSourceParams,
                                    where,
                                    multiple,
                                    filtersDuplicatesBySQL,
                                    lookupUIType) {

                    resolveLabels_layer(fieldHidden,
                                    fieldVisible,
                                    key,
                                    label,
                                    selectedLabels,
                                    dataSourceType,
                                    dataSourceSpec,
                                    dataSourceParams,
                                    where,
                                    multiple,
                                    filtersDuplicatesBySQL);

        }

        function MessagingLookup_resolveLabels(fieldHidden,
                                           fieldVisible,
                                           key,
                                           label,
                                           selectedLabels,
                                           dataSourceType,
                                           dataSourceSpec,
                                           where) {

                    resolveLabels(fieldHidden,
                                  fieldVisible,
                                  key,
                                  label,
                                  selectedLabels,
                                  dataSourceType,
                                  dataSourceSpec,
                                  "",
                                  where,
                                  'true',
                                  'Messaging',
                                  false);

        }

        function resolveLabels(fieldHidden,
                           fieldVisible,
                           key,
                           label,
                           selectedLabels,
                           dataSourceType,
                           dataSourceSpec,
                           dataSourceParams,
                           where,
                           multiple,
                           ui,
                           filtersDuplicatesBySQL,
                           lookupUIType) {


            var newWindowOptions;
            var newWindowTop;
            var openWindow;
            var winWidth, winHeight;

            winWidth = 250;
            winHeight = 100;

            // **** Had to remove event.screenX
            // **** Because we switched to <iframe> for Internet Explorer
            // **** akaspersky ****

            posX = 200;
            posY = 200;

            if (document.all) { // ****** Internet Explorer ****
                theForm = document.forms[0];
            } else { // ****** Netscape ***********
                theForm = findFormForName(document, fieldHidden+'_Form');
                if(theForm == null) {
                    theForm = document.forms[0];
                }
            }

            if(theForm == null) {
              wbAlert(getLocalizedMessage_NO_FORM());
               return;
            }
            var masterslaveaddwhere = (theForm.elements[fieldHidden].getAttribute('masterslaveaddwhere')?theForm.elements[fieldHidden].getAttribute('masterslaveaddwhere'):'');

            openWindow= contextPath + "/system/ui/" + ui + "LookupUIResolve.jsp?" +
                        "&fieldHidden=" + fieldHidden +
                        "&fieldVisible=" + fieldVisible +
                        "&key=" + escape(key) +
                        "&label=" + escape(label) +
                        "&selectedLabels=" + selectedLabels +
                        "&dataSourceType=" + dataSourceType +
                        "&dataSourceSpec=" + escape(dataSourceSpec) +
                                                (where == ''? '':"&where=" + (ui=='DB' ? escape(where) : where)) +
                                                (masterslaveaddwhere == ''? '':"&masterslaveaddwhere=" + escape(masterslaveaddwhere)) +
                        "&multiple=" + multiple +
                        "&filtersDuplicatesBySQL=" + filtersDuplicatesBySQL +
                        "&dataSourceParams=" + escape(dataSourceParams) +
                        "&lookupUIType=" + escape(lookupUIType);

            newWindowOptions =     "width=" + winWidth +
                                ",height=" + winHeight +
                                ",screenX="+posX+
                                ",screenY="+posY+
                                ",left="+posX+
                                ",top="+posY+
                                ",innerWidth=" + winWidth +
                                ",innerHeight=" + winHeight +
                                ",alwaysRaised=1,locationbar=0,statusbar=0,resizable=NO";

            var frameName='if' + fieldHidden;
            document.getElementsByName(frameName)[0].src=openWindow;

        }

var wbAlertWindow;  // stores alert window parameters for NN

        function wbAlert(message) {


            var newWindowOptions;
            var newWindowTop;
            var openWindow;
            var winWidth, winHeight;

            winWidth = 200;
            winHeight = 10;

            var posX = 200;
            var posY = 200;

            openWindow= message;

            newWindowOptions =     "width=" + winWidth +
                                ",height=" + winHeight +
                                ",innerWidth=" + winWidth +
                                ",innerHeight=" + winHeight +
                                ",alwaysRaised=0,locationbar=0,statusbar=0,resizable=NO";

            if(document.all) { // **** For IE we are using iFrame
               window.alert(message);
            }  else {  // *** For Netscape Window is Fine
               window.alert(message);   // alert("...") is supported as of netscape 2
            }
        }


// *** Sets the values in a DBLookup based on the default values provided ****
function setDBLookup(controlName, defaultID, defaultName)  {
    var form1, form2;
    form1 = getFormForName(controlName+"_Form");
    form2 = getFormForName(controlName+"_Hidden_Form");
    if (form1 == null || form2 == null) {
       alert(getLocalizedMessage_NO_FORM());
       return;
    }
    setElementValue(form1.name, controlName, defaultID);
    setElementValue(form1.name, controlName+"_label", defaultName);
    setElementValue(form2.name, controlName+"_ID", defaultID);
    setElementValue(form2.name, controlName+"_NAME", defaultName);
}

// *** Sets the values in a DBDropdown based on the default values provided ****
function setDBDropdown(controlName, defaultID, defaultName)  {
    var form1, form2, theDropdown, theValue;
    form1 = getFormForName(controlName+"_Form");
    form2 = getFormForName(controlName+"_Hidden_Form");
    if (form1 == null || form2 == null) {
       wbAlert(getLocalizedMessage_NO_FORM());
       return;
    }
    setElementValue(form2.name, controlName+"_ID", defaultID);
    setElementValue(form2.name, controlName+"_NAME", defaultName);
    theDropdown = findElementForName(form1.name, controlName);
    theValue = defaultID+"!*!"+defaultName;
    if(theDropdown!=null && theDropdown.type.indexOf('select')==0) {
       for (i=0;i<theDropdown.options.length;i++) {
           if (theDropdown.options[i].value == theValue) {
                theDropdown.options[i].selected = true;
                return;
           }
       }
       theDropdown.options[theDropdown.options.length] = new Option(defaultName, theValue);
       theDropdown.options[theDropdown.options.length-1].selected = true;
    }
}

function getDocument() {
    return document;
}

function getFormForName(formName) {
     if (document.all) { // ****** Internet Explorer ****
        theForm = document.forms[0];
     } else { // ****** Netscape ***********
        theForm = findFormForName(document, formName);
        if (theForm == null) {
           theForm = document.forms[0];
        }
     }
     return theForm;
}


// ****************************************************************************
//             MessagingNamesLookup section
// ****************************************************************************

function MessagingNamesLookup_popup(fieldHidden ,
                                    fieldVisible ,
                                    multiple,
                                    pageSize){

  var newWindowOptions;
  var newWindowTop;
  var openWindow;
  var winWidth, winHeight;

  winWidth = 350;
  winHeight = 350;

    if (lookupOpened) {
        handle = window.open('','Lookup');
       if (!(handle.navigator && handle.navigator.platform && handle.navigator.platform.toUpperCase() == 'MACPPC'))
                    handle.close();
    } else
        lookupOpened = true;

  if (document.all) {
      posX = event.screenX;
      posY = event.screenY;
  }
  eleX = posX;
  eleY = posY;

  posX = posX + 20;
  posY = posY - (winHeight/2);

  if ((posX + winWidth) > window.screen.width)
     posX = eleX - winWidth - 100;

  if ((posY + winHeight) > window.screen.height)
     posY = posY - (posY + winHeight - window.screen.height)-32;

  if (posX < 0) posX = 0;
  if (posY < 0) posY = 0;
  var resultSelected = document.forms[0].elements[fieldHidden].resultSelected;
  var itemsCount = document.forms[0].elements[fieldHidden].itemsCount;

  openWindow= contextPath + "/system/ui/MessagingNamesLookupUI_" + multiple + ".jsp" +
                                   "?fieldHidden=" + fieldHidden +
                                   "&fieldVisible=" + fieldVisible +
                                 "&pageSize=" + pageSize +
                                 (resultSelected == ''?'':"&resultSelected=" + resultSelected) +
                                 (itemsCount == null? '' :  "&itemsCount=" + itemsCount);

//  openWindow = openWindow.replace(" ","+");

  newWindowOptions =     "width=" + winWidth +
                          ",height=" + winHeight +
                        ",innerWidth=" + winWidth +
                        ",innerHeight=" + winHeight +
                        ",alwaysRaised=1,scrollbars=1,resizable=YES,screenX="+posX+
                        ",screenY="+posY+
                        ",left="+posX+
                        ",top="+posY;
  window.open(openWindow,"Lookup",newWindowOptions ).focus();
}

//---------------- Simple <-> Override conversion ----------------

function overrideToSimple(input) {
    return     input.substring(6,9) +
            input.substring(0,1) +
            input.substring(3,4) +
            input.substring(10,16)
}

function simpleToOverride(input) {
    return     input.substring(4,5) + "/" +
            input.substring(6,7) + "/" +
            input.substring(0,3) +
            input.substring(8,14)
}


// ****************************************************************************
//             Formbuilder functions
// ****************************************************************************
function getControlValue(control) {
     if (control.value.isNumber()) return control.value.toNumber();
     else if (control.value.indexOf(":")>=0) return GetMinsFromHHMM(controlArray[x].value);
     else return 0;
}

function sum(controlArray) {
  result = 0;
  for (x in controlArray) {
     result = result + getControlValue(controlArray[x]);
  }
  return result;
}

function avg(controlArray) {
  result = 0;
  for (x in controlArray) {
     result = result + getControlValue(controlArray[x]);
  }
  return result/controlArray.length;
}

function maximum(controlArray) {
  result = 0;
  for (x in controlArray) {
    if (getControlValue(controlArray[x])>result) result = getControlValue(controlArray[x]);
  }
  return result;
}

function minimum(controlArray) {
  result = 0;
  for (x in controlArray) {
    if (result == 0) result = getControlValue(controlArray[x]);
    else if (getControlValue(controlArray[x])<result) result = getControlValue(controlArray[x]);
  }
  return result;
}

function isObjectSetForRequired(object) {
    // check for a select element first because a select element's object.value will return
    // the selected option's value, but for select elements, we are concerned with the text not values when determining
    // if the object was set
    if( typeof( object.options ) != "undefined" ) {
        // was a labelled option selected
        return( !object.options[ object.selectedIndex ].text.isEmpty() );
    } else if( typeof(object.value) != 'undefined' ) {
        return !object.value.isEmpty();
    } else { // radio button(s)
        if (typeof(object.checked) == 'undefined') { // array of radio buttons
            for (var i = 0; i < object.length; i++) {
                if (object[i].checked) return true;
            }
            return false;
        } else { // single radio button
            return object.checked;
        }
    }
    return false;
}

// ********** Cross-Platform Section NN-IE *******
// this function is being referenced for Netscape 4.* only
function copyAll(theDocument, targetForm) {
   var i, anObject;
   if(theDocument.forms) {
     for (i=0; i<theDocument.forms.length; i++) {
       anObject = theDocument.forms[i];
       if(anObject.name!=targetForm.name) {
         copyElements(anObject, targetForm);
         if(anObject.forms) {
           copyAll(anObject, targetForm);
         }
         if(anObject.layers) {
           copyAll(anObject.document, targetForm);
         }
       }
     }
   }
   if(theDocument.layers) {
     for (i=0; i<theDocument.layers.length; i++) {
       anObject = theDocument.layers[i];
       copyElements(anObject, targetForm);
       if(anObject.forms) {
         copyAll(anObject, targetForm);
       }
       if(anObject.layers) {
         copyAll(anObject.document, targetForm);
       }
     }
   }
}

function copyElements(aForm, targetForm) {
   var i,j,anObject;
   if(aForm.elements && targetForm.elements) {
     for (i=0; i<aForm.elements.length; i++) {
       anObject = aForm.elements[i];
       for (j=0; j<targetForm.elements.length; j++) {
         if(targetForm.elements[j].name==anObject.name) {
           if(anObject.value==null && anObject.options) { // *** For Selectable Controls *******
             targetForm.elements[j].value=anObject.options[anObject.selectedIndex].value;
           } else { // *** Radio Buttons ***
             if(anObject.type=='radio') {
               if (anObject.checked) {
                 targetForm.elements[j].value=anObject.value;
               }
             } else { // *** All Other Controls ***
               targetForm.elements[j].value=anObject.value;
             }
           }
         }
       }
     }
   }
}
// ** getElement *********
function getElement(elementName) {
    var elementToReturn;

    // leave the document.all syntax in for now
    if( document.all ) { // ** IE **
        elementToReturn = document.all[elementName];
    } else if( navigator.appName == "Netscape" && navigator.userAgent.charAt(8) >= 5 ) {
        // Netscape whose version is greater than 4.*
        elementToReturn = document.forms[ 0 ].elements[ elementName ];

        // The above won't return non-form elements (ex. DIV for labels).
        if(elementToReturn == null){
            elementToReturn = document.getElementsByName(elementName)[0];
        }
    } else {
        elementToReturn = getElementInternal(document, elementName, 'page_form');
    }
    if( elementToReturn != null ) {
        return elementToReturn;
    }
}
function getElementInternal(theDocument, elementName, excludedFormName) {
   var i, j, aForm, aLayer, anElement;
   if(theDocument.forms) {
      for (i=0; i<theDocument.forms.length; i++) {
         aForm = theDocument.forms[i];
         if(aForm.name != excludedFormName) {
            if (aForm.elements) {
               if (aForm.elements[elementName]!=null) {
                  return aForm.elements[elementName];
               }
            }
         }
         if(aForm.forms) {
            anElement = getElementInternal(aForm, elementName, excludedFormName);
            if (anElement!=null) {
               return anElement;
            }
         }
         if(aForm.layers) {
            anElement = getElementInternal(aForm.document, elementName, excludedFormName);
            if (anElement!=null) {
               return anElement;
            }
         }
      }
   }
   if(theDocument.layers) {
      for (i=0; i<theDocument.layers.length; i++) {
         aLayer = theDocument.layers[i];
         if(aLayer.elements) {
            if (aLayer.elements[elementName]!=null) {
               return aLayer.elements[elementName];
            }
         }
         if(aLayer.forms) {
            anElement = getElementInternal(aLayer, elementName, excludedFormName);
            if (anElement != null) {
               return anElement;
            }
         }
         if(aLayer.layers) {
            anElement = getElementInternal(aLayer.document, elementName, excludedFormName);
            if (anElement != null) {
               return anElement;
            }
         }
      }
   }
}
// ** End of GetElement ***
function findElementForName(targetFormName, targetElementName) {
   var i, targetForm;
   targetForm = findFormForName(document, targetFormName);
   if(targetForm!=null && targetForm.name == targetFormName && targetForm.elements) {
      for (i=0; i<targetForm.elements.length; i++) {
         if(targetForm.elements[i].name==targetElementName) {
            return targetForm.elements[i];
         }
      }
   }
}

function getElementValue(targetFormName, targetElementName) {
   var i, targetElement;
   targetElement = findElementForName(targetFormName, targetElementName);
   if(targetElement!=null && targetElement.name == targetElementName) {
      return targetElement.value && targetElement.value != ''
                  ?    targetElement.value
                :     '';
   } else {
      return '';
   }
}

function setElementValue(targetFormName, targetElementName, theValue) {
    var i, bn, targetForm;
    targetForm = findFormForName(document, targetFormName);
    if(targetForm.name == targetFormName && targetForm.elements) {
      bn=0;
      for (i=0; i<targetForm.elements.length; i++) {
        if(targetForm.elements[i].name==targetElementName) {
           if(targetForm.elements[i].type == 'radio') { // *** RadioButtons ***
              if(bn == theValue) {
                 targetForm.elements[i].checked=true;
              } else {
                   targetForm.elements[i].checked=false;
              }
              bn++;
           } else { // *** All Other Controls ***
              targetForm.elements[i].value=theValue;
           }
        }
      }
    }
}

function getStartDayOfWeek(today, startDayOfWeek, weekOffset){
    startDay = today.getDate() - today.getDay();
    if(startDayOfWeek > today.getDay()){
        startDay -= 7;
    }
    startDay += startDayOfWeek + (weekOffset * 7);
    return startDay;
}

function setDateRangeDatePickers(value, startName, endName, startMask, endMask, startDayOfWeek) {
    //startDayOfTheWeek - 1=Sunday, 2=Monday, ..., 7=Saturday
    var sValue = value.substr(0,value.indexOf('~!~'));
    var today = new Date() ;
    var startPicker = getElement(startName);
    var startPickerDummy = getElement(startName+'_dummy');
    var endPicker = getElement(endName);
    var endPickerDummy = getElement(endName+'_dummy');

    if (!startPicker || !startPickerDummy || !endPicker || !endPickerDummy) return;

    var NSYear = document.all ? 0 : 1900;

    var today = new Date() ;
    var startDate;
    var endDate;
    var NSYear = document.all ? 0 : 1900;
    var DAY_MILLIS = 24*60*60*1000;

    //IE is perfectly happy with having negative values for month or date. i.e:
    //startDate = new Date(today.getYear(), today.getMonth(), today.getDate()-today.getDay());
    //Netscape doesn't like the idea so we have to do some calculations...
    //Netscape as well behaves kind of wierd(!?) in it's year calculations...
    //I love Netscape, it protects my grey cells from total extinction ;-)

    if (sValue == 'TODAY') {
        startDate = new Date(today.getYear(), today.getMonth(), today.getDate());
        endDate = startDate;
    } else if (sValue == 'THISWEEK') {
        startDate = new Date(today.getYear(), today.getMonth(), getStartDayOfWeek(today, startDayOfWeek - 1,0), 12, 0, 0 );
        endDate = new Date(startDate.getTime()+DAY_MILLIS*6);
    } else if (sValue == 'THISMONTH') {
        startDate = new Date(today.getYear(), today.getMonth(), 1);
        endDate = new Date(today.getYear(), today.getMonth()+1, 1);
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
    } else if (sValue == 'THISYEAR') {
        startDate = new Date(today.getYear(), 0, 1);
        endDate = new Date(today.getYear()+1, 0, 1);
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
    } else if (sValue == 'YESTERDAY') {
        startDate = new Date(today.getYear(), today.getMonth(), today.getDate()-1);
        //startDate = new Date(today.getTime()-DAY_MILLIS);
        endDate = startDate;
    } else if (sValue == 'LASTWEEK') {
        startDate = new Date(today.getYear(), today.getMonth(), getStartDayOfWeek(today, startDayOfWeek - 1, -1), 12, 0, 0 );
        endDate = new Date(startDate.getTime()+DAY_MILLIS*6);
    } else if (sValue == 'LASTMONTH') {
        endDate = new Date(today.getYear(), today.getMonth(), 1);
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
        startDate = new Date(endDate.getTime());
        startDate.setDate(1);
    } else if (sValue == 'LASTYEAR') {
        startDate = new Date(today.getYear()-1, 0, 1);
        endDate = new Date(today.getYear(), 0, 1);
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
    } else if (sValue == 'TOMORROW') {
        startDate = new Date(today.getYear(), today.getMonth(), today.getDate()+1);
        endDate = startDate;
    } else if (sValue == 'NEXTWEEK') {
        startDate = new Date(today.getYear(), today.getMonth(), getStartDayOfWeek(today, startDayOfWeek - 1,1) );
        endDate = new Date(startDate.getTime()+DAY_MILLIS*6);
    } else if (sValue == 'NEXTMONTH') {
        startDate = new Date(today.getYear(), today.getMonth()+1, 1);
        endDate = new Date(today.getYear(), today.getMonth()+2, 1);
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
    } else if (sValue == 'NEXTYEAR') {
        startDate = new Date(today.getYear()+1, 0, 1);
        endDate = new Date(today.getYear()+2, 0, 1);
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
    } else if (sValue == 'LAST3DAYS') {
        endDate = new Date(today.getYear(), today.getMonth(), today.getDate());
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
        startDate = new Date(endDate.getTime()-DAY_MILLIS*2);
    } else if (sValue == 'LAST7DAYS') {
        endDate = new Date(today.getYear(), today.getMonth(), today.getDate());
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
        startDate = new Date(endDate.getTime()-DAY_MILLIS*6);
    } else if (sValue == 'LAST30DAYS') {
        endDate = new Date(today.getYear(), today.getMonth(), today.getDate());
        endDate = new Date(endDate.getTime()-DAY_MILLIS);
        startDate = new Date(endDate.getTime()-DAY_MILLIS*29);
    } else {
        //do nothing
        return;
    }

    var startYear = '' + (startDate.getYear()+2*NSYear);
    var startMonth = '' + (startDate.getMonth()+1);
    var startDay = '' + startDate.getDate();
    var endYear = '' + (endDate.getYear()+2*NSYear);
    var endMonth = '' + (endDate.getMonth()+1);
    var endDay = '' + endDate.getDate();

    //set values
    if (startPicker)
        startPicker.value = formatDateHidden(startDay, startMonth, startYear);
    if (startPickerDummy)
        startPickerDummy.value = formatDate(startDay, startMonth, startYear, startMask);
    if (endPicker)
        endPicker.value = formatDateHidden(endDay, endMonth, endYear);
    if (endPickerDummy)
        endPickerDummy.value = formatDate(endDay, endMonth, endYear, endMask);
}


// ***** For the DBLookup AddWhere ******
function getElementAddWhere(targetFormName, targetElementName) {
   var i, targetElement;
   targetElement = findElementForName(targetFormName, targetElementName);
   if(targetElement!=null && targetElement.name == targetElementName) {
      return targetElement.getAttribute('masterslaveaddwhere') && targetElement.getAttribute('masterslaveaddwhere') != ''
                  ? targetElement.getAttribute('masterslaveaddwhere')
                : '';
   } else {
      return '';
   }
}

function setElementAddWhere(targetFormName, targetElementName, theValue) {
    var i, bn, targetForm;
    targetForm = findFormForName(document, targetFormName);
    if(targetForm.name == targetFormName && targetForm.elements) {
      bn=0;
      for (i=0; i<targetForm.elements.length; i++) {
        if(targetForm.elements[i].name==targetElementName) {
              targetForm.elements[i].setAttribute('masterslaveaddwhere',theValue);
        }
      }
    }
}

function findFormForName(theDocument, targetFormName) {
   var i, anObject, foundObject;
   if(theDocument.forms) {
     for (i=0; i<theDocument.forms.length; i++) {
        anObject = theDocument.forms[i];
        if(anObject.name == targetFormName) {
           return anObject;
        } else {
           if(anObject.forms) {
              foundObject = findFormForName(anObject, targetFormName);
              if(foundObject!= null && foundObject.name == targetFormName) {
                return foundObject;
              }
           }
           if(anObject.layers) {
              foundObject = findFormForName(anObject.document, targetFormName);
              if(foundObject!= null && foundObject.name == targetFormName) {
                 return foundObject;
              }
           }
        }
     }
   }
   if(theDocument.layers) {
     for (i=0; i<theDocument.layers.length; i++) {
       anObject = theDocument.layers[i];
       if(anObject.forms) {
         foundObject = findFormForName(anObject, targetFormName);
         if(foundObject!= null && foundObject.name == targetFormName) {
           return foundObject;
         }
       }
       if(anObject.layers) {
         foundObject = findFormForName(anObject.document, targetFormName);
         if(foundObject!= null && foundObject.name == targetFormName) {
            return foundObject;
         }
       }
     }
   }
}

//to format minutes into hh:mm for display
function format_hhmm(mins){
var hh;
var mm;
  hh=Math.floor(mins/60);
  if (hh<10) {
    hh="0"+hh;
  }
  mm=Math.round((mins/60-hh)*60);
  if (mm<10) {
    mm="0"+mm;
  }
  return(hh + ":" + mm);
}

//to format minutes into hh.dd for display (to 2 decimal places)
function format_hhdd(mins) {
var dec_hours;
var int_hours;
  dec_hours=mins/60;
  int_hours=Math.floor(dec_hours*100);
  hh_dd=int_hours/100;
  return hh_dd
}

//convert hh:mm manual entry to minutes value for database updates
function GetMinsFromHHMM(value) {
var shh;
var smm;
var iColon;
var minutes;
  if (value=="") return 0;
  if ((value.indexOf("am") > 0) || (value.indexOf("pm") > 0)) {
      value = convert24Hour(value);
  }
  shh=value.substr(0,2);
  smm=value.substr(2,4);
  minutes=parseInt(shh,10)*60+parseInt(smm,10);
  return minutes;
}

//convert hh.dd manual entry to minutes value for database updates
function GetMinsFromHHDD(value) {
var minutes;
  if (value=="") return 0;
  minutes=parseInt(parseFloat(value)*60,10);
  return minutes;
}

function GetTimeDifference(value1,value2) {
  if (value1>value2) {
    return value2+(1440-value1);
  } else {
    return value2-value1;
  }
}

//verify that times entered are valid - associated with INTEB display type for start and end times, and for HHMM display type (INHMM)
function ValidateHHMM(value) {
var iColon;
var valid=true;
var hours;
var minutes;
  if (isNaN(value)) {
    iColon=value.indexOf(":");
    if (iColon==-1) {
      valid=false;
    }
    hours=parseInt(value.substr(0,iColon),10);
    minutes=parseInt(value.substr(iColon+1),10);
    if ((hours<0) || (hours>23) || (minutes<0) || (minutes>59)) {  //if invalid, return message to user
      valid=false;
    }
  } else {
    hours=parseInt(value);
    if (hours>23) {
      valid=false;
    }
  }
  return valid;
}

function ValidateHHMMampm(value) {
var iColon, iAM, iPM, upperValue, strTemp, iColon2;
var valid=true;
var hours, minutes, modifiedValue;
  if (isNaN(value)) {
    upperValue = value.toUpperCase();
    iColon=value.indexOf(":");
    iAM = upperValue.indexOf("A");
    iPM = upperValue.indexOf("P");
    if ((iColon==-1) && (iAM == -1) && (iPM == -1)) {
      return "BAD";
    } else {
      strTemp = StringReplace(upperValue, "A", "");
      strTemp = StringReplace(strTemp, "P", "");
      strTemp = StringReplace(strTemp, "M", "");
      if (isNaN(strTemp)) {
        iColon2 = strTemp.indexOf(":");
        if (iColon2 == -1) {
          return "BAD";
        } else {
          hours = parseInt(value.substr(0, iColon2),10);
          minutes = parseInt(value.substr(iColon2 + 1),10);
          if ((hours < 0) || (hours > 23) || (minutes < 0) || (minutes > 59) || (isNaN(hours)) || (isNaN(minutes))) {
            return "BAD";
          } else {
            if (iPM > -1) {
              modifiedValue = convertHoursToAMPM(hours, minutes, iAM, iPM);
            } else {
              modifiedValue = convertHoursToAMPM(hours, minutes, iAM, iPM);
            }
          }
        }
      } else {
        strTemp = StringReplace(strTemp, " ", "");
        if (strTemp == "") {
          modifiedValue = "BAD";
        } else {
          hours = parseInt(strTemp);
          modifiedValue = convertStringToAMPM(hours, iAM, iPM);
        }
      }
    }
  } else {
    if (value == "") {
      modifiedValue = "12:00 am";
    } else {
      hours=parseInt(value);
      modifiedValue = convertStringToAMPM(hours, iAM, iPM);
    }
  }
  return modifiedValue;
}

function convertHoursToAMPM(hours, minutes, iAM, iPM) {
var strTemp;
  if (hours > 23) {
    strTemp = "BAD";
  } else {
    if (hours >= 12) {
      if (hours > 12) {
        hours = hours - 12
      }
      if (iAM > -1) {
        strTemp = "" + ZeroPad(hours, 2) + ":" + ZeroPad(minutes, 2) + " am";
      } else {
        strTemp = "" + ZeroPad(hours, 2) + ":" + ZeroPad(minutes, 2) + " pm";
      }
    } else {
      if (hours == 0) {
        strTemp = "12:" + minutes + " am";
      } else {
        if (iPM > -1) {
          strTemp = "" + ZeroPad(hours, 2) + ":" + ZeroPad(minutes, 2) + " pm";
        } else {
          strTemp = "" + ZeroPad(hours, 2) + ":" + ZeroPad(minutes, 2) + " am";
        }
      }
    }
  }
  return strTemp;
}

function convertStringToAMPM(strValue, iAM, iPM) {
var shh, smm, strTemp;

  strTemp = "" + strValue;
  if (strTemp.length > 4) {
    return "BAD";
  }
  if (strTemp.length <= 2) {
    return convertHoursToAMPM(strTemp, "00", iAM, iPM);
  } else {
    smm = strTemp.substr(strTemp.length - 2, 2);
    shh = strTemp.substr(0, strTemp.length - 2);
    return convertHoursToAMPM(shh, smm, iAM, iPM);
  }
}

//-----------------------------------------------------------------------

    function getByName(objName, isPositioned) {
        if (document.layers && isPositioned)
            return findElementForName(objName + '_Form', objName);
        else
            return document.forms[0].elements[objName];
    }



function TimeData(timeStandard, decimalMinutes,decimalMinutePlaces,padHours) {

	function toString(){
		var result ;
		if(this.timeString || this.timeString ==''){
			result = this.timeString;
		}
		else {
			result = this.getHourString() + this.getHourMinuteSeparator() + this.minuteString;
			if(this.am_pm) {
				result = result + this.am_pm;
			}
		}
	   	return result;
	}


	function reset(){
		this.hour=0;
		this.minute=0;
		this.minuteString='';
	    this.am_pm = undefined;
		this.timeString=undefined;
	}

	function findEndOfTimePart(target){
		var separator = this.getHourMinuteSeparator();
		var hasSeparator = false;
		var i = 0;
		for(i=0;i<target.length;i++){
			var char = target.charAt(i);
			if(!isDigit(char)){
				if(hasSeparator || (char != separator)){
					break;
				}
				hasSeparator=true;
			}
		}
		return i;
	}

	function setTime(time) {
		this.reset();
		var length = time.length;
		if(length < 1){
			this.timeString =time;
			return;
		}
		var pos = this.findEndOfTimePart(time);
		var timePart = time.substring(0,pos);
		var ampmString = displayableAMPMIndicator(time.substring(pos));
		if(ampmString == undefined){
			this.timeString = time;
			return;
		}

		var separatorPos = timePart.indexOf(this.getHourMinuteSeparator());

		if(this.decimalMinutes) {
			var hourDigits = 0;
			if(separatorPos  == -1) {
				hourDigits = timePart.length;
			}
			else {
				hourDigits = separatorPos;
			}

			this.hour= parseInteger(timePart,0,hourDigits);

			var minutePos = hourDigits;
			var minutePart = (minutePos < timePart.length-1) ? timePart.substring(minutePos):".0";
			var decimalAdjuster = Math.pow(10, this.decimalMinutePlaces);
			var minuteValue = 	Math.round( minutePart * decimalAdjuster) / decimalAdjuster;
			var temp = new String(minuteValue).substring(2);//remove '0.'
			var padCount = this.decimalMinutePlaces - temp.length;
			for(var i = 0; i < padCount; i++){
				temp+='0';
			}
			this.minuteString= temp;
			this.minute =  Math.round(minuteValue * 60);
			while (this.minute >= 60) {
			  this.hour++;
			  this.minute-=60;
			}
		}
		else {
			var hourDigits = 0;
			var minutePos = 0;
			if(separatorPos == -1){
				hourDigits = (timePart.length < 3)? timePart.length : timePart.length-2;
				minutePos = hourDigits;
			}
			else {
				hourDigits = separatorPos;
				minutePos = separatorPos+1;
			}
			this.hour= parseInteger(timePart,0,hourDigits);
			this.setMinute(parseInteger(timePart,minutePos,(timePart.length-minutePos)));
			this.am_pm = (ampmString != "")? ampmString:undefined;
		}
	}

	 function setHourMinute(hour,minute, ampm){
	 	this.hour =  (hour.length < 1)? 0:parseInt(hour,10);
	 	this.setMinute((minute.length < 1)? 0:parseInt(minute,10));
	 	this.am_pm = displayableAMPMIndicator(ampm);
	 	this.timeString=undefined;
	 	if(ampm != ""){
	 		this.normalize();
	 	}
	 }

	function setMinute(minute) {
		this.minute = minute;
		this.minuteString = ((minute < 10) ? '0' + minute : minute);
	};


	function normalize(){
		if(this.timeString) {
			return;
		}
		if(this.timeStandard == '12'){
			this.hour = this.hour%24;
			if(this.hour < 12) {
				if(this.am_pm == undefined){
					this.am_pm = getAMString();
				}
				if(this.hour == 0) {
					this.hour = 12;
				}
			}
			else if (this.hour==12) {
				if(this.am_pm == undefined){
					this.am_pm = getPMString();
				}
			}
			else if( this.hour > 12 ) {
				this.hour -= 12;
				this.am_pm = getPMString();
			}
      	}
      	else if(this.timeStandard == '24'){
      		if(this.isPM() ){
      			if(this.hour>0 && this.hour < 12) {
      				this.hour+=12;
      			}
      		}
			else {
				if(this.hour == 12) {
					this.hour = 0;
				}
			}
      		this.am_pm = undefined;
      	}
	}



	this.toString = toString;
	this.setTime = setTime;
	this.setHourMinute = setHourMinute;
	this.normalize=normalize;
	this.reset=reset;
	this.getAMPM = function getAMPM(){return this.am_pm;};
	this.getHour = function getHour() {return this.hour;};
	this.getMinute = function getMinute() {return this.minute;	};
	this.getMinuteString = function getMinuteString() {return this.minuteString;};
	this.getHourString = function getHourString() {
			if(this.isInvalid()){
			return '';
		}
		return ((this.padHours && this.hour < 10)? '0':'') + this.hour;
	};
	this.isPM = function() { return this.am_pm ? (this.am_pm== getPMString()) : (this.hour>=12)};

	this.toSystemString = function toSystemString(){
		if(this.isInvalid()){
			return '';
		}
		var h =  this.isPM() ? ((this.hour <12)? this.hour+12 :this.hour):((this.hour == 12)? 0: this.hour);
		var m = this.minute;
		return ((h < 10)? '0':'') + h + ((m < 10)? '0':'')+ m ;
	}


	this.getHourMinuteSeparator = function getHourMinuteSeparator(){return this.decimalMinutes ? '.' : ':';	};
	this.getTimeString = function getTimeString(){ return this.timeString;};
	this.findEndOfTimePart = findEndOfTimePart;
	this.setMinute = setMinute;
	this.hasInvalidSeparator = function hasInvalidSeparator() {
		return (!this.timeString)? false:(this.timeString.indexOf(this.decimalMinutes ? ':' : '.') != -1);
	};
	this.isInvalid = function isInvalid(){ return (this.timeString)? true:false;};

	this.decimalMinutes = parseBoolean( decimalMinutes);
	this.decimalMinutePlaces= decimalMinutePlaces;
	this.timeStandard = timeStandard;
	this.padHours= parseBoolean( padHours) || (timeStandard == '24');
	this.hour=0;
	this.minute=0
	this.minuteString=undefined;
	this.am_pm=undefined;
	this.timeString=undefined;
}

function parseInteger(target,pos,length){
	return (length ==0)? 0:parseInt(target.substring(pos,pos+length),10);
}

function parseBoolean(target) {
    if (typeof target == "string") {
        return target ? (target.toLowerCase() == 'true') : false;
    }
    return target;
}

/**
 * Handler function used in the "onBlur" and "onChange" events of the TimeEditUI.
 *
 * It attempts to retrieve the "uiParams" from the object's itself (recommended)
 * unless otherwise specified (backward compatibility).
 *
 * @param objName
 * @param {uiParams|undefined} An UI params object or an array of UI params values.
 */

function tBl(objName, uiParams) {

	var uiParams = uiParams || getTimeEditUiParams(objName);

	// If necesssary, convert the UI params array into an params object:
	if (Array.isArray(uiParams)) {
		uiParams = {
	        decimalMinutes: uiParams[0],
	        decimalPlaces: uiParams[1],
	        nullable: uiParams[2],
	        type: uiParams[3],
	        look: uiParams[4],
	        timeStandard: uiParams[5],
	        date: uiParams[6],
	        minHour: uiParams[7],
	        maxHour: uiParams[8],
	        minMinutes: uiParams[9],
	        maxMinutes: uiParams[10],
	        isPositioned: uiParams[11],
	        padHours: uiParams[12],
	        startTimePair: uiParams[13],
	        endTimePair: uiParams[14],
	        showLongSpanMessag: uiParams[15]
		};
	}

     var object = getByName(objName, uiParams.isPositioned);
     var objHours = getByName(objName + '_hours', uiParams.isPositioned);
     var objMinutes = getByName(objName + '_minutes', uiParams.isPositioned);
     var objTime = getByName(objName + '_time', uiParams.isPositioned);
     var objAMPM = getByName(objName + '_AMPM', uiParams.isPositioned);
     var objDate = getByName(objName + '_date', uiParams.isPositioned);
     var objDateDummy = getByName(objName + '_date_dummy', uiParams.isPositioned);
     var objStartPair = getByName(uiParams.startTimePair, false);
     var objEndPair = getByName(uiParams.endTimePair, false);

     return web_data_iu_TimeEditUI_onBlur(
            object,
            objHours,
            objMinutes,
            objTime,
            objAMPM,
            objDate,
            objDateDummy,
            uiParams.decimalMinutes,
            uiParams.decimalPlaces,
            uiParams.nullable,
            uiParams.type,
            uiParams.look,
            uiParams.timeStandard,
            uiParams.date,
            uiParams.minHour,
            uiParams.maxHour,
            uiParams.minMinutes,
            uiParams.maxMinutes,
            uiParams.padHours,
            uiParams.startTimePair,
            uiParams.endTimePair,
            uiParams.showLongSpanMessage);

}


//    - = new vesion of the function, supporting NN and IE = -

// TimeEdit updating procedure
 function web_data_iu_TimeEditUI_onBlur(    object,
                                            objHours,
                                            objMinutes,
                                            objTime,
                                            objAMPM,
                                            objDate,
                                            objDateDummy,
                                            decimalMinutes,
                                            decimalPlaces,
                                            nullable,
                                            type,
                                            look,
                                            timeStandard,
                                            date,
                                            minHour,
                                            maxHour,
                                            minMinutes,
                                            maxMinutes,
                                            padHours,
                                            objStartPair,
                                            objEndPair,
                                            showLongSpanMessage) {


   //clean up hidden field
	if(object) object.value = '';
	removeWhiteSpace(objTime);
	removeWhiteSpace(objHours);
	removeWhiteSpace(objMinutes);




 	var emptyTimeFields  =  objTime ? (objTime.value == '') : (isEmptyField(objHours) && isEmptyField(objMinutes));
	if(emptyTimeFields) {
	  	if (date != 'invisible' &&   (objDate && objDate.value!=null)) {
     		object.value = objDate.value;
     		return;
     	}
     	return false;
  	}

	var timeData = new TimeData(timeStandard,decimalMinutes ,decimalPlaces,padHours);
	if(objTime){
	   	timeData.setTime(objTime.value);
     	if(timeData.isInvalid()) {
            setFieldValue(objHours,'');
       		setFieldValue(objMinutes,'');
       		var errorMsg = timeData.hasInvalidSeparator()? getLocalizedMessage_INVALID_SEPARATOR():getLocalizedMessage_INVALID_TIME();
            return invalidateField(objTime,errorMsg);
        }
	}
	else {
		var hours = getFieldValue(objHours);
		if(look =='spin' && (timeStandard == '12' ) && (hours.length < 1)) {
			return;
		}
		if(isNaN(hours)){
		     return invalidateField(objHours,getLocalizedMessage_INVALID_HOURS());
  		}
		var ampm = getFieldValue(objAMPM);
		var minutes = getFieldValue(objMinutes);
		if((look == 'text') && (timeStandard == '12')) {
			var minuteEnd = timeData.findEndOfTimePart(minutes);
			ampm = minutes.substring(minuteEnd);
			minutes = minutes.substring(0,minuteEnd );
		}
		if(isNaN(minutes)){
   			return invalidateField(objMinutes, getLocalizedMessage_INVALID_MINUTES());
		}
		//alert("timeData.setHourMinute(" + hours + "," + minutes + "," + ampm + ")");
		timeData.setHourMinute(hours,minutes,ampm);
	}


    var hours = timeData.getHour();
	var minutes = timeData.getMinute();

    //ensure that the hour is less than 24 and minute is less than 60
    if (type=='time') {
    	if(hours >=24) {
    		return invalidateField((objTime)? objTime:objHours, getLocalizedMessage_INVALID_HOURS());
    	}
	    if ( decimalMinutes!='true'&& (minutes >=60)) {
	    	return invalidateField((objTime)? objTime:objMinutes, getLocalizedMessage_INVALID_MINUTES());
	    }
	    timeData.normalize();
    }


    // ensure that the input values are within the allowed limits
    if (look=='box') {
    	var testValue = hours * 100  + parseFloat(timeData.getMinuteString());
     	var minValue = parseFloat(minHour * 100) + parseFloat(minMinutes);
    	var maxValue = parseFloat(maxHour * 100) + parseFloat(maxMinutes);
     	if(testValue < minValue) {
    		return invalidateField((objTime)? objTime:objHours, getLocalizedMessage_TIME_LESS());
    	}
    	if (testValue >   maxValue) {
    		return invalidateField((objTime)? objTime:objHours, getLocalizedMessage_TIME_GREATER());
    	}
    }

    setFieldValue(objTime,timeData.toString());
    setFieldValue(objHours, timeData.getHourString());
    var minuteString = timeData.getMinuteString();
    if((look == 'text') && (timeStandard == '12')) {
        minuteString = minuteString + timeData.getAMPM();
    }
    setFieldValue(objMinutes,minuteString );

    if(type == 'interval'){
       object.value = hours*60 + minutes;
    }
    else {
    	var hourMinute = timeData.toSystemString();
       	object.value = ((date != 'none')?  (objDate.value.substring(0,8) + ((hourMinute=='')? '': (' ' + hourMinute + '00'))):  hourMinute);
	}

   	var pairType = '';

 // handle start/end pair boxes
  if (type == 'time' && look == 'box' && timeStandard=='12' &&
      date == 'none' && (objStartPair || objEndPair) && objTime.value) {
     if (!timeData.getAMPM()) {
     	pairType = !isEmptyField(objStartPair) ? 'start' : isEmptyField(objEndPair)? '' :'end';
     } else {
        if ( !isEmptyField(objStartPair) || !isEmptyField(objEndPair) ) {
           pairType = 'check_interval';
        }
     }
  }

   //reset initially unsigned value to minimal interval ( < 12 hours)
   var diff = 0;
   switch(pairType) {
     case 'start':
        diff = 0 + (object.value - objStartPair.value);
        //fall thru
     case 'end':
        if (pairType == 'end') {
            diff = 0 + (objEndPair.value - object.value);
        }
        if ((diff < 0 && diff > -1200) || diff > 1200) {
           if (parseInt(object.value, 10) < 1200) {
              objTime.value = objTime.value.searchReplace(getAMString(),getPMString());
              object.value = ('' + (parseInt(object.value, 10) + 1200)).padLeft(4,'0');
           } else {
              pairType = 'check_interval';
           }
        }
        if (pairType != 'check_interval') {
           break;
        }
     case 'check_interval':
        diff = 0 + ( (objEndPair.value ? objEndPair.value : object.value) -
                     (objStartPair.value ? objStartPair.value : object.value) );
        if ((diff < 0 && diff > -1200) || diff > 1200) {
           if (showLongSpanMessage) {
              wbAlert(getLocalizedMessage_LONG_TIME_SPAN());
              return;
           }
        }
        break;
   }
   if (objTime) objTime.wbValid = true;
  }

//----------------------------------------------------------------

// DatePickerUI updating procedure
function dBl(object,mask) {
  web_data_iu_DatePickerUI_onBlur(object,mask);
}

function date_pre_process(value,mask){
	var maskTokens = new Array();
  var maskNoSeps = "";
  var mtIndex = 0;

	var pChar = '';
  var token = '';
  var curChar = '';

  //mask tokens
  for (i=0; i<mask.length; i++) {
      pChar=mask.substring(i,i+1);
      token = pChar;

      for (i++;i<mask.length;i++){
          curChar = mask.substring(i, i+1);

          if(curChar != pChar) {
              i--;
              break;
          }

          token += curChar;
      }
      if (isDateComponent(pChar)) {
         maskNoSeps += token;
      }
      maskTokens[mtIndex] = token;
      mtIndex++;
      token = '';
  }
  var digit = false;
  var pcDigit= false;
  var inputTokens = new Array();
  var itIndex = 0;

  //value tokens
  for (i=0; i<value.length; i++) {
      pChar=value.substring(i,i+1);
      token = pChar;
      digit = isDigit(pChar);
      for (i++;i<value.length;i++){
          pChar = value.substring(i,i+1);
          pcDigit = isDigit(pChar);
          if ( (digit && !pcDigit) || (!digit && pcDigit) ) {
              i--;
              break
          }
          token += value.substring(i,i+1)
      }
      inputTokens[itIndex] = token;
      itIndex++;
      token = '';
  }
  // if we don't have the full, it may still be valid if they skipped all separators but used leading 0s
  if ( inputTokens.length < maskTokens.length) {
     if (inputTokens.length == 1 && value.length == maskNoSeps.length) {
		var newInputTokens = new Array();
		var curValueStrpos = 0;
		var tokenLength = 0;
		for ( i=0; i < maskTokens.length; i++ ) {
			pChar = maskTokens[i].substring(0,1);
			// if the next token is a valid date component, grab the token based on full length
	        if ( isDateComponent(pChar) ) {
	            tokenLength = maskTokens[i].length;
	            newInputTokens[i] = value.substring(curValueStrpos, curValueStrpos + tokenLength);
	            curValueStrpos += tokenLength;
	        }
	        else {   // if the next token is not a valid date component, it must be a separator, so insert it
	            newInputTokens[i] = maskTokens[i];
	        }
	    }

		inputTokens = newInputTokens;
	 }
	 else {
	   inputTokens = new Array();
	 }
  }

  if (maskTokens.length == inputTokens.length) {
      //'0' padLeft value tokens to mask width, if needed
      for (i=0; i<maskTokens.length; i++) {
          pChar = inputTokens[i].substring(0,1);
          if (isDigit(pChar)) {
              if (inputTokens[i].length > maskTokens[i].length)
                  return;
              if (maskTokens[i].substring(0,1) == 'y') {
                  if (inputTokens[i].length < maskTokens[i].length)
                      return;
              }
              else {
                  inputTokens[i] = inputTokens[i].padLeft(maskTokens[i].length,'0');
              }
          }
      }
  }

  var newValue = '';
  for (i=0; i<inputTokens.length; i++) {
      newValue += inputTokens[i];
  }
  return newValue;
}

function web_data_iu_DatePickerUI_onBlur(object,mask) {
  var value = "";
  if (object.value) value = object.value;
  else return;

	var newValue = date_pre_process(value,mask);
  if (newValue!=null && newValue.isDate(mask)) {
    object.value = newValue;
  }
}

// function isDateComponent: return true if this is a meaningful date component token (M, d, y)
function isDateComponent(character) {
  return ( character == 'M' || character == 'd' || character == 'y' );
}

//----------------------------------------------------------------

// function for temporarily storing field value
function cNumTempStore(inputObj) {
   cNumTempStorage = inputObj.value;
}

// function for revert field value to previously stored value
function cNumTempRevert(inputObj) {
   inputObj.value = cNumTempStorage;
}

// function for retrieve field value to previously stored value
function cNumTempRetrieve(inputObj) {
   if (inputObj != null) {
      return cNumTempStorage;
   }
   return "";
}

// CurrencyUI updating procedure
function getCurrencySign() {
    return '$';
}

function getCurrencySignPosition() {
    return 'left';
}

function getDecimalsSeparator() {
    return '.';
}

function getThousandsSeparator() {
    return ',';
}

function useBracketsForNegativeCurrency() {
    return false;
}

function getMinusSignPosition() {
    return 'left';
}

function getWholeDigitsForPositiveNumber(input, scale, localizedMsgMaxScale) {
    input = Trim(input);
    // Modify the decimal separator as per the webLocal of user.
    if( getDecimalsSeparator() !='' && getDecimalsSeparator() !='.') {
    	input = input.replace('.', getDecimalsSeparator() );
    }
    var result = getDecimalsSeparator()!='' && input.indexOf(getDecimalsSeparator())>=0
                ? input.substring(0,input.indexOf(getDecimalsSeparator()))
                : input;
    if (getDecimalsSeparator()!='' && input.indexOf(getDecimalsSeparator())==0) {
        result = '0';
    }
    //parsing out thousands separator
    if (getThousandsSeparator() !='') {
        while (result.indexOf(getThousandsSeparator()) >=0) {
            result = result.replace(getThousandsSeparator(),'');
        }
        //parsing out the whitespace(0x20)
        //when the thousands separator is no-break space(0xa0),
        //the browser sometimes converts the thousands separator
        //  from no-break space into whitespace.
        if ('\xa0' == getThousandsSeparator().charAt(0)
                && result.indexOf('\x20') >= 0) {
            while (result.indexOf('\x20')>=0) {
                result = result.replace('\x20','');
            }
        }
    }

    if (result.charAt(0)=='-' || !isInteger(result)) {
        wbAlert(getLocalizedMessage_INVALID_NUMBER());
        return null;
    }

    //validate the scale which is the length of whole
    if (result.length > scale) {
        wbAlert(localizedMsgMaxScale);
        return null;
    }

    //format
    return String(parseFloat(result));
}

function getFractionDigitsForPositiveNumber(input, precision, localizedMsgMaxPrecision) {
    input = Trim(input);
    //parsing fraction part
    var result = getDecimalsSeparator()!='' && input.indexOf(getDecimalsSeparator())>=0
                ? input.substring(input.indexOf(getDecimalsSeparator())+1,input.length)
                : '';
    if (getDecimalsSeparator()!='' && !isInteger(result)) {
        wbAlert(getLocalizedMessage_INVALID_NUMBER());
        return null;
    }

    //validate the precision which is the length of decimal digits
    if (result.length > precision) {
        wbAlert(localizedMsgMaxPrecision);
        return null;
    }

    if (getDecimalsSeparator()!='' && precision > result.length) {
        for (i = result.length; i < precision; i++) {
            result = result + '0';
        }
    }
    return result;
}


//------------------------------------------------------------------
function createCurrency(value, minValue, maxValue, scale, precision, localizedMsgMaxScale, localizedMsgMaxPrecision) {
    if(scale==null || scale=="undefined" || scale=="unassigned") {
        scale = 37;
    }
    if(precision==null || precision=="undefined" || precision=="unassigned") {
        precision = 0;
    }
    if(localizedMsgMaxScale==null || localizedMsgMaxScale=="undefined"
            || localizedMsgMaxScale=="unassigned") {
        localizedMsgMaxScale = 'Maximum number of whole digits:' + scale;
    }
    if(localizedMsgMaxPrecision==null || localizedMsgMaxPrecision=="undefined"
            || localizedMsgMaxPrecision=="unassigned") {
        localizedMsgMaxPrecision = 'Maximum number of decimal places is:' + precision;
    }

    var input = Trim('' + value); //force to string type

    var useBracketsForNegative = useBracketsForNegativeCurrency();
    var negativeValue = false;
    if (useBracketsForNegative) {
        if (input.indexOf('(') == 0 && input.indexOf(')') == input.length - 1) {
            negativeValue = true;
            input = input.substring(1, input.length - 1);
        }
    }
    //parsing out currency sign and minus sign
    if (getCurrencySign() != '' && input.indexOf(getCurrencySign()) >= 0) {
        //has currency sign
        if (getCurrencySignPosition() == 'left') {
            // currency sign is at left
            if (getMinusSignPosition() == 'left') {
                // minus sign is at left
                if (input.charAt(0) == '-') {
                    negativeValue = true;
                }
                input = input.substring(input.indexOf(getCurrencySign())
                                + getCurrencySign().length,input.length);
            } else if (getMinusSignPosition() == 'right') {
                // minus sign is at right
                if (input.charAt(input.length - 1) == '-') {
                    negativeValue = true;
                    input = input.substring(0,input.length - 1);
                }
                input = input.substring(input.indexOf(getCurrencySign())
                                + getCurrencySign().length,input.length);
            } else {
                // minus sign is at middle
                input = input.substring(input.indexOf(getCurrencySign())
                                + getCurrencySign().length,input.length);
                if (input.charAt(0) == '-') {
                    negativeValue = true;
                    input = input.substring(1,input.length);
                }
            }
        } else {
            // currency sign is at right
            if (getMinusSignPosition() == 'left') {
                // minus sign is at left
                if (input.charAt(0) == '-') {
                    negativeValue = true;
                    input = input.substring(1,input.length);
                }
                input = input.substring(0,input.indexOf(getCurrencySign()));
            } else if (getMinusSignPosition() == 'right') {
                // minus sign is at right
                if (input.charAt(input.length - 1) == '-') {
                    negativeValue = true;
                }
                input = input.substring(0,input.indexOf(getCurrencySign()));
            } else {
                // minus sign is at middle
                input = input.substring(0,input.indexOf(getCurrencySign()));
                if (input.charAt(input.length - 1) == '-') {
                    negativeValue = true;
                    input = input.substring(0,input.length - 1);
                }
            }
        }
    } else {
        // no currency sign
        if (getMinusSignPosition() == 'left') {
            // minus sign is at left
            if (input.charAt(0) == '-') {
                negativeValue = true;
                input = input.substring(1,input.length);
            }
        } else {
            if (input.charAt(input.length - 1) == '-') {
                negativeValue = true;
                input = input.substring(0,input.length - 1);
            }
        }
    }

    var whole = getWholeDigitsForPositiveNumber(input, scale,
                    localizedMsgMaxScale);
    if (whole == null) {
        return null;
    }

    var fraction = getFractionDigitsForPositiveNumber(input, precision,
                        localizedMsgMaxPrecision);
    if (fraction == null) {
        return null;
    }

    // assemble
    var output = '';
    //whole
    if (getThousandsSeparator() !='') {
        for (i=0;i<whole.length;i++) {
            output += ((whole.length-i)%3 == 0 &&
                        i!=0 ? getThousandsSeparator() : '') + whole.charAt(i);
        }
    }
    //fraction
    if (getDecimalsSeparator()!='' && precision > 0) {
        output += getDecimalsSeparator() + fraction;
    }

    if (getCurrencySign() != '') {
        //currency
        if (getCurrencySignPosition() == 'left') {
            if (negativeValue) {
                if (!useBracketsForNegative) {
                    if (getMinusSignPosition() == 'left') {
                        output = '-' + getCurrencySign() + output;
                    } else if (getMinusSignPosition() == 'right') {
                        output = getCurrencySign() + output + '-';
                    } else {
                        output = getCurrencySign() + '-' + output;
                    }
                } else {
                    output = '(' + getCurrencySign() + output + ')';
                }
            } else {
                output = getCurrencySign() + output;
            }
        } else {
            if (negativeValue) {
                if (!useBracketsForNegative) {
                    if (getMinusSignPosition() == 'left') {
                        output = '-' + output + getCurrencySign();
                    } else if (getMinusSignPosition() == 'right') {
                        output = output + getCurrencySign() + '-';
                    } else {
                        output = output + '-' + getCurrencySign();
                    }
                } else {
                    output = '(' + output + getCurrencySign() + ')';
                }
            } else {
                output = output + getCurrencySign();
            }
        }
    } else {
        if (negativeValue) {
            if (getMinusSignPosition() == 'left') {
                output = '-' + output;
            } else {
                output = output + '-';
            }
        }
    }

    hiddenOutput = (negativeValue ? '-' : '') + whole
                + (precision>0 && getDecimalsSeparator()!='' ? '.' + fraction : '');

    var fieldValue = parseFloat(hiddenOutput);

    if (fieldValue < minValue || fieldValue > maxValue) {
        wbAlert(getLocalizedMessage_VALUE_OUT_OF_RANGE());
        return null;
    }

    if (output.indexOf('NaN') >= 0) {
        wbAlert(getLocalizedMessage_INVALID_VALUE());
        return null;
    }

    return {
    	sysFormat : hiddenOutput,
    	uiFormat : output
    };
}

function formatCurrency(obj, minValue, maxValue, scale, precision,   localizedMsgMaxScale, localizedMsgMaxPrecision) {
		var currency = createCurrency(obj.value, minValue, maxValue, scale, precision,  localizedMsgMaxScale, localizedMsgMaxPrecision);
		if(currency == null){
        cNumTempRevert(obj);
        return false;
    }
		else {
			var fieldId = obj.getAttribute('id');
			var hiddenField = fieldId.substring(0, fieldId.lastIndexOf('_dummy'));

			document.forms[0].elements[hiddenField].value = currency.sysFormat;
			obj.value = currency.uiFormat;
    return true;
		}
}




//------------------------------------------------------------------
function formatDecimal(obj,minValue,maxValue, scale, precision,
        localizedMsgMaxScale, localizedMsgMaxPrecision) {
    if(scale==null || scale=="undefined" || scale=="unassigned") {
        scale = 37;
    }
    if(precision==null || precision=="undefined" || precision=="unassigned") {
        precision = 0;
    }
    if(localizedMsgMaxScale==null || localizedMsgMaxScale=="undefined"
            || localizedMsgMaxScale=="unassigned") {
        localizedMsgMaxScale = 'Maximum number of whole digits:' + scale;
    }
    if(localizedMsgMaxPrecision==null || localizedMsgMaxPrecision=="undefined"
            || localizedMsgMaxPrecision=="unassigned") {
        localizedMsgMaxPrecision = 'Maximum number of decimal places is:' + precision;
    }

    var input = Trim(obj.value);
    var fieldId = obj.getAttribute('id');
    var hiddenField = fieldId.substring(0, fieldId.lastIndexOf('_dummy'));

    var negativeValue = false;
    //parsing minus sign
    if (getMinusSignPosition() == 'left') {
        if (input.charAt(0) == '-') {
            negativeValue = true;
            input = input.substring(1,input.length);
        }
    } else {
        if (input.charAt(input.length - 1) == '-') {
            negativeValue = true;
            input = input.substring(0,input.length - 1);
        }
    }

    var whole = getWholeDigitsForPositiveNumber(input, scale,
                    localizedMsgMaxScale);
    if (whole == null) {
        cNumTempRevert(obj);
        return false;
    }

    var fraction = getFractionDigitsForPositiveNumber(input, precision,
                        localizedMsgMaxPrecision);
    if (fraction == null) {
        cNumTempRevert(obj);
        return false;
    }

    // assemble
    var output = '';
    //whole
    if (getThousandsSeparator() !='') {
        for (i=0;i<whole.length;i++) {
            output += ((whole.length-i)%3 == 0 &&
                        i!=0 ? getThousandsSeparator() : '') + whole.charAt(i);
        }
    }
    //fraction
    if (getDecimalsSeparator()!='' && precision > 0) {
        output += getDecimalsSeparator() + fraction;
    }

    if (negativeValue) {
        if (getMinusSignPosition() == 'left') {
            output = '-' + output;
        } else {
            output = output + '-';
        }
    }

    hiddenOutput = (negativeValue ? '-' : '') + whole
                + (precision>0 && getDecimalsSeparator()!='' ? '.' + fraction : '');

    var fieldValue = parseFloat(hiddenOutput);

    if (fieldValue < minValue || fieldValue > maxValue) {
        wbAlert(getLocalizedMessage_VALUE_OUT_OF_RANGE());
        cNumTempRevert(obj);
        return false;

    }

    if (output.indexOf('NaN') >= 0) {
        wbAlert(getLocalizedMessage_INVALID_VALUE());
        cNumTempRevert(obj);
        return false;
    }

    document.forms[0].elements[hiddenField].value = hiddenOutput;

    obj.value = output;
    return true;
}

//------------------------------------------------------------------
function createPercent(value,  minValue, maxValue, scale, precision, localizedMsgMaxScale, localizedMsgMaxPrecision){
    function isInvalid(value) {
        return (value == null) || (value == 'undefined') || (value == 'unassigned');
    }
    function separateThousands(value){
        var separator = getThousandsSeparator();
        if(separator  == '') return value;

        var separated = '';
        for (var i=0, j = value.length; i < j; i++) {
            if( i > 0 && (j - i) % 3 == 0) separated += separator ;
            separated += value.charAt(i);
        }
        return separated;
    }

    if(isInvalid(scale))  scale = 30;
    if(isInvalid(precision))  precision = 2;
    if(isInvalid(localizedMsgMaxScale))  localizedMsgMaxScale = 'Maximum number of whole digits:' + scale;
    if(isInvalid(localizedMsgMaxPrecision))  localizedMsgMaxPrecision =  'Maximum number of decimal places is:' + precision;


    var input = Trim(value);
    var negativeValue = false;
    //parsing minus sign
    if (getMinusSignPosition() == 'left') {
        if (input.charAt(0) == '-') {
            negativeValue = true;
            input = input.substring(1,input.length);
        }
    } else {
        if (input.charAt(input.length - 1) == '-') {
            negativeValue = true;
            input = input.substring(0,input.length - 1);
        }
    }
    //  parsing out percent sign
    if (input.length > 0 && input.charAt(input.length - 1) == '%') {
        input = input.substring(0, input.length - 1);
    }

    var whole = getWholeDigitsForPositiveNumber(input, scale,  localizedMsgMaxScale);
    if (whole == null) {
        return null;
    }

    var fraction = getFractionDigitsForPositiveNumber(input, precision,  localizedMsgMaxPrecision);
    if (fraction == null) {
        return null;
    }

    var percent = {};

    percent.uiFormat = separateThousands(whole);
    percent.sysFormat = whole;

    if(precision > 0) {
        var decimalSeparator =  getDecimalsSeparator();
        if(decimalSeparator == '') decimalSeparator = '.';

        percent.uiFormat+= (decimalSeparator + fraction);
        percent.sysFormat+= (decimalSeparator + fraction);
    }


    if (negativeValue) {
        percent.uiFormat =  (getMinusSignPosition() == 'left') ?  ('-' + percent.uiFormat)  :   (percent.uiFormat + '-') ;
        percent.sysFormat = '-' + percent.sysFormat;
    }

    percent.uiFormat += '%';

    return percent;
 }


function formatPercent(visibleField, minValue,maxValue, scale, precision, localizedMsgMaxScale, localizedMsgMaxPrecision) {
    var percent = createPercent(visibleField.value, minValue, maxValue, scale, precision, localizedMsgMaxScale, localizedMsgMaxPrecision );
    if(percent == null){
        cNumTempRevert(visibleField);
        return false;
    }
    if (percent.uiFormat.indexOf('NaN') >= 0) {
        wbAlert(getLocalizedMessage_INVALID_VALUE());
        cNumTempRevert(visibleField);
        return false;
    }

    var visibleFieldId = visibleField.getAttribute('id');
    var hiddenFieldId = visibleFieldId.substring(0, visibleFieldId.lastIndexOf('_dummy'));
    var hiddenField = document.forms[0].elements[hiddenFieldId];

    hiddenField.value = percent.sysFormat;
    visibleField.value = percent.uiFormat;
    return true;
}

function getFieldValue (object) {
	if(!object){
		return undefined;
	}

    return object.type.indexOf('select')==0
                ?    object.options[object.selectedIndex].value
                :    object.value;
}

function setFieldValue(object,value){
	if(!object){
		return;
	}
    if (object.type && object.type.indexOf('select')==0) {
        for (i=0;i<object.length;i++)
            if (object.options[i].value == value) {
                object.options[i].selected = true;
                return;
            }
    } else
        object.value = value;
}

function _alert(object) {
                if (document.forms[0].object)
                    object();
                else
                    wbAlert("Message is not found");
}

//------------ Form Validation ---------------

function wbValidateFields(theDocument,field,container) {
    var i, anObject, valid;

    if (theDocument.elements) {
        valid = checkFields(theDocument,field,container);
    }

    if( theDocument.forms ) {
        var formSize = theDocument.forms.length;
        for( i = 0 ; i < formSize ; i++ ) {
            anObject = theDocument.forms[ i ];
            if (anObject.elements && (!container || $.contains(anObject, container))) {
                valid = checkFields(anObject,field,container);
                if(!valid) {
                    return false;
                }
            }
            if(anObject.forms) {
                valid = wbValidateFields(anObject,field,container);
                if(!valid) {
                    return false;
                }
            }
            // layers is only valid in Netscape 4
            // leave this here as it is legacy code
            if(anObject.layers) {
                valid = wbValidateFields(anObject.document,field,container);
                if(!valid) {
                    return false;
                }
            }
        }
    }
    // document.layers is only valid in Netscape 4
    // leave this here as it is legacy code
    if(theDocument.layers) {
        for (i=0; i<theDocument.layers.length; i++) {
            anObject = theDocument.layers[i];
            if (anObject.elements && (!container || $.contains(anObject, container))) {
                valid = checkFields(anObject,field,container);
                if(!valid) {
                    return false;
                }
            }
            if(anObject.forms) {
                valid = wbValidateFields(anObject,field,container);
                if(!valid) {
                    return false;
                }
            }
            if(anObject.layers) {
                valid = wbValidateFields(anObject.document,field,container);
                if(!valid) {
                    return false;
                }
            }
        }
    }

    return customOnSubmit(field);
}

function customOnSubmit(field) {
  return true;
}


function checkFields(aForm,field,container) {
    var i;

    if(aForm.elements) {
        for (i=0; i<aForm.elements.length; i++) {
            var elem = aForm.elements[i];
            if (!container || $.contains(container, elem)) {
                if (field == 'isResolving') {
                    if (elem.isResolving != null && elem.isResolving == true) {
                        return false;
                    }
                } else if (field == 'wbValid') {
                    if (elem.wbValid != null && elem.wbValid == false) {
                        if (elem.focus) setTimeout(function() { elem.focus(); }, 0);
                        return false;
                    }
                } else if (field == 'isValidating') {
                    if (elem.isValidating != null && elem.isValidating == true) {
                        return false;
                    }
                } else if (field == 'validNumber') {
                    if (elem.validNumber != null && elem.validNumber == false) {
                        if (elem.focus) elem.focus();
                        return false;
                    }
                }
            }
        }
    }
    return true;
}



var gButton;


function validateFormFields(execute) {
    return validateFormFieldsInContainer(null, execute);
}

function validateFormFieldsInContainer(container, execute) {
    if (!wbValidateFields(document, 'isResolving', container)) {
        /* wait..... */
        setTimeout('validateFormFields("' + execute + '")', 1000);
        return;
    }

    /* done waiting */

    if (!wbValidateFields(document, 'wbValid', container)) {
        alert(getLocalizedMessage_INCORRECT_VALUE());
        if( gButton ) {
            gButton.disabled=false;
        }
        return false;
    } else {
        if(execute != null && execute != 'undefined' && execute != 'unassigned' && execute != '') {
            setTimeout(execute,500);
        }
        return true;
    }
}

function validateNumberField(execute) {
    if (!wbValidateFields(document,'isValidating')) {
        /* wait..... */
        setTimeout('validateNumberField("' + execute + '")', 1000);
        return;
    }

    /* done waiting */

    if (!wbValidateFields(document,'validNumber')) {
        alert(getLocalizedMessage_INCORRECT_VALUE());
        return false;
    } else {
        if(execute != null && execute != 'undefined' && execute != 'unassigned' && execute != '') {
            setTimeout(execute,500);
        }
        return true;
    }
}


function performSubmit() {
    /* Only perform submit after security validation has completed */
    if (document.getElementsByName("bigH")[0] == null) {
        /* wait..... */
        setTimeout('performSubmit()', 1000);
        return;
    }
    /* done waiting */
	document.forms[0].submit();
	return true;
}

function validateFormFieldsWithButtonsDisabled(button, execute) {
    gButton = button;
    if( gButton ) gButton.disabled=true;
    return validateFormFields(execute);
}

// Trimming functions

function Trim(orgString){
  return LTrim(RTrim(orgString))
}

function LTrim(orgString){
  return orgString.replace(/^\s+/,'')
}

function RTrim(orgString){
  return orgString.replace(/\s+$/,'')
}

// **** Zooming Fonts For Select Controls ****
function zoomSelectFontsBy(delta) {
   var i, j, iOldSize, sOldSize, ntx;
   for(i=0; i<document.forms.length; i++) {
      if(document.forms[i].elements) {
         for(j=0; j<document.forms[i].elements.length; j++) {
            if(document.forms[i].elements[j].type.indexOf('select')==0 && document.forms[i].elements[j].style.fontSize) {
               sOldSize = document.forms[i].elements[j].style.fontSize;
               ntx = sOldSize.indexOf('px');
               if(ntx >= 0) {
                  sOldSize = sOldSize.substring(0,ntx);
                  if (isNaN(sOldSize)) {
                        iOldSize = 12 + parseInt(delta);
                  } else {
                     iOldSize = parseInt(sOldSize) + delta;
                  }
                  document.forms[i].elements[j].style.fontSize = iOldSize + 'px';
               }
            }
         }
      }
   }
}

// ------------------------------------------------------------------------
// decides whether or not scrollbars should be added to a popup window
function areScrollbarsAdded(){
    var scrollbars = 0;
    // Always show scrollbars for netscape
    if(document.layers) scrollbars = 1;
    // In IE show scrollbars if screen resolution is less <= 800x600
    else if(screen.width <= 800) scrollbars = 1;
    return scrollbars;
}

//--------------------
// replaces the long 'getElementAddWhere thing

function geAW( fieldName ) {
    return escape(getElementAddWhere((document.all
                                ? document.forms[0].name
                                : fieldName + '_Form') , fieldName )) ;
}

function seAW( fieldName, value ) {
    return setElementAddWhere((document.all
                                ? document.forms[0].name
                                : fieldName + '_Form') , fieldName, value ) ;
}

//---------------
// outsources onClick function in timesheet
function tsOCl(colName, recCnt, object) {
    document.forms[0].elements['CHECKBOX_' + colName + '_' + recCnt].value = (object.checked ? 'Y' : 'N');
}
//
function cbYN(object) {
	var $object = $(object);
	$object.attr('value', ($object.prop('checked') ? 'Y' : 'N'));
	if (navigator.userAgent.match(/\bchrome\/45\b/i)) {
		$object.change();
	}
}
//
function cbaYN(name,object) {
    document.forms[0].elements[name].value =(object.checked?'Y':'N');
}

function StringReplace(sInput, sFind, sReplace) {

  if (!sInput ||sInput == '' ) return '';
  var sTemp = sInput;
  while (sTemp.indexOf(sFind) != -1) {
    sTemp = sTemp.replace(sFind, sReplace);
  }
  return sTemp;
}

function enableParentSubmit() {
    elements = window.opener.document.forms[0].elements;
    oldLabel = window.opener.document.all.Submit_Label.value;

    if (elements.length > 0) {
        for (i = 0 ; i < elements.length ; i ++) {
            elements[i].disabled=false;
            if (elements[i].value=='Processing..') {
                elements[i].value=oldLabel;
            }
        }
    }
    window.opener._is_transaction_in_progress_=false;
}

// Display the status messages on the top of the page
// the value is extracted from the hidden object:
//     window.document." + WebConstants.WEB_PAGE_FORM_NAME + ".STATUS_MESSAGE_HIDDEN + i;"
// and is called by onLoad event for each page (used in PageTag.java)

function printPageActionStatus(obj,type,size,statusBoxHidden) {
    if(obj!=null && obj!="undefined" && obj!="unassigned") {
        if(obj.value!=null && obj.value!="" && obj.value!="unassigned") {
		  var pageStatusBox = document.getElementById("pageStatusBox");
	      var statusLeft = document.getElementById("statusLeft");
	      var statusRight = document.getElementById("statusRight");
	      var statusMsg = document.getElementById("statusMessage");
	      var ul = document.getElementById("list");

	      if (type == "error") {
              statusLeft.className = "statusLeftError";
		      statusMsg.className="statusErrorMsg";
		      statusRight.className = "statusRightError";
          } else if (type == "warn") {
              statusLeft.className = "statusLeftWarn";
              statusMsg.className="statusWarnMsg";
              statusRight.className = "statusRightWarn";
		  } else {
              statusLeft.className = "statusLeft";
              statusMsg.className="statusMsg";
              statusRight.className = "statusRight";
          }
    	  size = (typeof size == "undefined") ? '1' : size;
	      if(size > 1){
	        var newLI = document.createElement("li");
			var newText = document.createTextNode(obj.value);
			newLI.appendChild(newText);
			ul.style.marginTop=".1em";
			ul.style.marginBottom=".2em";
			ul.appendChild(newLI);
            statusLeft.style.paddingLeft="25px";
		    statusMsg.style.height="auto";
		    statusMsg.style.paddingRight="1em";
	       	statusRight.className='';
	   		pageStatusBox.style.marginBottom="3em";
		  } else {
			 if(ul != null && ul.parentNode != null) {
			   	 ul.parentNode.removeChild(ul);
		     }
	         statusMsg.innerHTML=obj.value;
          }
        pageStatusBox.style.whiteSpace ="nowrap";
     	if(!statusBoxHidden) pageStatusBox.style.display ="block";

    }
  }
}

function printPageActionStatusWithOpts(obj,type,size,statusBoxHidden,opts) {
    if(obj!=null && obj!="undefined" && obj!="unassigned") {
        if(obj.value!=null && obj.value!="" && obj.value!="unassigned") {
            printPageActionStatus(obj,type,size,statusBoxHidden);
            //check extra options
            if (opts !== ""){
                var optsJSON = JSON.parse(opts);
                if (optsJSON.formGroupAttribute === "maintenance" && optsJSON.action === "save"){
                    printPageActionStatusMaintSaveError(optsJSON.formId,obj.value);
                }
            }
        }
    }
}

// display error message in the appropriate form, instead of only displaying on the top of page
// for maintenance forms.
function printPageActionStatusMaintSaveError(formId,errorMsg) {
    var statusMsg = document.getElementById("statusMessage");
    statusMsg.innerHTML="Error on page";
    var targetElement;
    var formStatusBox;
    var formStatusMsg;

    // Display error msg to appropriate form
    targetElement = $("div[data-formId='" + formId + "'] div.mfrmHeader");
    formStatusBox = $("<div class='pageStatusBox errorStatusBox'>" +
        "<div class='statusLeftError'></div>" +
        "<div class='statusErrorMsg'></div>" +
        "<div class='statusRightError'></div>" +
        "</div>");
    $(formStatusBox).insertBefore($(targetElement));
    formStatusMsg = $("div[data-formId='" + formId + "'] div.errorStatusBox .statusErrorMsg");
    $(formStatusMsg).html(errorMsg);
    $(formStatusMsg).css("white-space", "nowrap");
    $(formStatusMsg).css("display", "block");
    $(formStatusMsg).css("margin-bottom", "10px");
    //add space between statusMsgBox and targetElement
    $(formStatusBox).next().css("clear","left");
}

function printUIPath(obj) {
    if(obj!=null && obj!="undefined" && obj!="unassigned") {
        if(obj.value!=null && obj.value!="" && obj.value!="unassigned") {
            var breadcrumb = document.getElementById("breadcrumb");
            breadcrumb.innerHTML=obj.value;
            breadcrumb.style.display = '';
            obj.value = '';
        }
    }
}

function moveUIPathBox() {
    var topOffset = 0;
    var Dif = parseInt((document.body.scrollTop+topOffset-document.all.uiPathBoxSpan.offsetTop)*.25,10)
    // Work-around wierd Netscape NaN bug when Dif is 0
    if (isNaN(Dif)) Dif=0
    document.all.uiPathBoxSpan.style.pixelTop+=Dif;
}

function uiPathOnTop() {
    //window.setInterval("moveUIPathBox()",10);
}

// Following is used for 'floating' page elements and keeping them in view as page is scrolled
var floaters  = new Array(3);
floaters[0] = new Array();
floaters[1] = new Array();
floaters[2] = new Array();

/*
TODO: this should be removed, since ES6 does have a Array.prototype.find
and its incompatable with this implementation
 */
Array.prototype.find = function(value, start, partial) {
    start = start || 0;
    for (var i=start; i<this.length; i++)
        if (partial) {
            if (this[i].indexOf(value) > -1) return i;
        } else {
            if (this[i]==value) return i;
        }
    return -1;
}
/* TODO: This should be removed also! */
Array.prototype.has = function(value, partial) {
    return this.find(value,0, partial)!==-1;
}
function getElem(elem) {
    if (document.getElementById) {
        if (typeof elem == "string") {
            elem = document.getElementById(elem);
            if (elem===null) throw 'cannot get element: element does not exist';
        } else if (typeof elem != "object") {
            throw 'cannot get element: invalid datatype';
        }
    } else throw 'cannot get element: unsupported DOM';
    return elem;
}
function hasClass(elem, className) {
    return getElem(elem).className.split(' ').has(className, false);
}
function hasClassContaining(elem, className) {
    return getElem(elem).className.split(' ').has(className, true);
}
function getClassContaining(elem, className) {
    var el = getElem(elem);
    var clsNum = el.className.split(' ').find(className, 0, true);
    if (clsNum > -1) {
        return el.className.split(' ')[clsNum];
    } else {
        return "";
    }
}
function addFloaterById(floaterId,clsName){
    addFloater(document.getElementById(floaterId),clsName);
}


function addFloater(floater, clsName){
    var pos = elPosition(floater);
    if (clsName == "xfloater")  floaters[0][floaters[0].length] = {el:floater, x:pos.x, y:pos.y};
    if (clsName == "yfloater")  floaters[1][floaters[1].length] = {el:floater, x:pos.x, y:pos.y};
    if (clsName == "xyfloater") floaters[2][floaters[2].length] = {el:floater, x:pos.x, y:pos.y};
}
function elPosition(element){
    var x=0, y=0;
    while (element!=null){
        x += element.offsetLeft-element.scrollLeft;
        y += element.offsetTop-element.scrollTop;
        element = element.offsetParent;
    }
    return {x:x, y:y};
}
function repositionFloaters() {
    for (var j = 0; j < floaters.length; j++) {
        for (var i = 0; i < floaters[j].length; i++) {
            scrLeft = document.body.scrollLeft;
            scrTop  = document.body.scrollTop;
            floater = floaters[j][i];

            //window.status = floater.x + " , " + floater.y + "  :  " + floater.el.style.left + " , " + floater.el.style.top + "  :  " + scrLeft + " , " + scrTop;
            if ((j == 0 || j == 2)) {
                if (scrLeft > floater.x) {
                    floater.el.style.left = document.body.scrollLeft - floater.x;
                } else {
                    floater.el.style.left = "0px";
                }
            }
            if ((j == 1 || j == 2)) {
                if (scrTop > floater.y) {
                    floater.el.style.top  = document.body.scrollTop - floater.y;
                } else {
                    floater.el.style.top = "0px";
                }
            }
        }
    }
}
function addFloatersByTag(tagList){
    tags = tagList.split(",");
    for (var t = 0; t < tags.length; t++) {
        elements = document.getElementsByTagName(tags[t]);
        for (var i=0; i<elements.length; i++) {
            try {
                if (hasClassContaining(elements[i],"floater")) {
                    clsName = getClassContaining(elements[i],"floater");
                    addFloater(elements[i], clsName);
                }
            } catch (e) {
                alert("ERROR addFloatersByTag " + e.description);
                return;
            }
        }
    }
}

function popupContextSensitiveHelp( topicId, languageId, helpBase ) {
    if ( ! helpBase ) {
        helpBase = "help";
    }
    popupHelp( helpBase + "/" + languageId + "/" + topicId + ".html" );
    return false;
}

function getElementFromId(sID)
{
    if(document.getElementById)
        return document.getElementById(sID);
    else if(document.all)
        return document.all(sID);
    return null;
}

function loadData(sFileName)
{
    if(!getElementFromId("dataDiv"))
    {
        if(!insertDataDiv())
        {
            gsFileName=sFileName;
            return;
        }
    }
    var sHTML="";
    if(gbMac)
        sHTML+="<iframe name=\"__WebHelpCshStub\" src=\""+sFileName+"\"></iframe>";
    else
        sHTML+="<iframe name=\"__WebHelpCshStub\" style=\"visibility:hidden;width:0;height:0\" src=\""+sFileName+"\"></iframe>";

    var oDivCon=getElementFromId("dataDiv");
    if(oDivCon)
    {
        if(gbNav6)
        {
            if(oDivCon.getElementsByTagName&&oDivCon.getElementsByTagName("iFrame").length>0)
            {
                oDivCon.getElementsByTagName("iFrame")[0].src=sFileName;
            }
            else
                oDivCon.innerHTML=sHTML;
        }
        else
            oDivCon.innerHTML=sHTML;
    }
}

function insertDataDiv()
{
    var sHTML="";
    if(gbMac)
        sHTML+="<div id=dataDiv style=\"display:none;\"></div>";
    else
        sHTML+="<div id=dataDiv style=\"visibility:hidden\"></div>";

    document.body.insertAdjacentHTML("beforeEnd",sHTML);
    return true;
}

function disableAllButtons()
{
    if ( document && document.page_form && document.page_form.elements )
    {
        for ( var i=0; i<document.page_form.elements.length; i++ )
        {
            var element = document.page_form.elements[i];
            if ( element && element.type && (element.type == "button"
                    || element.type == "submit") )
            {
                element.disabled = true;
            }
        }
    }
}

/* --- iframe utils --- */
function closeIframePopup(iframeId){
    if (typeof(iframeId)=="string") theIframe = document.getElementById(iframeId);
    else theIframe = iframeId;
    if (theIframe != null){
        theIframe.style.visibility = "hidden";
        try{frames[theIframe.name].targetInput.focus()} catch(e){};
    }
    return false;
}

function frameSizeToContent(theIframe){
    theIframe.width = frames[theIframe.name].document.getElementById("positionDIV").offsetWidth;
    theIframe.height = frames[theIframe.name].document.getElementById("positionDIV").offsetHeight;
}

/* --- dom utils --- */
function getActualLeft(theNode){
    var actualLeft = 0;
    while (theNode.offsetParent){
        actualLeft += theNode.offsetLeft;
        theNode = theNode.offsetParent;
    }
    return actualLeft;
}

function getActualTop(theNode){
    var actualTop = 0;
    while (theNode.offsetParent){
        actualTop += theNode.offsetTop;
        theNode = theNode.offsetParent;
    }
    return actualTop;
}

function readDate(hiddenInputDate){
    if (hiddenInputDate == null || hiddenInputDate.length == 0) {
        return new Date(today.getFullYear(),today.getMonth(),today.getDate());
    }
    var year = hiddenInputDate.substring(0, 4);
    var month = hiddenInputDate.substring(4, 6);
    var day = hiddenInputDate.substring(6, 8);
    return new Date(year, month - 1, day);
}

function readDate(hiddenInputDate, format){
    if (hiddenInputDate == null || hiddenInputDate.length == 0) {
        return new Date(today.getFullYear(),today.getMonth(),today.getDate());
    }
    if ( !hiddenInputDate.isDate('yyyyMMdd mmhhss') &&
         !hiddenInputDate.isDate('yyyyMMdd') ) {
        return new DateFormatter(format).parse(hiddenInputDate);
    }
    var year = hiddenInputDate.substring(0, 4);
    var month = hiddenInputDate.substring(4, 6);
    var day = hiddenInputDate.substring(6, 8);
    return new Date(year, month - 1, day);
}

function getLocaleData() {
    return default_locale;
}

var dateFormatString = "MM/dd/yyyy";

function getDateFormatString() {
    return dateFormatString;
}

function toDateString(theDate, format) {
    if (theDate != null) {
        // Formatting the Date object as date string:
        if (format == null) {
            format = getDateFormatString();
        }
        if (format == null) {
            format = "MM/dd/yyyy";
        }
        var formatter = new DateFormatter(format);
        var localeData = getLocaleData();
        if (localeData != null) {
            formatter.setLocale(localeData);
        }
        var dateString = formatter.format(theDate);
        return(dateString);
    } else return "";
}

/* ---- popup functions --- */
function closePop(){
    if (!window.frameElement) window.frameElement= window.parent.document.getElementsByName(window.name)[0];
    window.parent.closeIframePopup(window.frameElement);
    return false;
}

var dragPoint = {"x":0,"y":0};
var orgPoint = {"x":0,"y":0};

function startDrag(event){
    if (!event) event = window.event;
    if (event && !event.target) event.target = event.srcElement;
    if (!window.frameElement) window.frameElement= window.parent.document.getElementsByName(window.name)[0];
    dragPoint.x = event.screenX;
    dragPoint.y = event.screenY;
    orgPoint.x = parseInt(window.frameElement.style.left,10);
    orgPoint.y = parseInt(window.frameElement.style.top,10);
    dragEle = event.target;
    parent.document.onmousemove = drag;
    parent.document.onmouseup = stopDrag;
    document.onmousemove = drag;
    document.onmouseup = stopDrag;
    return false;
}

function drag(event){
    if (!event) event = window.event;
    evt = event;
    if (evt == null) evt = parent.window.event;
    if (!window.frameElement) window.frameElement= window.parent.document.getElementsByName(window.name)[0];
    var x = orgPoint.x + evt.screenX - dragPoint.x ;
    var y = orgPoint.y + evt.screenY - dragPoint.y ;
    window.setTimeout('window.frameElement.style.left ="'+x+'px"; window.frameElement.style.top ="'+y+'px";');
    return false;
}

function stopDrag(event){
    parent.document.onmousemove = null;
    parent.document.onmouseup = null;
    document.onmousemove = null;
    document.onmouseup = null;
    return false;
}
/*--calendar window functions--*/

var intDateFormatter = new DateFormatter("yyyy-MM-dd");
var internalFormatter = new DateFormatter("yyyyMMdd 000000");
var targetInput = {"value":""};
var targetHidden = {"value":""};
var targetEndInput = {"value":""};
var targetEndHidden = {"value":""};
var autoClose = false;
var targetFieldName = "";
var targetEndFieldName = "";

var today = new Date();
var selectedDate = new Date(today.getFullYear(),today.getMonth(),today.getDate());
var calendarExistingDate = null;
var selectedDateDisplay = null;

function inlineCalendarOnChange() {
}

function doClose(shouldClose){
    if (shouldClose) closePop();
}

function setSelectedDate(millis){
    var newDate = new Date(millis);
    calendarExistingDate = new Date(millis);
    highliteNewDate(newDate);
    updateDateControls(selectedDate);
    displaySelectedDate();
    doClose(autoClose);
}

function highliteNewDate(newDate){
    var highlightDate = (
            calendarExistingDate.getMonth() == selectedDate.getMonth()
        &&  calendarExistingDate.getYear()  == selectedDate.getYear()
    );

    today = new Date();
    var currentDate = new Date(today.getFullYear(),today.getMonth(),today.getDate());
    var currentEle = document.getElementById("id"+internalFormatter.format(selectedDate));
    var locale = getLocaleData();
    if (selectionModeEle != null && selectionModeEle.value != null
            && selectionModeEle.value == "week") {
        if (currentEle != null) {
            var weekDay = new Date(selectedDate);
            var offset = locale.firstDayOfWeek - weekDay.getDay();
            if (weekDay.getDay() < locale.firstDayOfWeek) {
                offset = locale.firstDayOfWeek - weekDay.getDay() - 7;
            }
            weekDay.setDate(weekDay.getDate() + offset);
            for (var i = 0; i < 7; i++) {
                var weekDayEle = document.getElementById("id"+internalFormatter.format(weekDay));
                if (weekDayEle != null) {
                    if (weekDay.valueOf() != currentDate.valueOf()) {
                        if (weekDay.getMonth() == monthEle.value) {
                            weekDayEle.className = "calendarGrid";
                        } else {
                            weekDayEle.className = "calendarGrid calendarOut";
                        }
                    } else {
                        weekDayEle.className = "calendarToday";
                    }
                }
                weekDay.setDate(weekDay.getDate() + 1);
            }
        }
        if (newDate != null) {
            weekDay = new Date(newDate);
            if (weekDay.getDay() < locale.firstDayOfWeek) {
                offset = locale.firstDayOfWeek - weekDay.getDay() - 7;
            } else {
                offset = locale.firstDayOfWeek - weekDay.getDay();
            }
            weekDay.setDate(weekDay.getDate() + offset);
            newDate = new Date(weekDay);
            for (i = 0; i < 7; i++) {
                weekDayEle = document.getElementById("id"+internalFormatter.format(weekDay));
                if (weekDayEle != null && highlightDate) {
                    weekDayEle.className = (highlightDate)?"calendarGrid calendarDay":"calendarGrid";
                }
                weekDay.setDate(weekDay.getDate() + 1);
            }
        }
    } else {
        if (currentEle != null) {
            if (selectedDate.valueOf() != currentDate.valueOf()) {
                if (selectedDate.getMonth() == monthEle.value) {
                    currentEle.className = "calendarGrid";
                } else {
                    currentEle.className = "calendarGrid calendarOut";
                }
            } else {
                currentEle.className = "calendarToday";
            }
        }
        if (newDate != null) {
            var newEle = document.getElementById("id"+internalFormatter.format(newDate));
            if (newEle != null){
                newEle.className = (highlightDate)?"calendarGrid calendarDay":"calendarGrid";
            }
        }
    }
    calendarExistingDate = newDate;
    selectedDate = newDate;
}

function focusSelectedDay(){
    if(document.getElementById("id"+internalFormatter.format(selectedDate)))
    document.getElementById("id"+internalFormatter.format(selectedDate)).focus();
}

function displaySelectedDate(){
    var dateString = toDateString(selectedDate)
    selectedDateDisplay.innerHTML = dateString;
    var dateChanged = false;
    if (targetInput != null && targetInput.value != null
            && targetInput.value.length > 0) {
        if (targetInput.value != dateString) {
            dateChanged = true;
            targetInput.value = dateString;
        }
    } else if (targetInput != null) {
        if (targetInput.value != dateString) {
            dateChanged = true;
            targetInput.value = dateString;
        }
    } else if (targetHidden != null
            && targetHidden.value != internalFormatter.format(selectedDate)) {
        // inline calendar
        dateChanged = true;
    }

    if (dateChanged) {
        targetHidden.value = internalFormatter.format(selectedDate);
        if (targetHidden == targetInput) {
            targetHidden.value = toDateString(selectedDate);
        }

        if (parent != null && parent.document != null
                && parent.document.page_form != null
                && parent.document.page_form.elements != null) {
            var targetEle = parent.document.getElementsByName(targetFieldName)[0];
            if (targetFieldName != null
                    && targetEle != null) {
                // don't call onchange/onblur, we might get into an infinite loop
                // this event notification is required - if there is a problem, let's fix it
                if (targetEle.onchange) {
                    targetEle.onchange();
                }
                if (targetEle.onblur) {
                    targetEle.onblur();
                }
            } else if (targetInput == null) {
                inlineCalendarOnChange();
            }
        } else {
            inlineCalendarOnChange();
        }
    }
    if (selectionModeEle != null
            && selectionModeEle.value != null
            && selectionModeEle.value == "week") {
        var weekEndDate = new Date(selectedDate);
        weekEndDate.setDate(weekEndDate.getDate() + 6);
        dateString = toDateString(weekEndDate)
        if (targetEndInput != null) {
            targetEndInput.value = dateString;
        }
        if (targetEndHidden != null) {
            targetEndHidden.value = internalFormatter.format(weekEndDate);
        }
        // don't call onchange/onblur, we might get into an infinite loop
    }
}

function updateDateControls(updateDate, forcePopulateCalendar) {
    if(calendarExistingDate == null){
        calendarExistingDate = new Date(updateDate);
    }

    if (updateDate == null){
        today = new Date();
        updateDate = new Date(today.getFullYear(),today.getMonth(),today.getDate());
    }
    highliteNewDate(updateDate);
    var pageChange = pageReloaded;
    var yearValue = updateDate.getFullYear();
    if (yearValue != yearEle.value) {
        if (yearEle.options != null && yearEle.options != "undefined") {
            if (yearEle.type == "select-one" && yearEle.options.length > 0) {
                if(yearValue < yearEle.options[0].value
                        || yearValue > yearEle.options[yearEle.options.length - 1].value) {
                    var yearStarts = yearValue - Math.round((yearEle.options.length -1) / 2) + 1;
                    for (dex = 0; dex < yearEle.options.length; dex++) {
                        yearEle.options[dex].value = yearStarts + dex;
                        yearEle.options[dex].text = yearStarts + dex;
                    }
                }
            }
            for (dex = 0; dex < yearEle.options.length; dex++) {
                if (yearEle.options[dex].value==yearValue) {
                    yearEle.options[dex].selected = true;
                }
            }
        } else {
            yearEle.value = yearValue;
        }
        pageChange = true;
    }
    var monthValue = updateDate.getMonth();
    if(monthValue != monthEle.value || monthValue == 0){
        if (monthEle.options != null && monthEle.options != "undefined") {
            monthEle.options[monthValue].selected = true;
        } else {
            monthEle.value = monthValue;
        }
        pageChange = true;
    }
    if (pageChange || forcePopulateCalendar) {
        populateCalendar();
        pageReloaded = false;
    }
}

function modeChange() {
    today = new Date();
    var currentDate = new Date(today.getFullYear(),today.getMonth(),today.getDate());
    var currentEle = document.getElementById("id"+internalFormatter.format(selectedDate));
    var locale = getLocaleData();
    if (selectionModeEle != null && selectionModeEle.value != null
            && selectionModeEle.value == "day") {
        if (currentEle != null) {
            var weekDay = new Date(selectedDate);
            var offset = locale.firstDayOfWeek - weekDay.getDay();
            if (weekDay.getDay() < locale.firstDayOfWeek) {
                offset = locale.firstDayOfWeek - weekDay.getDay() - 7;
            }
            weekDay.setDate(weekDay.getDate() + offset);
            for (i = 0; i < 7; i++) {
                var weekDayEle = document.getElementById("id"+internalFormatter.format(weekDay));
                if (weekDayEle != null) {
                    if (weekDay.valueOf() != currentDate.valueOf()) {
                        if (weekDay.getMonth() == monthEle.value) {
                            weekDayEle.className = "calendarGrid";
                        } else {
                            weekDayEle.className = "calendarGrid calendarOut";
                        }
                    } else {
                        weekDayEle.className = "calendarToday";
                    }
                }
                weekDay.setDate(weekDay.getDate() + 1);
            }
        }
    }
    highliteNewDate(selectedDate);
}

function monthChange(offset){
    if (!calendarInitialized) return; // calendar not initialized yet
    var extantMonth = monthEle.value;
    if (!isNaN(offset)){
        monthEle.value = ((parseInt(monthEle.value,10)+offset)+12) % 12;
    }
    if (extantMonth != null && Math.abs(extantMonth - monthEle.value) > 1)
        yearChange(offset);
    else populateCalendar();
}

function yearChange(offset){
    if (!calendarInitialized) return; // calendar not initialized yet
    if (!isNaN(offset)){
        yearEle.value = parseInt(yearEle.value,10)+offset;
    }
    if (yearEle.value.isDate('yyyy')) {
        populateCalendar();
    } else {
        yearEle.value = selectedDate.getYear();
    }
}

function populateCalendar(){
    today = new Date();
    var currentDate = new Date(today.getFullYear(),today.getMonth(),today.getDate());
    var theDate = new Date(yearEle.value,monthEle.value,1);
    var locale = getLocaleData();
    if (locale.firstDayOfWeek < 0 || locale.firstDayOfWeek > 6) {
        locale.firstDayOfWeek = 0;
    }
    var dayCountIn = 1 - theDate.getDay() + locale.firstDayOfWeek;
    if (locale.firstDayOfWeek > 0 && dayCountIn > 1) {
        dayCountIn = dayCountIn - 7;
    }
    var calDate = new Date(theDate);
    calDate.setDate(dayCountIn)
    var maxRow = 6;
    var daysPerWeek = 7;
    var row = 0;
    var maxRowReached = false;
    var dex = 0;
    for (; (dex < grid.length); dex++){
        if (calDate.getMonth() == monthEle.value) {
            if (calDate.valueOf() == currentDate.valueOf()) {
                theClass = "calendarToday";
            } else {
                theClass = "calendarGrid";
            }
        } else {
            theClass = "calendarGrid calendarOut";
            if ((((calDate.getMonth() > 0) && ((calDate.getMonth()-1) == monthEle.value))
                    || ((calDate.getMonth() == 0) && (monthEle.value == 11))) && !maxRowReached) {
                maxRowReached = true;
                maxRow = row;
            }
        }
        var dateValue = internalFormatter.format(calDate);
        if ((dex > 0) && (dex%daysPerWeek) == 0) {
            if (row == maxRow) {
                break;
            }
            grid[dex].date = calDate.valueOf();
            grid[dex].innerHTML = "<a href='javascript:void(0)' id='id"
                    +dateValue+"' onclick='setSelectedDate("
                    +calDate.valueOf()+")' class='"+theClass
                    +"' >"+calDate.getDate()+"</a>";
            calDate.setDate(calDate.getDate()+1);
            row ++;
        } else {
            grid[dex].date = calDate.valueOf();
            grid[dex].innerHTML = "<a href='javascript:void(0)' id='id"
                    +dateValue+"' onclick='setSelectedDate("
                    +calDate.valueOf()+")' class='"+theClass
                    +"' >"+calDate.getDate()+"</a>";
            calDate.setDate(calDate.getDate()+1);
        }
    }
    if (dex < grid.length) {
        for (; (dex < grid.length); dex++){
            grid[dex].innerHTML = "&nbsp;";
        }
    }
    highliteNewDate(selectedDate);
}

var calendarInitialized = false;
var pageReloaded = false;
function initCalendar(){
    selectedDateDisplay = document.getElementById("selectedDateDIV");
    selectionModeEle = document.getElementById("selection_mode");
    monthEle = document.getElementById("month");
    yearEle = document.getElementById("year");
    gridTable= document.getElementById("calendarTable");
    grid = gridTable.getElementsByTagName("TD");

    pageReloaded = true;
    calendarInitialized = true;
}

/*--host page functions--*/
function addPopupIframe(theId,theSrc) {
    var aCalIframe = document.getElementById(theId);
    if (aCalIframe == null) {
        var newIframe = document.createElement("IFRAME");
        newIframe.setAttribute("id",theId);
        newIframe.setAttribute("name",theId);
        if (theSrc != null) {
            newIframe.setAttribute("src",theSrc);
        }
        newIframe.setAttribute("scrolling","no");
        newIframe.setAttribute("frameBorder","0");
        newIframe.setAttribute("width","480");
        newIframe.setAttribute("height","0");
        newIframe.setAttribute("class","popup");
        newIframe.setAttribute("className","popup");
        // -
        // removed the deactivate event due to inconsistence between IE and Mozilla browsers.
        // -
        //newIframe.setAttribute("ondeactivate",new Function("closePopupIframe('"+theId+"')"));
        document.body.appendChild(newIframe);
    }
}

function getClientSize(axe){
  if( typeof( window.innerWidth ) == 'number' ){
    //Non-IE
    return (axe == 'X')?window.innerWidth:window.innerHeight;
  } else if( document.documentElement &&
      		( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
    //IE 6+ in 'standards compliant mode'
    return (axe == 'X')?document.documentElement.clientWidth:document.documentElement.clientHeight;
  } else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {
    //IE 4 compatible
    return (axe == 'X')?document.body.clientWidth : document.body.clientHeight;
  }
}

function getScrollXY(axe) {
  if (axe == 'X'){
  	return (window.pageXOffset)?(window.pageXOffset):
		(document.documentElement && document.documentElement.scrollLeft)?document.documentElement.scrollLeft:
			document.body.scrollLeft;
  }else if (axe == 'Y'){
  	return (window.pageYOffset)?(window.pageYOffset):
		(document.documentElement && document.documentElement.scrollTop)?document.documentElement.scrollTop:
			document.body.scrollTop;
  }
}

function showCalendar(id, callingButton, targetField, targetHidden, dateFormat,
        autoClosePopup, targetEndHidden, targetEndField) {
    var calIframe = document.getElementById(id);
    if (calIframe != null) {
        frames[calIframe.name].targetFieldName = targetField;
        frames[calIframe.name].targetInput = document.getElementsByName(targetField)[0];
        frames[calIframe.name].targetHidden = document.getElementsByName(targetHidden)[0];
        frames[calIframe.name].targetEndHidden = document.getElementsByName(targetEndHidden)[0];
        if (targetEndField != null) {
            frames[calIframe.name].targetEndFieldName = targetEndField;
            frames[calIframe.name].targetEndInput = document.getElementsByName(targetEndField)[0];
        }
        frames[calIframe.name].dateFormatString = dateFormat;
        frames[calIframe.name].autoClose = autoClosePopup;
        frames[calIframe.name].updateDateControls(
                readDate(frames[calIframe.name].targetHidden.value, dateFormat));
        frames[calIframe.name].frameSizeToContent();

        calIframe.style.top = (getActualTop(callingButton))+"px";
        calIframe.style.left = (getActualLeft(callingButton))+"px";
        // shift if frame outside browser in ETM
        var dist = 0;

		// The width from the left of the scrollable data to the right of the window.
        var scrollAndViewWidth = getScrollXY('X')+getClientSize('X');

        dist = getActualLeft(callingButton)+parseInt(calIframe.width);
        if(dist > scrollAndViewWidth){

        	if((scrollAndViewWidth - parseInt(calIframe.width)) >= 0){

        	    // Simply move the calendar slightly to the left so that it becomes in view.
	            // Only do this if moving it to the left does not exceed the left of the window (ie.
	            // positive value in the IF condition), otherwise, the calendar would be truncated.
                calIframe.style.left = (scrollAndViewWidth - calIframe.width)+"px";
            }
        }

        dist = getActualTop(callingButton)+parseInt(calIframe.height);

		// The height from the top of the scrollable data to the bottom of the window.
        var scrollAndViewHeight = getScrollXY('Y')+getClientSize('Y');

        // Reset the top of the calendar if parts of the calendar is out of view from the window.
        if(dist > scrollAndViewHeight){

        	if((scrollAndViewHeight - parseInt(calIframe.height)) >= 0){

        	    // Simply move the calendar slightly higher so that it becomes in view.
	            // Only do this if moving it higher does not exceeds the top of the window (ie.
	            // positive value in the IF condition), otherwise, the calendar would be truncated.
	            calIframe.style.top  = (scrollAndViewHeight - calIframe.height) + "px";
            }
        }
        calIframe.style.zIndex = "1000";

        calIframe.style.visibility = "visible";
        frames[calIframe.name].focusSelectedDay();
    }
    return false;
}

function showPopupMenu(iframeId, callingButton, theSrc) {
    menuIframe = document.getElementById(iframeId);
    if (menuIframe != null) {
        menuIframe.contentWindow.targetInput = null;
        menuIframe.setAttribute("src", theSrc);
        menuIframe.style.top = (getActualTop(callingButton))+"px";
        menuIframe.style.left = (getActualLeft(callingButton))+"px";
        menuIframe.style.zIndex = "1000";
        menuIframe.style.visibility = "visible";
        menuIframe.contentWindow.focus();
    }
    return false;
}

function closePopupIframe(id){
    calIframe = document.getElementById(id);
    if (calIframe != null) {
        calIframe.style.visibility = "hidden";
        if (frames[calIframe.name].targetInput != null) {
            try {
                frames[calIframe.name].targetInput.focus();
            } catch(e) {}
        }
    }
    return false;
}

/* --- collapsible control functions --- */
function getParentByTagName(theNode,byTagName,orTagName1,orTagName2){
    var theParent = theNode.parentNode;
    if (theParent != null) {
        if ((theParent.tagName != byTagName)
                && (theParent.tagName != orTagName1)
                && (theParent.tagName != orTagName2)) {
            theParent=getParentByTagName(theParent,byTagName,
                    orTagName1,orTagName2);
        }
    }
    return theParent;
}

function addCollapseLink(id, isMaster) {
    if (id != null) {
        collapseEle = document.getElementById(id);
        if (collapseEle != null) {
            if (isMaster) {
                tdElements = collapseEle.getElementsByTagName("TH");
            } else {
                tdElements = collapseEle.getElementsByTagName("TD");
            }
            if (tdElements != null) {
                firstTD = tdElements[0];
                if (firstTD != null) {
                    childNodes = firstTD.childNodes;
                    var firstTextNode = null;
                    if (childNodes != null) {
                        for (var i=0; i<childNodes.length; i++) {
                            if (childNodes[i].nodeType == 3) {
                                firstTextNode=childNodes[i];
                                break;
                            }
                        }
                    }
                    if (firstTextNode != null) {
                        var newToggleNode = document.createElement("a");
                        newToggleNode.setAttribute('href', 'javascript:void(0)');
                        if (isMaster) {
                            newToggleNode.setAttribute('class', 'collapse all');
                            newToggleNode.setAttribute('onclick',
                                    'toggleCollapseMaster(this);return false;');
                            newToggleNode.appendChild(firstTextNode.cloneNode(true));
                            firstTD.replaceChild(newToggleNode,firstTextNode);
                            firstTD.innerHTML = firstTD.innerHTML;
                        } else {
                            newToggleNode.setAttribute('class', 'collapse');
                            newToggleNode.setAttribute('onclick', 'toggleCollapse(this);return false;');
                            newToggleNode.appendChild(firstTextNode.cloneNode(true));
                            firstTD.replaceChild(newToggleNode,firstTextNode);
                            firstTD.innerHTML = firstTD.innerHTML;
                            trElements = collapseEle.childNodes;
                            if (trElements != null && trElements.length > 0) {
                                var firstEncountered = false;
                                for (var i=0; i<trElements.length; i++) {
                                    if (trElements[i].tagName == 'TR') {
                                        if (!firstEncountered) {
                                            // skip the first row
                                            firstEncountered = true;
                                        } else if (trElements[i].className != null) {
                                            trElements[i].className = trElements[i].className+" collapse";
                                        } else {
                                            trElements[i].className = "collapse";
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        // no text node
                        var newToggleNode = document.createElement("a");
                        newToggleNode.setAttribute('href', 'javascript:void(0)');
                        if (isMaster) {
                            newToggleNode.setAttribute('class', 'collapse all');
                            newToggleNode.setAttribute('onclick',
                                    'toggleCollapseMaster(this);return false;');
                            firstTD.appendChild(newToggleNode);
                            firstTD.innerHTML = firstTD.innerHTML;
                        } else {
                            newToggleNode.setAttribute('class', 'collapse');
                            newToggleNode.setAttribute('onclick', 'toggleCollapse(this);return false;');
                            firstTD.appendChild(newToggleNode);
                            firstTD.innerHTML = firstTD.innerHTML;
                            trElements = collapseEle.childNodes;
                            if (trElements != null && trElements.length > 0) {
                                var firstEncountered = false;
                                for (var i=0; i<trElements.length; i++) {
                                    if (trElements[i].tagName == 'TR') {
                                        if (!firstEncountered) {
                                            // skip the first row
                                            firstEncountered = true;
                                        } else if (trElements[i].className != null) {
                                            trElements[i].className = trElements[i].className+" collapse";
                                        } else {
                                            trElements[i].className = "collapse";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function addClassName(theNode,theClassName,doAdd){
    if (theNode != null){
        existingClassName = theNode.className;
        theNode.className = addWord(existingClassName, theClassName, doAdd);
    }
    // return whether or not this function changed the inital class name
    return ( (theNode != null) && (existingClassName != theNode.className) );
}

function addWord(thePhrase,theWord,doAdd){
    matchWordRegExpr = new RegExp("\\s?\\b"+theWord+"\\b");
    if (thePhrase == null) thePhrase="";
    if (doAdd != false){//add word
        if (!matchWordRegExpr.test(thePhrase)){
            addSpace = (thePhrase > "")? " ":"";
            thePhrase += addSpace+theWord;
        }
    } else {//remove word
        thePhrase = thePhrase.replace(matchWordRegExpr,"");
    }
    return thePhrase;
}

function toggleCollapse(callingNode){
    theTBody = getParentByTagName(callingNode,"TBODY","THEAD","TFOOT");
    isOn = (theTBody.className.indexOf(" on")>-1);
    addClassName(theTBody,"on",!isOn);
    var inputNodes = theTBody.getElementsByTagName("INPUT");
    if (inputNodes != null) {
        for (var dex=0; dex<inputNodes.length; dex++) {
            if (inputNodes[dex].getAttribute("name") == theTBody.id) {
                if (isOn) {
                    inputNodes[dex].setAttribute("value", "off")
                } else {
                    inputNodes[dex].setAttribute("value", "on")
                }
                break;
            }
        }
    }
    //try{theTBody.scrollIntoView()} catch(e){};
}

function toggleCollapseMaster(theCallingNode){
    theTHead = getParentByTagName(theCallingNode,"THEAD","TFOOT");
    if (theTHead != null) {
        isOn = (theTHead.className.indexOf(" on")>-1);
        addClassName(theTHead,"on",!isOn);
        theTBodys = getParentByTagName(theCallingNode,"TABLE").tBodies;
        for (tbDex = 0; tbDex < theTBodys.length; tbDex++){
            addClassName(theTBodys[tbDex],"on",!isOn);
        }
    }
    return false;
}

/*--TabGroupTag and TabTag tab selection function--*/
function selectTabTag(name, position, index) {
    var tabCount = getElement(name + '_TAB_COUNT').value;
    var tabObj;
    var tabClassNameEnd;
    for (i = 1; i <= tabCount; i++) {
        tabObj = document.getElementById(name + '_span_' + i);
        if (tabObj && tabObj.className) {
            if (i != index) {
                tabObj.className = 'tabset';
            } else {
                tabObj.className = 'tabset ' + position + 'slct';
            }
        }
    }
}

function getFunctionName( f )
{
    var s = f.toString().match(/function (\w*)/)[1];
    if ( (s == null) || (s.length==0) )
        return "(anonymous)";
    return s;
}

function getStackTrace()
{
    try
    {
        var stackTrace = new Array();
        for ( var a = arguments.caller; a !=null; a = a.caller )
        {
            stackTrace.push( getFunctionName(a.callee) + "()\n" );
            if ( a.caller == a )
            {
                s.push( "*" );
                break;
            }
        }
        alert( stackTrace.join('') );
    }
    catch ( e )
    {
        alert( "Could not get stack trace: " + e.message );
    }
}

/* This method adds key to the given cacheKeys array and value to the given cacheValues array.
 */
function addToCache(cacheKeys, cacheValues, key, value) {
    cacheKeys.push(key);
    cacheValues.push(value);
}

/* This method looks for index X of key in the cacheKeys array, if found the method
 * returns the value at index X in the cacheValues array otherwise the method returns null.
 */
function getFromCache(cacheKeys, cacheValues, key) {
    var value = null;
    for (var i = 0; i < cacheKeys.length; i++) {
        if (key == cacheKeys[i]) {
            value = cacheValues[i];
            break;
        }
    }
    return value;
}

/* Return the ancestor node with the given nodeName of the elem node or null if it cannot be found. */
function getParentByNodeName(elem, nodeName) {
	var result = null;
	for (var parent = elem.parentNode; parent; parent = parent.parentNode) {
		if (parent.nodeName == nodeName) {
			result = parent;
			break;
		}
	}
	return result;
}

// -----------------------------------------------------------------------------------
	// Note:This method does not support multiple select
	function doCopyField(destWin,srcWin,destName,srcName,create) {
		theForm = destWin.document.forms[0];
		srcObj = srcWin.document.forms[0].elements[srcName];
		destObj = theForm.elements[destName];
		if (srcObj != null) {
		    if (destObj==null && create) {
				createField(destWin.document,theForm,destName,true,'input','');
		    }
			if (destObj != null) {
				srcValue = srcObj.value;
	            if(srcObj.type!=null && srcObj.type=='checkbox') {
	            	if (srcObj.checked) {
	            		srcValue = 'Y';
	            	} else {
	            		srcValue = '';
	            	}
	            }

	            if (destObj.type!=null && destObj.type=='checkbox') {
                	if (srcValue == 'Y') {
                		destObj.checked = 1;
                	} else {
                		destObj.checked = 0;
	            	}
	            } else {
					destObj.value = srcValue;
				}
			}
		}
	}

	// Create a field on the targetDoc as child of the parent element
	function createField(targetDoc, parent, name, isHidden, tagName, val) {
		destObj = targetDoc.createElement(tagName);
		if (isHidden) {
			destObj.type = 'hidden';
		}
		destObj.name = name;
		destObj.id = name;
		destObj.value = val;
		parent.appendChild(destObj);
	}

// -----------------------------------------------------------------------------------
var submitButtons = new Array();
var childrenWindows = new Array();
var rootOpener = null;

// Set the disable property of all registered buttons
// For this to work, all registered buttons must have a name
// Rebuild the button array if invalid reference to buttons are found
function setSubmitStatus(enable) {
	registerRootOpener();
	for (var i = 0; i < rootOpener.submitButtons.length; i++) {
		try {
			if (rootOpener.submitButtons[i] != null) {
				rootOpener.submitButtons[i].disabled = !enable;
			}
		} catch (e) {
			rootOpener.submitButtons[i] = null;
		}
	}
}

// Register the submit buttons in the opener window
function registerSubmit(button) {
	registerRootOpener();
	rootOpener.submitButtons.push(button);
}

// Register the Popup in the opener window
function registerSelf(win) {
	registerRootOpener();
	rootOpener.childrenWindows.push(win);
}

// Go to the opener and get the root opener.  If the opener
// does not contain a rootopener id or the opener is null,
// set rootOpener to be the contentFrame or the top frame if
// contentFrame does not exist
function registerRootOpener() {
	if (rootOpener == null) {
		myOpener = foundOpener(self);
		if (myOpener != null) {
			try {
				if (myOpener.rootOpener != null) {
					rootOpener = myOpener.rootOpener;
				} else {
					rootOpener = getContentFrame();
				}
			} catch (e) {
				rootOpener = getContentFrame();
			}
		} else {
			rootOpener = getContentFrame();
		}
	}
}

// Find the closest parent who have an opener
// This is for the proper functioning of the logic on IE
function foundOpener(win) {
	if (win.opener != null) {
		return win.opener;
	} else if (win == getWfmTopWindow()) {
	    return null;
	} else {
		return foundOpener(win.parent);
	}
}

// Return a reference to the contentFrame or
// the top frame if contentFrame not found
function getContentFrame() {
	var objWin = null;
	try {
		objWin =getWfmTopWindow().frames['contentFrame'];
		// contentFrame not found
		if (objWin == null) {
			objWin = getWfmTopWindow();
		}
	} catch (e) {
		objWin = getWfmTopWindow();
	}
	return objWin;

}

// Check if a popup is still open
function haveOpenPopup() {
	registerRootOpener();
	for (var i=rootOpener.childrenWindows.length-1; i>=0; i--) {
		if (!rootOpener.childrenWindows[i].closed) {
			return rootOpener.childrenWindows[i];
		}
	}
	return null;
}

function popupHelp(helpLink) {
    winWidth = 750;
    winHeight = 550;
    if (window.screen) {
        posX 	= (screen.availWidth - (winWidth/2))/4;
        posY 	= (screen.availHeight - (winHeight/2))/4;
    } else {
        posX	= 220;
        posY	= 200;
    }
    newWindowOptions = "width=" + winWidth + ",height=" + winHeight + ",innerWidth=" + winWidth + ",innerHeight=" + winHeight + ",resizable=1,screenX="+posX+",screenY="+posY+",left="+posX+",top="+posY;
	var url = location.href.substring(0, location.href.indexOf('/', 8));
	if ('/' == helpLink.substring(0,1) || '\\' == helpLink.substring(0,1)) {
       url = url + helpLink;
	} else {
       url = url + contextPath + '/' + helpLink;
	}
	window.open(url, "Help", newWindowOptions).focus();
}




function fetchMatching(list, target){
    if(!target) {
        return target;
    }
	var test = target.toLowerCase();
	for(var i=0; i< list.length; i++){
		if(test == list[i].toLowerCase()){
			return list[i];
		}
	}
	return undefined;
}

function isAM(indicator){
	return (fetchMatching(getAMIndicators(),indicator))? true:false;
}
function isPM(indicator){
	return (fetchMatching(getPMIndicators(),indicator))? true:false;
}


function displayableAMPMIndicator(indicator){
	if(isAM(indicator))
		return getAMString()
	else if(isPM(indicator))
		return getPMString()
	return (indicator == '')? '':undefined;
}




function invalidateField(field, message) {
	wbAlert(message);
    field.wbValid = false;
    //prevent blur-focus-alert looping
    var temp = field.value;
    field.value = '';
    setTimeout(function () {
        field.value = temp;
    }, 0);
	return false;
}

function isEmptyField(field) {
	return !field || !field.value || field.value.isEmpty();
}

function removeWhiteSpace(field) {
	if(field) {
		setFieldValue(field,StringReplace(field.value,' ',''));
	}
}

// Toggles the style.display of the specified element between '' and 'none'.
// doc = document, elem = id of element on given document.
// show = optional (if specified then the display will show if show is true and
//        will hide the display if show is set to false).
function toggleDisplay(doc, elemId, show) {
    if (elemId != null && elemId != "undefined") {
        var elem = doc.getElementById(elemId);
        if (elem != null && elem.style != null && elem.style.display != null) {
            if (show != null && show != "undefined") {
                if (show) {
                    elem.style.display = '';
                } else {
                    elem.style.display = 'none';
                }
            } else {
                if ('' == elem.style.display) {
                    elem.style.display = 'none';
                } else {
                    elem.style.display = '';
                }
            }
        }
    }
}

/**
 * Toggle an element in the given document with the given elemName name
 * to be disabled or enabled based on the boolean 'disabled' value.
 * Disabling involves setting the elem.disabled property and
 * adding the 'disabled' CSS class to the element.
 *
 * doc - Document that must not be null.
 * elemName - Name of an element, does nothing if elemName is null, or if an element with this name is not found.
 * disabled - set to true to disable the element, set to false to enable the element.
 */
function toggleEditable(doc, elemName, disabled) {
    if (elemName != null && elemName != "undefined") {
        var elem = doc.forms[0].elements[elemName];
        if (elem != null) {
            elem.disabled = disabled;
            if (disabled) {
                addCSSClass(elem, "disabled");
            } else {
                removeCSSClass(elem, "disabled");
            }
        }
    }
}

/**
 * Method for toggling the disabled state of any core UI (e.g. DBLookupUI)
 * with the given 'elemName' name in the given 'doc' document.
 */
function toggleEditableOnFieldUI(doc, elemName, disabled) {
    toggleEditable(doc, elemName, disabled);
    toggleEditable(doc, elemName + "_label", disabled);
    toggleEditable(doc, elemName + "_dummy", disabled);
    toggleEditable(doc, elemName + "_date", disabled);
    toggleEditable(doc, elemName + "_time", disabled);
    toggleEditable(doc, elemName + "_button", disabled);
}

/**
 * Add the given CSS class to the given 'elem' element, if elem is not null.
 */
function addCSSClass(elem, inputClassName) {
    if (elem != null) {
        elem.className = elem.className + " " + inputClassName;
    }
}

/**
 * Remove the given CSS class from the given 'elem' element, if elem is not null.
 */
function removeCSSClass(elem, inputClassName) {
    if (elem != null) {
        var oldClasses = elem.className.split(" ");
        var newClasses  = new Array(oldClasses.length);
        for (i = 0; i < oldClasses.length; i++) {
            if (oldClasses[i] != inputClassName) {
                newClasses[i] = oldClasses[i];
            }
        }
        elem.className = newClasses.join(" ");
    }
}

/**
 * Remove any occurrence elem.style.display = "none" in all ancestors of the given
 * element by replacing these occurrences with elem.style.display = "".
 */
function unhideAllParents(elem) {
    if (elem != null) {
        for (var parent = elem; parent; parent = parent.parentNode) {
            if (parent.style != null && parent.style.display != null && parent.style.display == "none") {
                parent.style.display = "";
            }
        }
    }
}

/**
 * Adds an error box to the page with the given error in a bulleted list.
 * If the error box was already on the page then the error is appended
 * to the existing bulleted list.
 *
 * The error box is added in a new row beneath the row identified by
 * errorSourceRowId (the 'source row').
 * The colspan is the number of columns used in the new row.
 * The class in the first cell of the source row above is added to the class of the new cell
 * (to support proper padding).
 */
function addFieldError(errorSourceRowId, error, colspan) {
    var errorSourceRow = document.getElementById(errorSourceRowId);
    if (errorSourceRow != null) {
        var tableContainingErrorSource = getParentByNodeName(errorSourceRow, "TABLE");
        if (tableContainingErrorSource != null) {

            // Test to see if the error box is already present.
            var errorFieldIsPresent = false;
            var errorFieldRow = null;
            if (tableContainingErrorSource.rows.length > errorSourceRow.rowIndex + 1) {
                var possibleErrorField = tableContainingErrorSource.rows.item(errorSourceRow.rowIndex + 1);
                if (possibleErrorField.id == errorSourceRowId + "_ERROR_FIELD") {
                    errorFieldIsPresent = true;
                    errorFieldRow = possibleErrorField;
                }
            }

            // Error box is not present, so add it with the first error message.
            if (errorFieldRow == null) {
                var newRow = tableContainingErrorSource.insertRow(errorSourceRow.rowIndex+1);

                var sourceClasses = errorSourceRow.className.split(' ');

                // Make the source row tight against the error row.
                if (sourceClasses.has("lastTightRow", false)) {
                    removeCSSClass(errorSourceRow, "lastTightRow");
                    addCSSClass(errorSourceRow, "tightRow");
                } else if (!sourceClasses.has("tightRow", false)) {
                    addCSSClass(errorSourceRow, "firstTightRow");
                }

                newRow.className = "lastTightRow";
                newRow.id = errorSourceRowId + "_ERROR_FIELD";
                var newCell = newRow.insertCell(0);
                newCell.colSpan = colspan;

                // Make sure the new cell is visible on screen.
                unhideAllParents(newCell);

                // Give the new cell the same class as first cell in the source row.
                if (errorSourceRow.cells.length > 0) {
                    var firstCell = errorSourceRow.cells.item(0);
                    if (firstCell != null) {
                        addCSSClass(newCell, firstCell.className);
                    }
                }

                // Add the error to the page.
                newCell.innerHTML =
                       "<div class='errorField'>" +
                           "<ul id='" + errorSourceRowId + "_ERROR_FIELD_UL'><li>" +
                               error +
                           "</li></ul>" +
                       "</div>";


            // Error box is present, append the error message to the existing bulleted list.
            } else {
                var existingErrorList = document.getElementById(errorSourceRowId + "_ERROR_FIELD_UL");
                var newBullet = document.createElement('li');
                newBullet = existingErrorList.appendChild(newBullet);
                newBullet.innerHTML = error;
            }
        }
    }
}

/**
 * Generic function to append to attribute value.
 * By default, it appends value to attribute.
 * If attribute doesn't exist it gets created.
 *
 **/
function addToElementAttribute(element, attribute, value, prepend) {
	if (!element || !value) return;
	if (!element.getAttribute(attribute)) {
		element.setAttribute(attribute, value);
		return;
	}
	if (prepend) {
		element.setAttribute(attribute, value + element.getAttribute(attribute));
	} else {
		element.setAttribute(attribute, element.getAttribute(attribute) + value);
	}
}

/*** Checks if element attribute 'value' is empty
 *
 **/
function isEmptyElementValue(element) {
	if (!element || !element.value) return true;
	return isEmpty(element.value);
}

function getJQuerySearchableIdentifier(id) {
	id = id.replace(/(\[|\]|\.|\:)/g, '\\$1');
	return id;
}

function dblookup_layer ( fieldHidden,
						  fieldVisible,
						  key,
						  label,
						  fields,
						  nullable,
						  multiple,
						  pageSize,
						  timeoutPeriod,
						  dataSourceType,
						  dataSourceSpec,
						  dataSourceParams,
						  where,
						  pageType,
						  filtersDuplicatesBySQL,
                          customAddWhere,
                          customAddWhereParams,
                          customAddWhereValues) {

	var theForm = null;
	var formsLength = document.forms.length;
	for(var formIdx = 0; formIdx < formsLength; formIdx++){
		currForm = document.forms[formIdx];
		if(currForm.elements[fieldVisible]){
			theForm = currForm;
			break;
		}
	}
	if(theForm == null) {
	   wbAlert(getLocalizedMessage_NO_FORM());
	   return;
	}

	// If the lookup is currently resolving, wait until complete.
	if (theForm.elements[fieldVisible].getAttribute('isResolving') == true ||
		theForm.elements[fieldVisible].isResolving == true) {
//		return;
	}

	var fldHid = theForm.elements[fieldHidden];
	var initialBlank = fldHid.getAttribute('initialBlank') ? fldHid.getAttribute('initialBlank') : '';
	var addwhere = fldHid.getAttribute('addwhere') ? fldHid.getAttribute('addwhere') : '';
	var masterslaveaddwhere = fldHid.getAttribute('masterslaveaddwhere') ? fldHid.getAttribute('masterslaveaddwhere') : '';

	var initParams = {
						fieldHidden : fieldHidden,
						fieldVisible : fieldVisible,
						key : escape(key),
						label : escape(label),
						fields : escape(fields),
						nullable : nullable,
						multiple : multiple,
						pageType : pageType,
						pageSize : pageSize,
						timeoutPeriod : timeoutPeriod,
						initialBlank : initialBlank,
						dataSourceType : dataSourceType,
						dataSourceSpec : escape(dataSourceSpec),
						dataSourceParams : escape(dataSourceParams),
						where : escape(where),
						addWhere : escape(addwhere),
						masterSlaveAddWhere : escape(masterslaveaddwhere),
						filtersDuplicatesBySQL : filtersDuplicatesBySQL,
                        customAddWhere: escape(customAddWhere),
                        customAddWhereParams: escape(customAddWhereParams),
                        customAddWhereValues: customAddWhereValues,
						initialize : true
					};

	var divLayer = $('#' + getJQuerySearchableIdentifier(fieldHidden) + '_layer');
	divLayer.wb_dblookup('init', initParams);

}

function resolveLabels_layer ( fieldHidden,
						  fieldVisible,
						  key,
						  label,
						  fields,
						  nullable,
						  multiple,
						  pageSize,
						  timeoutPeriod,
						  dataSourceType,
						  dataSourceSpec,
						  dataSourceParams,
						  where,
						  pageType,
						  filtersDuplicatesBySQL,
						  selectedLabels,
                          customAddWhere,
                          customAddWhereParams,
                          customAddWhereValues) {
	var theForm = null;
	var formsLength = document.forms.length;
	for(var formIdx = 0; formIdx < formsLength; formIdx++){
		currForm = document.forms[formIdx];
		if(currForm.elements[fieldVisible]){
			theForm = currForm;
			break;
		}
	}
	if(theForm == null) {
	   wbAlert(getLocalizedMessage_NO_FORM());
	   return;
	}

	// If the lookup is currently resolving, wait until complete.
	if (theForm.elements[fieldVisible].getAttribute('isResolving') == true ||
		theForm.elements[fieldVisible].isResolving == true) {
//		return;
	}

	var fldHid = theForm.elements[fieldHidden];
	var initialBlank = fldHid.getAttribute('initialBlank') ? fldHid.getAttribute('initialBlank') : '';
    var addwhere = fldHid.getAttribute('addwhere') ? fldHid.getAttribute('addwhere') : '';
	var masterslaveaddwhere = fldHid.getAttribute('masterslaveaddwhere') ? fldHid.getAttribute('masterslaveaddwhere') : '';

	var initParams = {
						fieldHidden : fieldHidden,
						fieldVisible : fieldVisible,
						key : escape(key),
						label : escape(label),
						fields : escape(fields),
						nullable : nullable,
						multiple : multiple,
						pageType : pageType,
						pageSize : pageSize,
						timeoutPeriod : timeoutPeriod,
						initialBlank : initialBlank,
						dataSourceType : dataSourceType,
						dataSourceSpec : escape(dataSourceSpec),
						dataSourceParams : escape(dataSourceParams),
						where : escape(where),
						addWhere : escape(addwhere),
						masterSlaveAddWhere : escape(masterslaveaddwhere),
                        customAddWhere: escape(customAddWhere),
                        customAddWhereParams: escape(customAddWhereParams),
                        customAddWhereValues: customAddWhereValues,
						filtersDuplicatesBySQL : filtersDuplicatesBySQL,
						initialize : true,
						selectedLabels : escape(selectedLabels)
					};

	var divLayer = $('#' + getJQuerySearchableIdentifier(fieldHidden) + '_layer');
	divLayer.wb_dblookup('resolve', initParams);

}

function setDBLookupFields(valueList, keyField, labelField, editMode){
	var selected = "";
	var idList = "";
	var labelList = "";
	var itemCount = 0;
	if(valueList){
		itemCount = valueList.length;
		for( var i = 0; i < itemCount; i++){
			var key = valueList[i].key;
			var label = valueList[i].label;

			selected+= '~key~'+key + '~value~'+label+'~div~';
			if(i){
				idList+=",";
				labelList+=",";
			}
			idList+= key
			labelList+= label;
		}
	}
	if(editMode && keyField){
		keyField.value = idList;
		keyField.setAttribute('rsl', escape(selected));  //consistent with WB1 dblookup created by server
		keyField.setAttribute('itc', itemCount);

	}
	if(labelField) {
		if(editMode){
			labelField.value = labelList;
		}
		else {
			labelField.innerHTML = labelList
		}
	}
}

function truncateOrPad(value, decimalPlaces ) {
    var temp = new String(value);
    var decimalPos = temp.indexOf(".");
    var padCount;
    if(decimalPos === -1) {
        temp+='.';
        padCount = decimalPlaces;
    }
    else {
        padCount = decimalPlaces - (temp.length - (decimalPos+1));
    }
    if(padCount < 0){
        temp = temp.substring(0, decimalPos + decimalPlaces+1);
    }
    else {
        for(var i = 0; i < padCount; i++){
            temp+='0';
        }
    }
    return temp;
}


function DurationFormat(decimalFormat, decimalPlaces, decimalTruncate){
    var separator = decimalFormat ? '.' : ':';
    if(decimalFormat) {
        if((decimalPlaces === null) || (typeof(decimalPlaces)  === 'undefined')){
            decimalPlaces = 2;
        }
    }

    function validate(duration){
        var foundSeparator = false;
        for(var i = 0, j = duration.length; i < j; i++){
            var char =duration.charAt(i);
            if(!isDigit(char)) {
                if(!foundSeparator && (char === '.' || char === ':')){
                    if(char === separator){
                        foundSeparator = true;
                        continue;
                    }
                    return getLocalizedMessage_INVALID_SEPARATOR();
                }
                return foundSeparator ? getLocalizedMessage_INVALID_MINUTES() : getLocalizedMessage_INVALID_HOURS();
            }
        }
        return null;
   }

    function parse (duration){
        var result =  {minutes : 0, error: null};
        if(duration == '') return result;
        result.error = validate(duration);

        if(!result.error){
            if(decimalFormat){
                var temp = parseFloat(duration).toFixed(decimalPlaces);
                result.minutes = Math.round(parseFloat(temp) * 60);
            }
            else {
                var separatorPos = duration.indexOf(separator);
                if(separatorPos === -1) {
                    result.minutes =  parseInt(duration) * 60;
                }
                else if (separatorPos > 0){
                    result.minutes = parseInt(duration.substring(0, separatorPos)) * 60;
                    if(duration.length > separatorPos+1){
                        result.minutes+= parseInt(duration.substring(separatorPos+1));
                    }
                }
            }

        }
        return result;
    }

    function formatDecimal (duration) {
        var temp = parseFloat(duration/60);
        if(decimalTruncate){
            return truncateOrPad(temp, decimalPlaces) ;
        }
        return temp.toFixed(decimalPlaces);
    }
    function formatNonDecimal (duration) {
        var minutes = duration % 60;
        var hours =  (duration - minutes)/ 60;
        return hours + ( minutes < 10 ?  ':0' : ':') + minutes;
    }


    function format (duration){
        if(!duration ){  //null/undefined/zero
            if(duration !== 0){
                return  '';
            }
        }
        return decimalFormat ? formatDecimal(duration) : formatNonDecimal(duration);
    }

    function validChar(char){
        if ((char < '0') || (char > '9')) {
            if( (char != separator)  && (char != 8) && (char != 9)) {
                return false;
            }
        }
        return true;
    }

    return {
        format : function(durationMinutes){
            return format(durationMinutes);
        },
        parse : function(durationString){
            return parse(durationString);
        },
        validChar : function(char){
            return validChar(char);
        }
    };

}




function DurationField(ui){
    var $ui = $(ui);
    var api = $ui.data("wbDurationField");
    if(api){
        return api;
    }
    function getChild(selector,  $parent){
        var $children = $parent.children(selector);
        return $children.length > 0 ? $children[0]  : null;
    }
    function getAttribute(element, name, defaultValue){
        var attribute = element.attributes[name];
        if ( !attribute) return defaultValue;
        return (attribute.value === '') ? defaultValue : attribute.value;
    }

    var hidden = getChild('input[type="hidden"]', $ui);
    var visible = getChild('input[type="text"]', $ui);
    var label = getChild('label', $ui);
    var useDecimalMinutes = ('true' === getAttribute( ui, 'wbui_decimalMinutes', 'false'));
    var decimalPlaces = parseInt(getAttribute(ui, 'wbui_decimalPlaces', '2'));
    var decimalTruncate = ('true' === getAttribute( ui, 'wbui_decimalTruncate', 'false'));

    var durationFormat = DurationFormat(useDecimalMinutes, decimalPlaces, decimalTruncate);

    api = {
        set: function(duration){
            if(label){
            	label.innerHTML = durationFormat.format(duration);
            }
            if(hidden) {
                hidden.value = duration;
            }
            if(visible){
                visible.value = durationFormat.format(duration)
            }
        },
        get : function(){
            return parseInt(hidden.value); // assume that it is in edit mode
        },
        modified : function(){ //assume that it is in edit mode
            var value = visible.value;
            if(value == '') {
                return;
            }
            var duration = durationFormat.parse(value);
            if(duration.error){
                wbAlert(duration.error);
            }
            else {
                this.set(duration.minutes);
            }
        },
        onKeyPressed : function(event){
            var code  = event.keyCode ? event.keyCode : event.which ? event.which : 0;
            return durationFormat.validChar(code);
        }
    };

    $ui.data("wbDurationField", api);
    return api;

}

if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (obj, fromIndex) {
        if (fromIndex == null || fromIndex == undefined) {
            fromIndex = 0;
        } else if (fromIndex < 0) {
            fromIndex = Math.max(0, this.length + fromIndex);
        }
        for (var i = fromIndex, j = this.length; i < j; i++) {
            if (this[i] === obj)
                return i;
        }
        return -1;
    };
}
function addFocusForSpan(item, nullable){
    item.parentNode.className = item.parentNode.className +' inforCheckboxFocus';
    return false;
   }
function removeFocusForSpan(item, nullable){
	item.parentNode.className = item.parentNode.className.replace('inforCheckboxFocus','')
    return false;
   }


function getTimeEditUiParams(controlName) {
	var $control = $("[name = '" + controlName + "']");
	return $control.data('uiParams');
}

function getTimeEditUiParam(controlName, paramName) {
	var uiParams = getTimeEditUiParams(controlName);
	if (uiParams) {
		return uiParams[paramName];
	}
}

//wb_configkey
/* jQuery plugin that appends a config diamond to the element on which it is invoked, for either message localization or field configuration.
 *
 * {
 * 		key		:	"",			// The name of the key.
 * 		type	:	"field"		// optional, if omitted then a 'message' localization diamond is used.  Specify 'field' for field configuration or 'message' for message configuration.
 *      mfrmId  :   #           // optional, only used with 'field' configuration.  Specifies the maintenance form id of the key.
 * }
 */
(function( $ ) {

	var methods = {
		init : function( o ) {
			$(this).each(function() {
				var href = $("<a>", {
					href : "#",
					title : o.key
				}).addClass("message_configurer");

				href.click(function() {
					var target = (o.type === "field") ? "field" : "message";
					var mfrmId = (typeof(o.mfrmId) !== "undefined") ? parseInt(o.mfrmId) : -1;

					window.open(contextPath + '/system/' + target + '_configurer.jsp?field_name=' + o.key + '&domain=WORKBRAIN_SYSTEM&override=' + mfrmId + '&required=false','localize','left=75,top=75,width=370,height=170,resizable=1,dependent=1,scrollbars=1');
					return false;
				});



				href.append($("<img>", {
					border : "0",
					alt : o.key,
					src : contextPath + "/images/interface/bullet-orange.gif"
				}));
				$(this).append(href);
			});
			return $(this);
		}
	};

	$.fn.wb_configkey = function( method ) {
		if ( methods[method] ) {
			return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
		} else if ( typeof method === 'object' || ! method ) {
			return methods.init.apply( this, arguments );
		} else {
			$.error( 'Method ' +  method + ' does not exist on wb_configkey' );
		}
	};
})( jQuery );


// wb_securitykey
/*
 * {
 * 		key   : ""			// The name of the security key.
 * 		mfrmId : 123		// The formId of the security key.
 * }
 */
(function( $ ) {

    var methods = {
        init : function( o ) {
            $(this).each(function() {

                var href = $("<a>", {
                    title : o.key,
                    href : "#"
                }).addClass("security_configurer");

                href.click(function() {
                    window.open(contextPath + '/system/security_configurer.jsp?securityName=' + o.key + '&mfrm_id=' + o.mfrmId,'localize','left=75,top=75,width=370,height=170,resizable=1,dependent=1,scrollbars=1');
                    return false;
                });

                href.append($("<img>", {
                    width : "7",
                    hspace : "2",
                    height : "12",
                    border : "0",
                    alt : o.key,
                    src : contextPath + "/images/interface/key.gif"
                }));
                $(this).append(href);
            });
            return $(this);
        }
    };


    $.fn.wb_securitykey = function( method ) {
        if ( methods[method] ) {
            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
        } else if ( typeof method === 'object' || ! method ) {
            return methods.init.apply( this, arguments );
        } else {
            $.error( 'Method ' +  method + ' does not exist on wb_securitykey' );
        }
    };
})( jQuery );

/***************************************************************************
START OF IP VALIDATION FUNCTIONS
****************************************************************************/

/***************************************************************************
	To check if the given ipAddress is valid.
	Parameters:
		ipAddress - the given ipAddress
		required - if empty value is allowed
	Return:
		It will return a message if the ipAddress is invalid
		Otherwise return null
*****************************************************************************/
function validateIPAddress(ipAddress, required){
    var ipFormat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[*])\.(|25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[*])\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[*])\.([*]|25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[*])$/;
    var message = null;
    if((ipAddress == null || ipAddress.length == 0) && required){
        message = 'Must provide a Range Start value.';
    }
    else if(ipAddress != null && ipAddress.length != 0 && !ipAddress.match(ipFormat)){
        message = 'Invalid IP Address';
    }
    return message;
}

/*************************************************
	To show the validation message under the field
	Parameters:
		uiField - the given ui field
		messge - the validation message
	Return:
		NA
**************************************************/
function showMessage(uiField, message){
    var parentElement = uiField.parentElement;
    var brElement = parentElement.getElementsByTagName('br');
    var spanElement = parentElement.getElementsByTagName('span');

	if(brElement != null && brElement.length > 0){
        parentElement.removeChild(brElement[0]);
    }
    if(spanElement != null && spanElement.length > 0){
        parentElement.removeChild(spanElement[0]);
    }

    if(message != null){
        brElement = document.createElement('br');
        spanElement = document.createElement('span');
        var textnode = document.createTextNode(message);
        spanElement.appendChild(textnode);
        spanElement.setAttribute('class', 'textAlert');
        parentElement.appendChild(brElement);
        parentElement.appendChild(spanElement);
    }
}

/*************************************************
	Call the IP address validate method
	To handle the * properly
	Parameters:
		ipAddress - the given ipAddress
		required - if empty value is allowed
	Return:
		NA
**************************************************/
function handleIPAddress(uiField, required){
    var thisIPAddress = uiField.value;
    var message = validateIPAddress(thisIPAddress, required);
    if(message == null){
        var thisFieldName = uiField.name;
        var isStartIP = (thisFieldName.indexOf("START") != -1);
        var anotherFieldName = null;

        if(isStartIP){
            anotherFieldName = thisFieldName.replace('START', 'END');
        }
        else{
            anotherFieldName = thisFieldName.replace('END', 'START');
        }

        var anotherField = document.getElementsByName(anotherFieldName)[0];
		var anotherIPAddress = anotherField.value;
        var shouldCompareWithEndIP = true;

        var thisIPAddress = uiField.value;

        if(thisIPAddress.indexOf('*') != -1 && (anotherIPAddress == null ||anotherIPAddress.length == 0)){
            anotherIPAddress =  thisIPAddress;
            while(anotherIPAddress.indexOf('*') != -1) {
                if(isStartIP){
                    anotherIPAddress = anotherIPAddress.replace('*', '255');
                }
                else{
                    anotherIPAddress = anotherIPAddress.replace('*', '0');
                }
            }
            anotherField.value = anotherIPAddress;
            shouldCompareWithEndIP = false;
        }

        while(thisIPAddress.indexOf('*') != -1){
            if(isStartIP){
                thisIPAddress = thisIPAddress.replace('*', '0');
            }
            else{
                thisIPAddress = thisIPAddress.replace('*', '255');
            }
        }
        uiField.value = thisIPAddress;
        if(shouldCompareWithEndIP && (thisIPAddress != null && thisIPAddress.length > 0) && (anotherIPAddress != null && anotherIPAddress.length > 0)){
            var startIPAddress = null;
            var endIPAddress = null;
            if(isStartIP){
                startIPAddress = thisIPAddress;
                endIPAddress = anotherIPAddress;
            }
            else{
                startIPAddress = anotherIPAddress
                endIPAddress = thisIPAddress;
            }

			if(!endIPNotSmallerThanEndIP(startIPAddress, endIPAddress)){
            	if(isStartIP){
            		message = 'The Range Start value must be smaller than the Range End value.';
            	}
            	else{
            		message = 'The Range End value must be greater than the Range Start value.';
            	}
            }
        }
		showMessage(anotherField, null);
    }
	uiField.wbValid = (message == null);
    showMessage(uiField, message);
}

function endIPNotSmallerThanEndIP(startIPAddress, endIPAddress){
	var startIPArr = startIPAddress.split('.');
    var endIPArr = endIPAddress.split('.');

    for(var i = 0; i < startIPArr.length; i++){
    	var start = Number(startIPArr[i]);
    	var end = Number(endIPArr[i]);
    	if(end < start){
    		return false;
    	}
    	else if(end > start){
    		return true;
    	}
    }
    return true;
}

/***************************************************************************
END OF IP VALIDATION FUNCTIONS
****************************************************************************/

/* WB TreeTag Helper */
var wbTreeHelper = (function wbTreeHelper() {
    /* Private Members */
    var $trees;
    var pageForm;

    // Auto-initialization:
    $(function init() {
        $trees = $(".wbTree");
        pageForm = document.forms["page_form"];
        initEvents();
        initClickedCallback();
    });

    function initEvents() {
        $trees.each(function () {
            var $nodes = $(this).children(".wbTreeNode");
            $nodes.on("keydown", function (e) {
                if (stopNodeEvent(e)) return;

                var charCode = e.charCode || e.keyCode;
                var $target = $(this);

                if (charCode === 32 || charCode === 13) {
                    e.preventDefault();
                    $target.click();
                }
            });
        });
    }

    // Stop Node Event?
    function stopNodeEvent(e) {
        var stop = false;
        if (!isNodeEventTarget(e)) {
            var $target = $(e.target);
            if ($target.is("a,button,.stop-node-event")) {
                stop = true;
            }
        }
        return stop;
    }

    // Is Node Event Target?
    function isNodeEventTarget(e) {
        var result = false;
        // When a node event is triggered from another element ($target), the "currentTarget" will refer to the $node.
        var $target = $(e.target);
        var $node = $(e.currentTarget);
        // Some events (e.g., "keydown") may not populate the "currentTarget" when they are triggered from the $node.
        if (!$node || $node.attr("id") === $target.attr("id")) {
            result = true;
        }
        return result;
    }

    // Node Click Handler:
    function clickNode(evt, params) {
        if (stopNodeEvent(evt)) return;

        var $event = $.event.fix(evt || window.event);
        $event.stopPropagation();
        $event.preventDefault();

        if (pageForm['uiPathLabel']) pageForm['uiPathLabel'].value = params.uiPathLabel;
        pageForm[params.clickedNode.id].value = params.clickedNode.value;
        if (pageForm['currentID']) pageForm['currentID'].value = params.currentId;
        if (pageForm['parentID']) pageForm['parentID'].value = params.parentId;
        if (params['hiddenField']) {
            pageForm[params.hiddenField.id].value = params.hiddenField.value;
        }
        pageForm.submit();
    }

    function getClickedNodeId() {
        return (typeof(wbTreeClickedNodeId) != "undefined") ? wbTreeClickedNodeId: null;
    }

    // Clicked Node Callback:
    function initClickedCallback() {
        if (getClickedNodeId()) {
            if (typeof(wbTreeClickedCallback) != 'undefined') {
                wbTreeClickedCallback();
            } else {
                clickedCallback(wbTreeClickedNodeId);
            }
        }
    }

    function clickedCallback(targetItemId) {
        if (targetItemId) {
            window.location = '#' + targetItemId;
        }
    }

    function getRequestParamName(treeId, paramName) {
        return "tree_" + treeId + "_" + paramName;
    }

    function getRequestParamInput(treeId, paramName) {
        return pageForm[getRequestParamName(treeId, paramName)];
    }

    function getRequestParam(treeId, paramName) {
        var paramInput = getRequestParamInput(treeId, paramName);
        return (paramInput) ? paramInput.value : null;
    }

    function setRequestParam(treeId, paramName, paramValue) {
        var paramInput = getRequestParamInput(treeId, paramName);
        if (paramInput) paramInput.value = paramValue;
    }

    function getSelectedItemIdParam(treeId) {
        return getRequestParam(treeId, "selected");
    }

    function setSelectedItemIdParam(treeId, paramValue) {
        return setRequestParam(treeId, "selected", paramValue);
    }

    function parseTreeItemId(treeItemId) {
        var matches = treeItemId.match(/^(\w+)_(root|node|leaf)(?:_(\w+))?$/) || [];
        var result = {
            tree: matches[1],
            type: matches[2],
            id: matches[3]
        };
        return result;
    }

    function toParamItemId(treeItemId) {
        var result = parseTreeItemId(treeItemId);
        return result.type + "_" + result.id;
    }

    function toTreeItemId(treeId, paramItemId) {
        return treeId + "_" + paramItemId;
    }

    // Return Public Object:
    return {
        clickNode: clickNode,
        clickedCallback: clickedCallback,
        getClickedNodeId: getClickedNodeId,
        getSelectedItemIdParam: getSelectedItemIdParam,
        setSelectedItemIdParam: setSelectedItemIdParam,
        toParamItemId: toParamItemId,
        toTreeItemId: toTreeItemId
    };
})();


var wbIframes = {
    wfmShowFrame: function wfmShowFrame(frameName) {
        $("iframe", getWfmTopWindow().document).not("#" + frameName).addClass('invisible');
        $("iframe#" + frameName, getWfmTopWindow().document).removeClass('invisible');
    }
}

function htmlEncode(value){
    //create a in-memory div, set it's inner text(which jQuery automatically encodes)
    //then grab the encoded contents back out.  The div never exists on the page.
    return $('<div/>').text(value).html();
}
