/*
 * Copyright (c) Infor 2016. All rights reserved. www.infor.com
 */

/**
 * Example:
 * 
 * new POSTRequest().send({
 *      uri         : "",			// Required, the target of the POST.
 * 		reqParams   : {},			// Required, A map of field/value pairs to put in the POST.
 *      bigH        : obj,          // Optional, the element that contains the bigH value to send for 
 *                                  // security validation purposes.
 * 		bigHName    : "",			// Optional, not used if bigH is given, the ID of the element in the document 
 * 									// that contains the bigH value to send for security validation purposes.
 * 		popupParams : ""			// Optional, opens a popup to the given URI with these window.open parameters. 
 * 		target      : ""			// Optional, the target frame (for POSTing to iFrames).
 *      document    : obj			// Optional, the document which performs the POST (useful for POSTing from a parent window when in a child frame).  
 * });
 * 
 * @return
 */
function POSTRequest() {      
    this.send = function(params) { 		
    	var reqParamsMap = params.reqParams;			
    	var winObj;
    	if (params.bigH != "undefined" && params.bigH != null) {
    		reqParamsMap.bigH = params.bigH.value;
    	} else if (params.bigHName != "undefined" && document.getElementById(params.bigHName) != null) {
    		reqParamsMap.bigH = document.getElementById(params.bigHName).value;
    	}
		
		// create form
    	
    	var doc = document;
    	if (typeof(params.document) !== "undefined") {
    		doc = params.document;
    	}
    	
		var submitForm = doc.createElement("FORM");
		doc.body.appendChild(submitForm);
		submitForm.setAttribute("method", "POST");
		submitForm.setAttribute("action", params.uri);
		if (params.target) {
			submitForm.setAttribute("target", params.target);
		}
		
		
		function isUniqueFormName(name) {
			for (i = 0; i < doc.forms.length; i++) {
				if (name == doc.forms[i].name) {
					return false;
				}
			}
			return true;
		}
		
		// Give the form a unique name.
		var hasUniqueFormName = false;
		var formName;
		var i = 0;
		while (!hasUniqueFormName) {
			formName = "form_" + i++;
			hasUniqueFormName = isUniqueFormName(formName);
			if (hasUniqueFormName) {
				submitForm.setAttribute("name", formName);
			}
		}
		
		if (params.popupParams) {
			var target = formName + "_target";
			submitForm.setAttribute("target", target);	
			winObj = window.open('', target, params.popupParams);		
		}
		
		// add hidden fields
		var newElement;
		for (var key in reqParamsMap) {
			newElement = doc.createElement("input");
			newElement.setAttribute("type", "hidden");
			newElement.setAttribute("name", key);
			newElement.setAttribute("id", key);
			newElement.setAttribute("value", reqParamsMap[key]); 			
			submitForm.appendChild(newElement);
		}
		
		// add req auth token
		createReqAuthToken(submitForm);

		// submit form
		submitForm.submit();
			
	    // remove form		
		if (submitForm.parentNode && submitForm.parentNode.removeChild) {
			submitForm.parentNode.removeChild(submitForm);
		}	
		
		return winObj;
	};
}

/**
 * This function is to create request authentication token if it doesn't exist in input form.
 *
 **/
function createReqAuthToken(inFormname) {
	if (inFormname != null && (inFormname.wbat == null) && (document.getElementById('wbat') != null)) {
		var reqTokenParm = document.createElement("input");
        reqTokenParm.type = 'hidden';
        reqTokenParm.name = 'wbat';
		reqTokenParm.id = 'wbat';
		reqTokenParm.value = document.getElementById('wbat').value; 			
		inFormname.appendChild(reqTokenParm);
	 }
}

// Following is used for maintaining the scroll position between page re-posts
function setScrollPosition(){
    if (null == document.getElementById("wbXpos") || null == document.getElementById("wbYpos")) {
        return;
    }
    var scrollLeft = 0;
    var scrollTop = 0;
    if (document.documentElement &&
            (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
        scrollLeft = document.documentElement.scrollLeft;
        scrollTop = document.documentElement.scrollTop;
    } else if (document.body &&
            (document.body.scrollLeft || document.body.scrollTop)) {
        scrollLeft = document.body.scrollLeft;
        scrollTop = document.body.scrollTop;
    }
    document.getElementById("wbXpos").value = scrollLeft;
    document.getElementById("wbYpos").value = scrollTop;
}

function getSavedScrollPosition(coord) {
	var coords = {'x': -1, 'y': -1};
	var coord = (typeof(coord) !== 'undefined') ? String.toString(coord).toLowerCase(): null;
	var wbXpos = document.getElementById('wbXpos');
	var wbYpos = document.getElementById('wbYpos');
	if (wbXpos === null || wbYpos === null || (coord !== null && typeof(coords[coord]) === 'undefined')) {
		return null;
	}
	if (!isNaN(wbXpos.value)) coords.x = parseInt(wbXpos.value);
	if (!isNaN(wbYpos.value)) coords.y = parseInt(wbYpos.value);
	return (coord) ? coords[coord]: coords;
}

function jumpToSavedScrollPosition(){
	// Get saved coords:
	var coords = getSavedScrollPosition();
    if (coords === null) {
        return;
    }
    var html = document.documentElement; // Firefox and IE.
    var body = document.body; // Chrome, Safari and Opera.
    if (coords.x >= 0) {
    	if (html) html.scrollLeft = coords.x;
    	if (body) body.scrollLeft = coords.x;
    }
    if (coords.y >= 0) {
    	if (html) html.scrollTop = coords.y;
    	if (body) body.scrollTop = coords.y;
    }
    // Reset saved coords:
    document.getElementById('wbXpos').value = -1;
    document.getElementById('wbYpos').value = -1;
}

function jumpToElementPos(element){

    var html = document.documentElement;
    var body = document.body;
    if (html) html.scrollLeft = 0;
    if (body) body.scrollLeft = 0;
    if (html) html.scrollTop = $(element).offset().top;
    if (body) body.scrollTop = $(element).offset().top;
    document.getElementById('wbXpos').value = -1;
    document.getElementById('wbYpos').value = -1;

}

// If Error Msg exists, scroll to it and return true, else return false
function tryScrollToErrorMsgElement(){
    // if error msg exists in a form, scroll to the form instead
    if ($(".errorStatusBox").length){
        var jumpToElement = function(){jumpToElementPos($('.errorStatusBox')[0]);};
        setTimeout(jumpToElement,0)
        return true;
    }else if ($("#statusMessage.statusErrorMsg").length){
        var jumpToElement = function(){jumpToElementPos($('#statusMessage.statusErrorMsg'));};
        setTimeout(jumpToElement,0)
        return true;
    }
    return false;
}

function jumpToLastScrollPos() {
    if (null == document.getElementById("wbXpos") || null == document.getElementById("wbYpos")) {
        return;
    }
    try {
        if (tryScrollToErrorMsgElement()) return;

        var lastPage = document.referrer;
        var thisPage = document.URL;
        lastPage = lastPage.indexOf("?") > 0 ? lastPage.substring(0,lastPage.indexOf("?")) : lastPage;// remove URL parameters
        thisPage = thisPage.indexOf("?") > 0 ? thisPage.substring(0,thisPage.indexOf("?")) : thisPage;
        //only jump to the last scroll position if this is a repost to the same page
        if (thisPage == lastPage) {
            setTimeout("jumpToSavedScrollPosition()",0);
        }
        // populate the hidden input at the end of page_form 
        // that is broken by other forms.
        if (document.forms.length>1) {
            var destination = document.forms[0];
            var source = document.forms[document.forms.length-1].elements;
            for (var i = 0; i < source.length; i++) {
                var input = document.createElement('INPUT');
                input.setAttribute('type', 'hidden');
                input.setAttribute('name', source[i].name);
                input.setAttribute('value', source[i].value);
                destination.appendChild(input);
            }
        }
    } catch (e) {
        alert("Error: jumpToLastScrollPos\n\n" + e.description);
    }
}

var DelayedHover = {
    delay : 400, // millisecond
    init  : function ($elem, hoverInHandler, hoverOutHandler) {
        if (!hoverInHandler) {
            hoverInHandler = $.noop;
        }
        if (!hoverOutHandler) {
            hoverOutHandler = $.noop;
        }
        
        var hoverContext = {hoverTimer : null, delay : this.delay, hoverIn : false};
        $elem.hover(
            function(evt) {
                hoverContext.hoverIn = true;
                if (hoverContext.delay <= 0) {
                    hoverInHandler.call(null, evt, hoverContext);
                }
                else {
                    hoverContext.hoverTimer = setTimeout(function() {
                        hoverInHandler.call(null, evt, hoverContext);
                        hoverContext.hoverTimer = null;
                    }, hoverContext.delay);
                }
            },
            function (evt) {
                hoverContext.hoverIn = false;
                if (hoverContext.hoverTimer != null) {
                    clearTimeout(hoverContext.hoverTimer);
                }
                hoverOutHandler.call(null, evt, hoverContext);
                hoverContext.hoverTimer = null;
            }
        );
    },
};

/*--dates functions--*/
var default_locale = {
 month:["January","February","March","April","May","June","July","August",
        "September","October","November","December"],
 shortMonth:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep",
             "Oct","Nov","Dec"],
 day:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
 shortDay:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],
 eras:["BC","AD"],
 AmPm:["AM","PM"],
 usesAmPm:true,
 firstDayOfWeek:0,
 toOrdinal:function(number) {
   var numStr = String(number);
   var suffix;
   switch(numStr.substring(numStr.length-1)) {
     case "1": suffix = "st";break;
     case "2": suffix = "nd";break;
     case "3": suffix = "rd";break;
     default: suffix = "th";break;
   }
   return numStr + suffix;
 }
};

function DateFormatter(format) {
	  this.formatString = format;
	}
	DateFormatter.prototype.locale = default_locale;
	DateFormatter.prototype.setLocale = function (locale) {
	  this.locale = locale;
	};
	DateFormatter.prototype.formatNumber =   
	  function formatNumber(number,digits,padChar,ordinal) {
	    var numStr = String(number);
	    while(numStr.length < digits) {
	        numStr = padChar + numStr;
	    }
	    if(ordinal){
	    	return (this.locale==null)?numStr:this.locale.toOrdinal(numStr);
	    } else {
	    	return numStr;
	    }
	  };

	DateFormatter.prototype.parse = function parse (strDate) {
	  //var re = /([^a-z\\]*)((([a-z])\4*)(\.?)|\\([a-z]*\b||\.))/gi,
	   var re = /([^a-z\\]*)((([a-z])\4*)|\\([a-z]*\b||\.))/gi,
	        lastIndex = 0,
	      match;
	  re.lastIndex=0;
	  var strDateLastIndex = 0;
	  //var now=new Date();
	  //var year=now.getYear();
	  //var month=now.getMonth()+1;
	  var date=1;
	  //var hh=now.getHours();
	  //var mm=now.getMinutes();
	  //var ss=now.getSeconds();
	  var year=0;
	  var month=1;
	  var hh=0;
	  var mm=0;
	  var ss=0;
	  var ampm="";
	  while((match = re.exec(this.formatString))) {
	    //resultStr+=match[1]; 
	    var expectedDelimiter = match[1]?match[1]:"";
	    var delimiterLength = expectedDelimiter.length; // the length of delimiter between pattern character
	    var pattern = match[2];
	    var patternChar = match[4];
	    var patternLength = match[3]?match[3].length:0;
	    var contentLength = patternLength; //the length of matched sub-string in "strDate"
	    //var ordinal = match[5]=="."; //TO BE IMPLEMENTED
			
			//first check the actual delimiter matches the expected delimiter, if not, return 0.
			var actualDelimiter = strDate.substring(strDateLastIndex,strDateLastIndex + delimiterLength);
			if(expectedDelimiter!=actualDelimiter){
				return 0;
			}
			
	    switch (patternChar) {
	      case undefined: 
	        break;
	      case "y": // year
	        if (patternLength == 2) {
	          year=getInt(strDate,strDateLastIndex+delimiterLength,2,2);
	        } else {
	          year=getInt(strDate,strDateLastIndex+delimiterLength,4,4);
	        }
	        if (year==null) { return 0; }
	            contentLength=year.length;
	        if (year.length==2) { //the year is limited from 1971 to 2070
	              if (year > 70) { year=1900+(year-0); }//71'-99' => 1971-1999
	              else { year=2000+(year-0); }//00'-70' => 2000-2070
	        }
	        break;
	      case "M": // month
	        if (patternLength<=2) {
	          month=getInt(strDate,strDateLastIndex+delimiterLength,1,2);
	            //more restrictive:
	          //month=getInt(strDate,strDateLastIndex+delimiterLength,2,2);
	          if(month==null||(month<1)||(month>12)){return 0;}
	          contentLength = month.length;
	        } 
	        else if (patternLength == 3) {
	              month=0;
	              for (var i=0; i<this.locale.shortMonth.length; i++) {
	                var month_name=this.locale.shortMonth[i];
	                if (strDate.substring(strDateLastIndex+delimiterLength,strDateLastIndex+delimiterLength+month_name.length).toLowerCase()==month_name.toLowerCase()) {
	                    month=i+1;
	                    if ((month < 1)||(month>12)){return 0;}
	                    contentLength = month_name.length;
	                    break;
	                }
	              }
	              if ((month < 1)||(month>12)){return 0;}
	        }
	        else {
	              month=0;
	              for (var i=0; i<this.locale.month.length; i++) {
	                var month_name=this.locale.month[i];
	                if (strDate.substring(strDateLastIndex+delimiterLength,strDateLastIndex+delimiterLength+month_name.length).toLowerCase()==month_name.toLowerCase()) {
	                    month=i+1;
	                    if ((month < 1)||(month>12)){return 0;}
	                    contentLength = month_name.length;
	                    break;
	                }
	              }
	              if ((month < 1)||(month>12)){return 0;}
	        }
	        break;
	      case "d": // day of month in digits
	        date=getInt(strDate,strDateLastIndex+delimiterLength,1,2);
	        //more restrictive:
	        //	date=getInt(strDate,strDateLastIndex+delimiterLength,2,2);
	        if(date==null||(date<1)||(date>31)){return 0;}
	        contentLength = date.length;
	        break;
	      case "E": // day of week
	        if (patternLength<=2) {
	              var day_of_week=getInt(strDate,strDateLastIndex+delimiterLength,1,2);
	              if (day_of_week==null || day_of_week<=0 || day_of_week>7) {return 0;}
	              contentLength = day_of_week.length;
	        } 
	        else if (patternLength == 3) {
	              var day_of_week = 0;
	              for (var i=0; i<this.locale.shortDay.length; i++) {
	                var short_day_name=this.locale.shortDay[i];
	                if (strDate.substring(strDateLastIndex+delimiterLength,strDateLastIndex+delimiterLength+short_day_name.length).toLowerCase()==short_day_name.toLowerCase()) {
	                    day_of_week =i+1;
	                    if ((day_of_week<=0) || (day_of_week>7)) {return 0;}
	                    contentLength = short_day_name.length;
	                    break;
	                }
	              }
	            if ((day_of_week<=0) || (day_of_week>7)) {return 0;}
	        }
	           else {
	              var day_of_week = 0;
	              for (var i=0; i<this.locale.day.length; i++) {
	                var day_name=this.locale.day[i];
	                if (strDate.substring(strDateLastIndex+delimiterLength,strDateLastIndex+delimiterLength+day_name.length).toLowerCase()==day_name.toLowerCase()) {
	                    day_of_week =i+1;
	                    if ((day_of_week<=0) || (day_of_week>7)) {return 0;}
	                    contentLength = day_name.length;
	                    break;
	                }
	              }
	              if ((day_of_week<=0) || (day_of_week>7)) {return 0;}
	        }
	        break;
	      case "h": // 12 hours AM/PM 
	        hh=getInt(strDate,strDateLastIndex+delimiterLength,2,2);
	        if(hh==null||(hh<1)||(hh>12)){return 0;}
	        contentLength = hh.length;
	        break;
	      case "H": // 24 hours 
	        hh=getInt(strDate,strDateLastIndex+delimiterLength,2,2);
	        if(hh==null||(hh<0)||(hh>23)){return 0;}
	        contentLength = hh.length;
	        break;
	      case "m": // minutes
	        mm=getInt(strDate,strDateLastIndex+delimiterLength,2,2);
	        if(mm==null||(mm<0)||(mm>59)){return 0;}
	        contentLength = mm.length;
	        break;
	      case "s": // seconds
	        ss=getInt(strDate,strDateLastIndex+delimiterLength,2,2);
	        if(ss==null||(ss<0)||(ss>59)){return 0;}
	        contentLength = ss.length;
	        break;
	      case "a":
	        if (strDate.substring(strDateLastIndex+delimiterLength,strDateLastIndex+delimiterLength+this.locale.AmPm[0].length).toLowerCase()==this.locale.AmPm[0].toLowerCase()) {
	            ampm="AM";
	            contentLength =this.locale.AmPm[0].length;
	        }
	        else if (strDate.substring(strDateLastIndex+delimiterLength,strDateLastIndex+delimiterLength+this.locale.AmPm[1].length).toLowerCase()==this.locale.AmPm[1].toLowerCase()) {
	            ampm="PM";
	            contentLength =this.locale.AmPm[1].length;
	        }
	        else {return 0;}
	        break;
          case "T": //ISO8601 time separator
            //do nothing
            break;
	      default: //invalid pattern
	        return 0;
	    }
	    strDateLastIndex += delimiterLength + contentLength;
	  }
	  if (month==2) {
	    // Check for leap year
	      if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) { // leap year
	        if (date > 29){ return 0; }
	    }
	    else { if (date > 28) { return 0; } }
	  }
	  if ((month==4)||(month==6)||(month==9)||(month==11)) {
	     if (date > 30) { return 0; }
	  }
	  // Correct hours value
	  if (hh<12 && ampm=="PM") { hh=hh-0+12; }
	  else if (hh>11 && ampm=="AM") { hh-=12; }
	  var newdate=new Date(year,month-1,date,hh,mm,ss);
	  return newdate;
	};

	DateFormatter.prototype.format = function format(date) {
	  //var re = /([^a-z\\]*)((([a-z])\4*)(\.?)|\\([a-z]*\b||\.))/gi,
	   var re = /([^a-z\\]*)((([a-z])\4*)|\\([a-z]*\b||\.))/gi,
	      resultStr = "", 
	      locale = this.locale,
	      pad = this.formatNumber,
	      lastIndex = 0,
	      match;
	  while((match = re.exec(this.formatString))) { 
	    resultStr+=match[1];
	    var pattern = match[2];
	    var patternChar = match[4];
	    var patternLength = match[3]?match[3].length:0;
	    var ordinal = match[5]==".";
	    switch (patternChar) {
	      case undefined: // string is "\word"
	        resultStr += pattern.substring(1); // skip backslash
	        break;
	      case "G": // era
	        if (date.getFullYear() < 0) {
	          resultStr += this.locale.eras[0];
	        } else {
	          resultStr += this.locale.eras[1];
	        }
	        break;
	      case "y": // year
	        if (patternLength == 2) {
	          resultStr += pad(date.getFullYear()%100,2,"0",ordinal);
	        } else {
	          resultStr += pad(date.getFullYear(),patternLength,"0",ordinal);
	        }
	        break;
	      case "M": // month
	        if (patternLength<=2) {
	          resultStr += pad(date.getMonth()+1,patternLength,"0",ordinal);
	        } else if (patternLength == 3) {
	          resultStr += this.locale.shortMonth[date.getMonth()];
	        } else {
	          resultStr += this.locale.month[date.getMonth()];
	        }
	        break;
	      case "d": // day of month
	        resultStr += pad(date.getDate(),patternLength,"0",ordinal);
	        break;
	      case "D": // day in year
	        var firstDayOfYear = new Date(date.getFullYear(), 0, 1);
	        var dayInYear = Math.round((date.getTime()-firstDayOfYear.getTime())/(24*60*60*1000));
	        resultStr += dayInYear;
	        break;
	      case "E": // day of week
	        if (patternLength <= 2) {
	          resultStr += pad((date.getDay()-locale.firstDayOfWeek + 7)%7+1,
	                           patternLength,"0",ordinal);
	        } else if (patternLength == 3) {
	          resultStr += locale.shortDay[date.getDay()];
	        } else { 
	          resultStr += locale.day[date.getDay()];
	        }
	        break;
	      case "h": // 12 hours AM/PM 
	          var hour = date.getHours();
	  		if(!(hour <= 12)) {
	  			hour = hour -12;
	          } else if (hour == 0) {
	  			hour = 12;
	          }
	  		resultStr += pad(hour,patternLength,"0");
	          break;
	      case "H": // 24 hours 
	        resultStr += pad(date.getHours(),patternLength,"0",ordinal);
	        break;
	      case 'a' :
	    	  resultStr +=  this.locale.AmPm[( date.getHours() < 12) ? 0:1];
	    	  break;
	      case "m": // minutes
	        resultStr += pad(date.getMinutes(),patternLength,"0",ordinal);
	        break;
	      case "s": // seconds
	        resultStr += pad(date.getSeconds(),patternLength,"0",ordinal);
	        break;
	      case "z":
	        var tzOffsetMins = date.getTimezoneOffset();
	        var tzHour = pad(Math.round(tzOffsetMins/60),2,"0",0);
	        var tzMin = pad(Math.round(tzOffsetMins%60),2,"0",0);
	        if (tzOffsetMins >= 0) {
	            resultStr += "GMT+"+tzHour+":"+tzMin;
	        } else {
	            resultStr += "GMT-"+tzHour+":"+tzMin;
	        }
	        break;
	      default:
	        resultStr += pattern;  
	    }
	    lastIndex = re.lastIndex;
	  }
	  resultStr += this.formatString.substring(lastIndex);
	  return resultStr;
	};

function isInteger(val) {
    var digits="1234567890";
    for (var i=0; i < val.length; i++) {
        if (digits.indexOf(val.charAt(i))==-1) { return false; }
    }
    return true;
}

function getInt(str,i,minlength,maxlength) {
    for (var x=maxlength; x>=minlength; x--) {
    var token=str.substring(i,i+x);
        if (token.length < minlength) { return null; }
    if (isInteger(token)) { return token; }
    }
    return null;
}

function wbValidateForm() {
    return true;
}

function reloadWindow() {
	window.location.href = contextURL + formPath;
}
