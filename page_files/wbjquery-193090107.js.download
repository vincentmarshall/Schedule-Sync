/*
 * Copyright (c) Infor 2016. All rights reserved. www.infor.com
 */

//wb_dblookup
(function( $ ){

	var defaults = {
		data : [],
		sortIndex : null,
		sortDescending : false,
		columnHeaders : [],
		columnFields : [],
		fieldNames : null,
		localizations : {'find':'Find','clear':'Clear',
							'noRecords':'No Records Found', 'enterCriteria':'Enter search criteria and click on Find button',
							'prev':'< Prev','next':'Next >','reset':'Reset','submit':'Submit','remove':'Remove'},

		me : null,
		myDiv : null,
		myDivId : null,
		topDocument : null,
		topMe : null,
		topDiv : null,
		homeDocument : null,
		uiBackgroundOverlay : null,
		uiFieldHidden : null,
		uiFieldVisible : null,

		key : null,
		keyIndex : 0,
		labelIndex : 1,
		searchColumnIndex : 1,
		visibleColumns : null,
		nullable : null,
		multiple : null,
		label : null,
		fields : null,
		initialBlank : null,
		pageSize : 10,
		timeoutPeriod : 30,
		pageNum : 0,

		resultSelected : null,
		criteria : null,
		configOn : false,

		wbat : null,

		findButton : null,
		clearLink : null,
		prevButton : null,
		nextButton : null,
		pageNumSpan : null,
		submitButton : null,
		resetButton : null,
		removeButton : null,
		selectBox : null,
		selBoxSize : 4,

		lastPage : false,

		isRepeatDelay : false,
		currentRow : 0,

		isSubmit : false,
		isResolveSubmit : false,

		parameters : null,

		waitPeriod : null
	};

	var internal = {
		initialize : function(layer, initParams) {
			if (null != internal.topDocument) {
				return false;
			}
			if ($(getWfmTopWindow().document).find('#ui_background_overlay').length < 1) {
				getWfmTopWindow().document.body.firstChild.parentNode.insertBefore($('<div id="ui_background_overlay"></div>')[0], getWfmTopWindow().document.body.firstChild);
			}
			if ($(getWfmTopWindow().document).find('#dblookupDiv').length < 1) {
				getWfmTopWindow().document.body.firstChild.parentNode.insertBefore($('<div id="dblookupDiv"></div>')[0], getWfmTopWindow().document.body.firstChild);
			}
			internal.resetInternal();
			internal.me = $(layer);
			internal.myDivId = internal.me.attr('id');
			internal.myDiv = document.getElementById(internal.myDivId);
			internal.topDocument = getWfmTopWindow().document;
			internal.topDiv = $(getWfmTopWindow().document).find('#dblookupDiv');
			internal.topMe = $(internal.topDiv);
			internal.homeDocument = document;
			internal.uiBackgroundOverlay = $(internal.topDocument).find('#ui_background_overlay');
			var baseFieldName = internal.myDivId.substring(0, internal.myDivId.lastIndexOf('_layer'));
			internal.uiFieldHidden = $('input[name="' + baseFieldName + '"]');
			internal.uiFieldVisible = $('input[name="' + initParams.fieldVisible + '"]');
			internal.parameters = initParams;
			internal.multiple = internal.parameters.multiple;
			internal.waitPeriod = 1000 * internal.parameters.timeoutPeriod;
			return true;
		},

		renderDBLookup : function() {
			var me = internal.topMe;
			me.removeAttr('style');
			me.addClass('dblookupLayer');
			me.hide();
			// me.resizable().draggable();
			internal.createUIElements();
			me.append(internal.createHeaderSection());
			me.append(internal.createFooterSection());
			internal.setClearLinkAvailability();
			internal.setRemoveButtonAvailability();
			me.click(function(event){event.stopPropagation();});
			me.keydown(function(event){internal.keydownHandler(event);});
			internal.setSelectedItems();
			var resolveFilter = internal.uiFieldHidden.attr('resolveFilter');
			if (resolveFilter && resolveFilter.length > 0 ) {
				if (internal.searchColumnIndex >= 0) {
					me.find('[id^=findFieldTextBox]')[internal.searchColumnIndex].value = resolveFilter;
				}
				internal.setParameter('criteria', internal.getCriteria());
			}
			internal.populateData();
			internal.animateDBLookup(false);
		},

		createHeaderSection : function() {
			var trow = $('<tr>');
			var colHeads = internal.columnHeaders;
			var colFlds = internal.columnFields;
			trow.append($('<th>').css({'text-align':'left'}).
				append(internal.getMessageConfigurer('Find')).
				append(internal.findButton).
				append($('<br>')).
				append($('<span>').html(' ')).
				append(internal.getMessageConfigurer('Clear')).
				append('&nbsp;').
				append($('<a>').css({'cursor':'pointer'}).click(function() {internal.clearLinkClick();}).
								keydown(function (event) {internal.clearLinkClick(event);}).attr('tabindex',0).
								html(internal.localizations.clear)));
			for (var i=0, j=colHeads.length; i<j; i++) {
				if (!internal.visibleColumns[i]) {
					continue;
				}
				trow.append($('<th>').css({'text-align':'left', 'white-space':'nowrap'}).
					append(colFlds[i] ? internal.getSecurityConfigurer(colFlds[i]) : '').
					append(colFlds[i] ? internal.getFieldConfigurer(colFlds[i]) : '').
					append($('<a>').css({'cursor':'pointer'}).click(function() {internal.sortDataByColumn($(this));}).data('sortIndex',i+1).html(colHeads[i])).
					append($('<span>').html(' ')).
					append($('<img id=\'sortDirection'+i+'\' src=\'\'/>')).
					append('<br>').
					append($('<input id=\'findFieldTextBox'+i+'\' class="inforTextInput" size=14 />').bind('keydown', function(event){
						event.stopPropagation();
						if (event.which === 38 || event.which === 40) {
							internal.refreshDataRowsCSS();
							return;
						} else if (event.which === 27) {
							internal.resetDBLookup();
							return;
						} else if ((event.which === 37 || event.which === 39) && $(event.target).val().length === 0) {
							if (event.which === 37) {
								internal.prevButtonClick();
							} else {
								internal.nextButtonClick();
							}
							return;
						}
						internal.findButtonClick(event);
					})));
			}
			internal.headerSectionTable = $('<table>').addClass('dblookupSection topDblookupSection').append(trow);
			$(internal.headerSectionTable.find('[id^=sortDirection]')).hide();

			return internal.headerSectionTable;
		},

		createUIElements : function() {
            internal.resetButton = internal.getButton(internal.localizations.reset,internal.localizations.reset,'inforFormButton btn-secondary',internal.resetButtonClick);
            internal.findButton = internal.getButton(internal.localizations.find,internal.localizations.find,'inforFormButton default btn-primary',internal.findButtonClick);
            internal.prevButton = internal.getButton("Previous",internal.localizations.prev,'inforFormButton disabled btn-secondary',internal.prevButtonClick);
            internal.nextButton = internal.getButton("Next",internal.localizations.next,'inforFormButton disabled btn-secondary',internal.nextButtonClick);
            internal.submitButton = internal.getButton(internal.localizations.submit,internal.localizations.submit,'inforFormButton default btn-primary',internal.submitButtonClick);

            internal.removeButton = internal.getButton(internal.localizations.remove,internal.localizations.remove,'inforFormButton default disabled btn-primary',internal.removeButtonClick);
            internal.selectBox = $('<select>').attr({'multiple':'multiple','size':''+internal.selBoxSize}).addClass('dblookupSelectBox inforListBox').
				change(internal.setRemoveButtonAvailability).
				click(internal.setRemoveButtonAvailability).
				keydown(function (event) {
					if (event.which === 46) {
						internal.removeButtonClick();
					} else if (event.which === 27) {
						internal.resetDBLookup();
						return;
					}
					event.stopPropagation();
				});
			internal.pageNumSpan =$('<span>');

			internal.ringTabStops();
		},

		keydownHandler : function(e) {
			switch (e.which) {
				case 13 :
					internal.submitButtonClick();
					break;
				case 27 :
					internal.resetDBLookup();
					break;
				case 32 :
					internal.handleRowSelection();
					break;
				case 37 :
					internal.prevButtonClick();
					break;
				case 39 :
					internal.nextButtonClick();
					break;
				case 38 :
					internal.gotoPrevRow();
					break;
				case 40 :
					internal.gotoNextRow();
					break;
				default :
					return;
			}
			e.stopPropagation();
			e.preventDefault();
		},

		ringTabStops : function() {
			if (internal.isMultiple()) {
				internal.linkTabStops(internal.selectBox, internal.findButton, internal.removeButton);
			} else {
				internal.linkTabStops(internal.resetButton, internal.findButton);
			}
		},

		linkTabStops : function(elemFrom, elemTo, elemGoThru) {
			elemFrom.bind('keydown',
					function (e) {
						if (e.which ===9 && !e.shiftKey) {
							e.preventDefault();	e.stopPropagation();
							if (elemGoThru && !elemGoThru.attr('disabled')) {
								elemGoThru.focus();
							} else {
								elemTo.focus();
							}
						}
					});
			if (elemGoThru) {
				elemGoThru.bind('keydown',
					function (e) {if (e.which ===9 && !e.shiftKey) {e.preventDefault(); e.stopPropagation(); elemTo.focus();}});
				elemGoThru.bind('keydown',
					function (e) {if (e.which ===9 && e.shiftKey) {e.preventDefault(); e.stopPropagation(); elemFrom.focus();}});
			}
			elemTo.bind('keydown',
					function (e) {
						if (e.which ===9 && e.shiftKey) {
							e.preventDefault();	e.stopPropagation();
							if (elemGoThru && !elemGoThru.attr('disabled')) {
								elemGoThru.focus();
							} else {
								elemFrom.focus();
							}
						}
					});
		},

		gotoNextRow : function () {
			if (internal.currentRow < internal.data.length-1) {
				internal.currentRow++;
			} else {
				internal.currentRow = 0;
			}
			internal.refreshDataRowsCSS();
		},

		gotoPrevRow : function () {
			if (internal.currentRow < 1) {
				internal.currentRow = internal.data.length - 1;
			} else {
				internal.currentRow--;
			}
			internal.refreshDataRowsCSS();
		},

		setHoverRowCurrent : function (e) {
			var cb = $($(e.target).closest('tr.oddRow, tr.evenRow, tr.currentRow').find('input')[0]);
			internal.currentRow = cb.data('detail').rownum;
		},

		handleRowSelection : function() {
			var cb = $(internal.headerSectionTable.find('input:checkbox')[internal.currentRow]);
			if (!cb[0]) {
				return;
			}
			internal.rowSelected(cb);
		},

		rowSelected : function(cb) {
			if (!internal.isMultiple()) {
				internal.dataLinkClick(cb.data('detail').key);
			} else {
				if (cb.is(':checked')) {
					cb.removeAttr('checked');
				} else {
					cb.attr('checked', 'checked');
				}
				cb.change();
				internal.checkBoxSet(cb);
			}
		},

		createFooterSection : function() {
			var trow1 = $('<tr>');
			trow1.append($('<th colspan=2>').css({'text-align':'left', 'white-space':'nowrap'}).
				append(internal.getMessageConfigurer('priorPage')).
				append(internal.prevButton).
				append(internal.pageNumSpan).
				append(internal.getMessageConfigurer('nextPage')).
				append(internal.nextButton).
				append($('<span>').html('&nbsp;&nbsp;&nbsp;&nbsp;')).
				append(internal.isMultiple() ? $('<span>').html('&nbsp;') : '').
				append(internal.getMessageConfigurer('Submit')).
				append(internal.isMultiple() ? internal.submitButton : '').
				append(internal.isMultiple() ? $('<span>').html('&nbsp;') : '').
				append(internal.getMessageConfigurer('Reset')).
				append(internal.resetButton));
			internal.footerSectionTable = $('<table width="100%">').addClass('dblookupSection bottomDblookupSection').append(trow1);
			if (internal.isMultiple()) {
				var trow2 = $('<tr>');
				trow2.append($('<th width="1px">').append(internal.selectBox)).
					append($('<th>').append($('<span>').html(' ')).
					append(internal.getMessageConfigurer('remove')).append(internal.removeButton));
				internal.footerSectionTable.append(trow2);
			}
			return internal.footerSectionTable;
		},

		animateDBLookup : function(remove) {
			var me = internal.topMe;
			var fhi = internal.uiFieldHidden[0];
			if (remove) {
				internal.uiFieldVisible.prop('isResolving', false);
				me.hide();
				me.unbind('keydown');
				internal.hideOverlay();
				var isResolvePopup = internal.uiFieldHidden.attr('resolveFilter');
				if (internal.isSubmit || isResolvePopup) {
					if (!internal.isSubmit && isResolvePopup) {
						internal.resetButtonClick();
						internal.uiFieldHidden.removeAttr('resolveFilter');
					}
					if (fhi.onfocus) {
						try {
							fhi.onfocus();
						} catch (e) {
							// do nothing, bad custom code
						}
					}
					if (fhi.onchange) {
						try {
							$(fhi).change();
						} catch (e) {
							// do nothing, bad custom code
						}
					}
					if (fhi.onblur) {
						try {
							fhi.onblur();
						} catch (e) {
							// do nothing, bad custom code
						}
					}
				}
				// if (internal.isSubmit && internal.uiFieldVisible.attr('onchange')) {
					// internal.uiFieldVisible.change();
				// }

				var homeDoc = $(internal.homeDocument);
				var buttonField = homeDoc.find(':input[name="' + internal.uiFieldHidden[0].name + '_button"]')[0];
				var offset = 1 + (buttonField ? 1 : 0);
				if (!homeDoc.find(':input[name="' + internal.uiFieldHidden[0].name + '_button_ALL"]')[0]) {
					offset = offset - 1;
				}
				if (internal.isSubmit || internal.isResolveSubmit) {
					getNextFocusableInputElement(homeDoc, internal.uiFieldVisible[0], offset).focus();
				} else if( !($(internal.uiFieldVisible[0]).is(':hidden'))){
					internal.uiFieldVisible[0].focus();
				}

				me.remove();
				internal.resetInternal();
			}  else {
				internal.refreshCSSClassesPatch();

				internal.scrollToVisible(true);
				internal.showOverlay();
				me.attr('tabindex',0);
				internal.focus(me.find('[id^=findFieldTextBox]')[Math.max(0,internal.searchColumnIndex)]);
			}
		},

		scrollToVisible : function(initialOpen) {
			var topMe = internal.topMe;
			if (initialOpen) {
				topMe.css("opacity",0).show();
			}

			var offset = internal.me.offset();
			var framesOffset = internal.getFramesOffset(internal.topDocument,internal.myDivId,null);
			if (null != framesOffset) {
				offset.top += (framesOffset.top - $(internal.homeDocument).scrollTop());
				offset.left += (framesOffset.left - $(internal.homeDocument).scrollLeft());
			}

			//browsers speak different dialects
			var windowTopScrollTop = Math.max(getWfmTopWindow().document.documentElement.scrollTop, getWfmTopWindow().document.body.scrollTop);
			var windowTopScrollLeft = Math.max(getWfmTopWindow().document.documentElement.scrollLeft, getWfmTopWindow().document.body.scrollLeft);
			if (offset.left + topMe.outerWidth() > windowTopScrollLeft + $(getWfmTopWindow()).width()) {
				offset.left = Math.max(0, windowTopScrollLeft + $(getWfmTopWindow()).width() - topMe.outerWidth() - 3);
			}

			var bottomUp = Math.max(0, offset.top + topMe.outerHeight() - windowTopScrollTop - $(getWfmTopWindow()).height());
			if (bottomUp > 0) {
				if (offset.top - windowTopScrollTop < $(getWfmTopWindow()).height() / 2) {
					offset.top = Math.max(3, offset.top - bottomUp);
				} else {
					offset.top = Math.max(3, offset.top-topMe.outerHeight() - internal.uiFieldVisible.outerHeight() - 3);
				}
			}
			if (offset.top < windowTopScrollTop) {
				offset.top = windowTopScrollTop + 3;
			}
			if (offset.left < windowTopScrollLeft) {
				offset.left = windowTopScrollLeft + 3;
			}
			if ($.browser && $.browser.msie && (offset.top == 137 || offset.top == 138)) {
				offset.top = 3;
			}

			$(internal.topDiv).offset(offset);

			if (initialOpen) {
				topMe.animate({opacity:1}, 150, 'linear');
			}
		},

		getFramesOffset : function(doc, name, offset) {
			var frames = $(doc).find('frame,iframe');
			for (var i=0; i<frames.length; i++) {
				var frameDoc = frames[i].contentWindow.document;
				if ($(frameDoc).find('#'+getJQuerySearchableIdentifier(name)).length > 0) {
					offset = {'top': $(frames[i]).offset().top, 'left': $(frames[i]).offset().left};
					return offset;
				} else {
					offset = internal.getFramesOffset(frameDoc, name, offset);
					if (null != offset) {
						offset = {'top': offset.top + $(frames[i]).offset().top, 'left': offset.left + $(frames[i]).offset().left};
						//browsers speak different dialects
						var frameScrollTop = Math.max(frameDoc.documentElement.scrollTop, frameDoc.body.scrollTop);
						var frameScrollLeft = Math.max(frameDoc.documentElement.scrollLeft, frameDoc.body.scrollLeft);
						offset.top -= frameScrollTop;
						offset.left -= frameScrollLeft;
						return offset;
					}
				}
			}
			return offset;
		},

		resetInternal : function() {
			$.extend(internal, defaults);
		},

		resetDBLookup : function(error) {
			//to avoid chained events from executing twice, eg.topFrameDocument events already executed before topDocument events
			if (!internal.topDocument) {
				return;
			}

			if (error && error.message) {
				alert('Error: ' + error.message);
			}

			internal.animateDBLookup(true);
		},

		refreshCSSClassesPatch : function() {
			if ($.browser && !$.browser.webkit) {
				// no harm if not return here, simply avoiding unnecessary class assignments
				return;
			}
			// patch to overcome chrome/safari behavior  - lost css classes in some cases, seemingly when dblookup comes from iframe
			// time permitted, investigate how e.g. datepicker jquery plugin avoids this problem and/or refactor code to remove this patch
			$(internal.topDiv).attr('class','dblookupLayer');
			$(internal.headerSectionTable).attr('class','dblookupSection topDblookupSection');
			$(internal.footerSectionTable).attr('class','dblookupSection bottomDblookupSection');
			$(internal.selectBox).attr('class','dblookupSelectBox inforListBox');
		},

		refreshDataRowsCSS : function() {
			if (internal.data.length === 0) {
				return;
			}
			var datarows = internal.headerSectionTable.find('> tbody > tr:gt(0)');
			if (internal.currentRow > datarows.length) {
				internal.currentRow = datarows.length-1;
			}
			for (var i=0, j=datarows.length; i<j; i++) {
				var datarow = $(datarows[i]);
				if (i == internal.currentRow) {
					try {
						if (internal.isMultiple()) {
							datarow.find('input:checkbox')[0].focus();
						} else {
							datarow.find('a')[0].focus();
							datarow.css({'cursor':'pointer'});
						}
					} catch (e) {
						// do nothing, error in IE8 initially until layer becomes visible
					}
					datarow.attr('class', 'currentRow');
				} else {
					datarow.attr('class', i % 2 === 0 ? 'evenRow' : 'oddRow');
				}
			}
		},

		checkFieldExists : function() {
			var baseFieldName = internal.myDivId.substring(0, internal.myDivId.lastIndexOf('_layer'));
			if (!document.getElementsByName(baseFieldName)[0]) {
				throw new Error();
			}
		},

		getButton : function(ariaLabel,text, class_name, onclick_handler) {
			var $button = $('<button>').addClass(class_name).html(text).
					click( function(event) {
						event.preventDefault();
						onclick_handler();
					}).
					keydown( function(event) {
						if (event.which === 13 || event.which === 32) {
							event.preventDefault();
							event.stopPropagation();
							onclick_handler();
						}
					});
            if(ariaLabel!=null){
                $button.attr("aria-label",ariaLabel);

            }
            return $button;
		},

		findButtonClick : function(e) {
			if (e && e.which !==13) {
				return;
			} else if (e) {
				e.preventDefault();
				e.stopPropagation();
			}
			internal.pageNum  = 0;
			internal.setParameter('pageNum', internal.pageNum);
			internal.setParameter('criteria', internal.getCriteria());
			internal.setParameter('sortOrderBy', internal.getOrderBy());
			internal.refreshData();
		},

		clearLinkClick : function(e) {
			if (e && (e.which !==13 && e.which !==32)) {
				return;
			} else if (e) {
				e.preventDefault();
				e.stopPropagation();
			}
			internal.topMe.find('[id^=findFieldTextBox]').attr('value','');
			internal.setButtonDisabled(internal.prevButton, true);
			internal.setButtonDisabled(internal.nextButton, true);
			internal.setClearLinkAvailability();
			internal.findButtonClick();
		},

		prevButtonClick : function() {
			if (internal.isRepeatDelay || internal.pageNum === 0) {
				return;
			}
			internal.pageNum--;
			internal.setParameter('pageNum', internal.pageNum);
			internal.refreshData();
		},

		nextButtonClick : function() {
			if (internal.isRepeatDelay || internal.lastPage) {
				return;
			}
			internal.pageNum++;
			internal.setParameter('pageNum', internal.pageNum);
			internal.refreshData();
		},

		submitButtonClick : function(e) {
			if (e && e.which !==13) {
				return;
			} else if (e) {
				e.preventDefault();
				e.stopPropagation();
			}
			internal.submitUserSelection();
			internal.resetDBLookup();
		},

		resetButtonClick : function() {
			internal.selectBox.find('option').remove();
			internal.topMe.find('span.inforCheckbox.checked').not('[class*="readOnly"]').removeClass('checked');
			internal.topMe.find('input:checkbox').removeAttr('checked');
			internal.submitUserSelection();
		},

		dataLinkClick : function(key, e) {
			if (e && e.which !==13 && e.which !==32) {
				return;
			} else if (e) {
				e.preventDefault();
				e.stopPropagation();
			}
			internal.selectBox.find('option').remove();
			internal.topMe.find('input:checkbox').removeAttr('checked');
			internal.checkBoxSet(internal.getCheckBox(key).attr('checked', 'checked'));
			internal.submitButtonClick();
		},

		dataRowClick : function(e) {
			if (!$(e.target).is('input:checkbox')) {
				var td = $($(e.target).closest('tr').children('td')[0]);
				internal.rowSelected($(td.find('input')[0]));
			}
		},

		dataRowHover : function(e) {
			internal.setHoverRowCurrent(e);
			internal.refreshDataRowsCSS();
		},

		checkBoxSet : function(cb, e) {
			if (e && e.which !==13) {
				return;
			} else if (e) {
				e.preventDefault();
				e.stopPropagation();
			}
			var checked = cb.is(':checked');
			if (checked) {
			    internal.selectBox.append($('<option>').attr('value', cb.data('detail').key).text(cb.data('detail').text));
			} else {
				internal.selectBox.find('option[value=\''+cb.data('detail').key+'\']').remove();
			}
			internal.currentRow = cb.data('detail').rownum;
			internal.refreshDataRowsCSS();
			internal.setRemoveButtonAvailability();
		},

		getCheckBox : function(key) {
			var checkboxes = $(internal.headerSectionTable.find('input:checkbox'));
			for (var i=0, j=checkboxes.length; i<j; i++) {
				if (key == $(checkboxes[i]).attr('key')) {
					return $(checkboxes[i]);
				}
			}
			return null;
		},

		removeButtonClick : function() {
			var sb = internal.selectBox;
			sb.find('option:selected').each(function(i){
				var cb = internal.getCheckBox($(this).val());
				if (cb) {
					cb.removeAttr('checked');
					cb.parent().removeClass('checked');
				}
			});
			sb.children(':selected').remove();
			internal.setRemoveButtonAvailability();
			internal.submitButton.focus();
		},

		setSelectBoxItems : function(items) {
			for (var i=0, j=items.length; i<j; i++) {
				internal.selectBox.append('<option value=\''+items[i][0]+'\'>'+items[i][1]+'</option>');
			}
		},

		setCheckBoxStates : function() {
			internal.selectBox.find('option').each(function(i){
				var cb = internal.getCheckBox($(this).val());
				if (cb) {
					cb.attr('checked','checked');
				}
			});
		},

		setButtonDisabled : function(button, disabled) {
			if (disabled) {
				button.attr('disabled','disabled').addClass('disabled');
			} else {
				button.removeAttr('disabled').removeClass('disabled');
			}
		},

		submitUserSelection : function() {
			var selected = [];
			internal.selectBox.find('option').each(function(i){
				var option = {};
				option.label = $(this).text();
				option.key = $(this).val();
				selected.push(option);
			});
			internal.updateUIFields(selected);
			internal.isSubmit = true;
		},
		updateUIFields : function(selected) {
			var uiFieldHidden = internal.uiFieldHidden;
			var uiFieldVisible = internal.uiFieldVisible;
			var lookup = $(internal.me).data("dbLookup");
			if(lookup){
				lookup.setResolvedValues(selected);
			}
			else {
				setDBLookupFields(selected, uiFieldHidden[0], uiFieldVisible[0], true);  //always in edit mode
			}
			if (uiFieldVisible) {
				uiFieldVisible.prop('isResolving', false);
				uiFieldVisible.prop('wbValid', true);
			}
		},
		isFindCriteriaSet : function() {
			var findFields = internal.topMe.find('[id^=findFieldTextBox]');
			for (var i=0, j=findFields.length; i<j; i++) {
				if ($(findFields[i]).attr('value') !== '') {
					return true;
				}
			}
			return false;
		},

		getCriteria : function() {
			var findFields = internal.topMe.find('[id^=findFieldTextBox]');
			var criteria = '';
			var findFieldIndex = 0;
			for (var i=0, j=internal.visibleColumns.length; i<j; i++) {
				if (!internal.visibleColumns[i]) {
					continue;
				}
				if ($(findFields[findFieldIndex]).attr('value') !== '') {
					criteria += '__column' + i + '==' + $(findFields[findFieldIndex]).attr('value') + '~|~';
				}
				findFieldIndex++;
			}
			internal.criteria = criteria;
			return internal.criteria;
		},

		getOrderBy : function() {
			if (!internal.sortIndex) {
				return null;
			}
			return '' + internal.sortIndex + (internal.sortDescending ? ' DESC' : '');
		},

		setClearLinkAvailability : function() {
			// internal.setButtonDisabled('#clearButton', !internal.isFindCriteriaSet());
		},

		setRemoveButtonAvailability : function() {
			internal.setButtonDisabled(internal.removeButton, (internal.selectBox.find('option:selected').length === 0));
		},

		setPageNumSpan : function() {
			internal.pageNumSpan.html('&nbsp;' + (internal.pageNum +1) + '&nbsp;');
		},

		populateData : function() {
			internal.topMe.css({'height':internal.topMe.height()});
			internal.clearDataSection();
			var tbl = internal.headerSectionTable;
			if (internal.data.length === 0) {
				tbl.append(internal.createNoDataRow().addClass('evenRow'));
			} else {
			var odd = false;
				for (var i=0, j=internal.data.length; i<j; i++) {
					tbl.append(internal.createDataRow(i,internal.data[i],internal.displayData[i]).addClass(odd ? 'oddRow' : 'evenRow'));
					odd = !odd;
				}
			}
			internal.setButtonDisabled(internal.prevButton, internal.pageNum === 0);
			internal.setButtonDisabled(internal.nextButton, internal.lastPage);
			internal.setClearLinkAvailability();
			internal.setPageNumSpan();
			internal.setCheckBoxStates();
			internal.topMe.css({'height':'auto'});
			internal.refreshCSSClassesPatch(false);
			internal.refreshDataRowsCSS();
			// internal.linkArrowKeyStops(tbl);
			internal.scrollToVisible();
		},

		createDataRow : function(index,dtarow,dsplrow) {
			var isMultiple = internal.isMultiple();
			var trow = $('<tr>');
			var checkBox = $('<input>').attr({id:'dblCheckBox_'+index,type:'checkbox',key:dtarow[internal.keyIndex]}).
				data('detail',{'key':dtarow[internal.keyIndex],'text':dtarow[internal.labelIndex],'rownum':index}).
				change(function (event) {
					event.stopPropagation();
				}).
				mouseup(function (event) {
					event.preventDefault();
				}).
				mousedown(function (event) {
					event.preventDefault();
				}).
				click(function (event) {
					internal.checkBoxSet($(event.target));
					event.stopPropagation();
				}).
				dblclick(function (event) {
					event.preventDefault();
					event.stopPropagation();
				}).
				keypress(function (event) {
					if (event.which !== 9 && event.keyCode !== 9) {
						event.preventDefault();
						event.stopPropagation();
					}
				}).
				keyup(function (event) {
					event.preventDefault();
					event.stopPropagation();
				});
			if (!isMultiple) {
				checkBox.hide();
			} else {
				checkBox.focus(function (event) {internal.dataRowHover(event);});
			}
			trow.append($('<td>').append(checkBox));
			var tabIndexColumn = true;
			for (var i=0, j=dtarow.length; i<j; i++) {
				if (!internal.visibleColumns[i]) {
					continue;
				}
				var elemA = $('<a>').css({'cursor':'pointer'}).
								click(function () {internal.dataLinkClick(dtarow[internal.keyIndex]);}).
								focus(function (event) {internal.dataRowHover(event);}).
								html(dsplrow[i]);
				if (tabIndexColumn) {
					if (!isMultiple) {
						elemA.bind('keydown', function (event) {internal.dataLinkClick(dtarow[internal.keyIndex], event);}).attr('tabindex',0);
					}
					tabIndexColumn = false;
				}
				trow.append($('<td>').css({'text-align':'left', 'white-space':'nowrap'}).
					append(elemA));
			}
			return trow.click(function (event) {
							internal.dataRowClick(event);
							event.preventDefault();
							event.stopPropagation();
						}).
						mouseover(function (event) {
							internal.dataRowHover(event);
						}).
						dblclick(function (event) {
							event.preventDefault();
							event.stopPropagation();
						});
		},

		createNoDataRow : function() {
			var trow = $('<tr>');
			var visColumns = 0;
			for (var i=0, j=internal.visibleColumns.length; i<j; i++) {
				if (internal.visibleColumns[i]) {
					visColumns++;
				}
			}
			var message = internal.parameters.initialBlank ? internal.localizations.enterCriteria : internal.localizations.noRecords;
			trow.append($('<td colspan=' + (visColumns+1) + '>').append($('<span>').
					addClass(internal.parameters.initialBlank ? '' : 'textAlert').
					html('&nbsp;&nbsp;' + message)).css({'color':'#cc0033'}));
			return trow;
		},

		clearDataSection : function() {
			internal.headerSectionTable.find('tr:gt(0)').remove();
		},

		sortDataByColumn : function(elem) {
			var sortIndex = elem.data('sortIndex');
			if (internal.sortIndex == sortIndex) {
				internal.sortDescending = !internal.sortDescending;
			} else {
				internal.sortIndex = sortIndex;
				internal.sortDescending = false;
			}
			var images = $(internal.headerSectionTable.find('[id^=sortDirection]'));
			images.hide();
			var visibleColumnSortIndex = 0;
			for (var i=0, j=internal.visibleColumns.length; i<j; i++) {
				if (!internal.visibleColumns[i]) {
					continue;
				} else if (i == sortIndex) {
					break;
				}
				visibleColumnSortIndex++;
			}
			$(images[visibleColumnSortIndex-1]).attr('src',contextPath+'/images/interface/arrowSort'+(internal.sortDescending?'Down':'Up')+'.gif').show();
			internal.pageNum  = 0;
			internal.findButtonClick();
		},

		showOverlay : function() {
			internal.uiBackgroundOverlay.css('opacity', 0).show();
			internal.uiBackgroundOverlay.bind('click', internal.resetDBLookup);
			$(window).bind('beforeunload', internal.resetDBLookup);
		},

		hideOverlay : function() {
			internal.uiBackgroundOverlay.hide();
			internal.uiBackgroundOverlay.unbind('click', internal.resetDBLookup);
			$(window).unbind('beforeunload', internal.resetDBLookup);
		},

		setData : function(infoAndData) {
			internal.data = [];
			internal.displayData = [];
			internal.columnHeaders = [];
			internal.columnFields = [];
			internal.columnSort = null;
			// the first row is info row
			var info = $.parseJSON(infoAndData[0].data[0]);
			if (!internal.columnHeaders || internal.columnHeaders.length === 0) {
				var colHeads = info.columnHeaders.split(',');
				var colNum = colHeads.length;
				for (i=0; i<colNum; i++) {
					internal.columnHeaders[i] = colHeads[i];
				}
				if (info.columnFields) {
					var colFields = info.columnFields.split(',');
					for (i=0; i<colFields.length; i++) {
						internal.columnFields[i] = colFields[i];
					}
					internal.configOn = true;
				}
			}
			internal.keyIndex = info.keyIndex;
			internal.labelIndex = info.labelIndex;
			internal.visibleColumns = $.parseJSON(info.visibleColumns);
			var colInd = 0;
			for (i=0; i<internal.visibleColumns.length; i++) {
				if (!internal.visibleColumns[i]) {
					if (i==internal.labelIndex) {
						internal.searchColumnIndex = -1;
						break;
					}
					continue;
				}
				if (i==internal.labelIndex) {
					internal.searchColumnIndex = colInd;
					break;
				}
				colInd++;
			}
			if (!internal.fieldNames || internal.fieldNames.length === 0) {
				internal.fieldNames = info.fieldNames;
				internal.setParameter('fieldNames', internal.fieldNames);
			}
			internal.lastPage = info.lastPage;
			$.extend(internal.localizations, info.localizations);
			// here come data
			for (i=1; i<infoAndData.length; i++) {
				internal.data[i-1] = [];
				internal.displayData[i-1] = [];
				internal.setDataAndDisplayRows(infoAndData[i].data, internal.data[i-1], internal.displayData[i-1]);
			}
		},

		setDataAndDisplayRows : function(data, dataRow, displayRow) {
			for (var i=0; i < data.length; i++) {
				var items = data[i].split('~|~');
				dataRow[i]=items[0];
				displayRow[i]=items[1];
			}
		},

		isMultiple : function() {
			return 'Y' == internal.multiple;
		},

		setParameter : function(name, value) {
			internal.parameters[name] = value;
		},

		focus : function(textField) {
			textField.focus();
			if (textField.setSelectionRange) {
				var len = textField.value.length * 2;
				textField.setSelectionRange(len, len);
			} else {
				textField.value = textField.value;
			}
		},

		setSelectedItems : function() {
			var selected = unescape(internal.uiFieldHidden.attr('rsl'));
			if (selected && selected.length > 0) {
				var foundItems = selected.split('~div~');
				foundItems.pop();
				for (var i=0, j=foundItems.length; i<j; i++) {
					foundItems[i] = foundItems[i].split('~value~');
					foundItems[i][0] = foundItems[i][0].substring(5);
				}
				internal.setSelectBoxItems(foundItems);
			}
		},

		getConfigurer : function(type, cfgKey) {
			if (!internal.configOn) {
				return '';
			}

			var key = cfgKey;
			var url = contextPath + '/system/' + type + '_configurer.jsp?';
			var imageSrc = contextPath + '/images/interface/';
			if (type=='security') {
				cfgKey = 'security_dblookupBlock_' + cfgKey;
				url += ('securityName=' + cfgKey + '&mfrm_id=1810');
				imageSrc += 'key.gif';
			} else {
				url += ('field_name=' + cfgKey + '&domain=workbrain_system&override=-1&required=' + (type=='field') + '\'');
				imageSrc += 'bullet-orange.gif';
			}

			var href = $('<a>', {
				href : '#',
				title : cfgKey
			}).addClass(type + '_configurer');

			href.click(function() {
				window.open(url,'localize','left=75,top=75,width=370,height=170,resizable=1,dependent=1,scrollbars=1');
				return false;
			});

			href.append($('<img>', {
				border : '0',
				alt : cfgKey,
				src : imageSrc
			}));
			return href;
		},

		getMessageConfigurer : function(locKey) {
			return internal.getConfigurer('message',locKey);
		},

		getFieldConfigurer : function(locKey) {
			return internal.getConfigurer('field',locKey);
		},

		getSecurityConfigurer : function(secKey) {
			return internal.getConfigurer('security',secKey.toLowerCase());
		},

		getPostData : function(params) {
			var data =  {};
			data.key = params.key;
			data.label = params.label;
			data.fields = params.fields;
			data.pageSize = params.pageSize;
			data.pageNum = params.pageNum;
			data.dataSourceType = params.dataSourceType;
			data.dataSourceSpec = params.dataSourceSpec;
			data.dataSourceParams = params.dataSourceParams;
			data.where = params.where;
			data.addWhere = params.addWhere;
			data.masterSlaveAddWhere = params.masterSlaveAddWhere;
			data.orderBy = params.orderBy;
			data.filtersDuplicatesBySQL = params.filtersDuplicatesBySQL;
			data.initialBlank = params.initialBlank;
			data.fieldNames = params.fieldNames;
			data.criteria = params.criteria;
			data.sortOrderBy = params.sortOrderBy;
			data.selectedLabels = params.selectedLabels;
			data.multiple = params.multiple;
			data.wbat = params.wbat;
            data.customAddWhere = params.customAddWhere;
			data.customAddWhereParams = params.customAddWhereParams;
			data.customAddWhereValues = params.customAddWhereValues;
            return JSON.stringify(data);
		},

		retrieveData : function(params, render) {
			if (internal.isRepeatDelay) {
				return;
			}
			if (!params) {
				params = internal.parameters;
			}
			internal.isRepeatDelay = true;
			var  postData = internal.getPostData(params);
			// TODO - check if WB_AJAX functions from wb-core.js can be called
			$.ajax({
				type: 'POST',
				url: contextPath+'/services/platform/dblookup/getdblookup',
				data: postData,
				contentType: 'application/json; charset=utf-8',
				dataType: 'json',
				async: true,
				success: function(infoAndData) {
					try {
						internal.checkFieldExists();
						internal.setData(infoAndData);
						if (render) {
							internal.renderDBLookup();
							internal.setParameter('initialBlank', false);
						} else {
							internal.populateData();
						}
					} catch (error) {
						internal.resetDBLookup(error);
					}
					setTimeout(function() {internal.isRepeatDelay = false;}, 250);

					internal.topMe.find('input[type=checkbox]:visible').wb_transformToUX3Checkbox();
					internal.topMe.focus();
				},
				error: function(jqxhr, textStatus, errorThrown) {
					internal.isRepeatDelay = false;
					if (jqxhr.status == 401) {
						reloadWindow();
					} else {
						alert('Error when retrieving dblookup data \n' + jqxhr.status + '\n' + errorThrown);
					}
					internal.resetDBLookup();
				},
				beforeSend : function (jqXHR, settings) {
					var wbat = document.getElementById('wbat') ;
					if(wbat != null){
						jqXHR.setRequestHeader('wbat', wbat.value);
					}
				},
				timeout : internal.waitPeriod
			});
		},

		retrieveResolveData : function(params) {
			internal.uiFieldVisible.prop('isResolving', true);
			if (!params) {
				params = internal.parameters;
			}
			var  postData = internal.getPostData(params);
			// TODO - check if WB_AJAX functions from wb-core.js can be called
			$.ajax({
				type: 'POST',
				url: contextPath+'/services/platform/dblookup/getdblookupresolve',
				data: postData,
				contentType: 'application/json; charset=utf-8',
				dataType: 'json',
				async: true,
				success: function(labelResolveData) {
					try {
						internal.checkFieldExists();
						internal.processResolveData(labelResolveData);
					} catch (error) {
						internal.resetDBLookup(error);
					}
				},
				error: function(jqxhr, textStatus, errorThrown) {
					if (jqxhr.status == 401) {
						reloadWindow();
					} else {
						alert('Error when retrieving dblookup resolve data \n' + jqxhr.status + '\n' + errorThrown);
					}
					internal.uiFieldVisible.prop('isResolving', true);
					internal.resetDBLookup();
				},
				beforeSend : function (jqXHR, settings) {
					var wbat = document.getElementById('wbat') ;
					if(wbat != null){
						jqXHR.setRequestHeader('wbat', wbat.value);
					}
				},
				timeout : internal.waitPeriod
			});
		},

		processResolveData : function(labelResolveData) {
			var uiFieldHidden = internal.uiFieldHidden;
			if (uiFieldHidden.attr('onblur') || uiFieldHidden[0].onblur) {
				try {
					uiFieldHidden[0].onblur();
				} catch (e) {
					// do nothing, bad custom code
				}
			}

			var ambiguous = labelResolveData.ambiguousLabels;
			var unresolved = labelResolveData.unresolvedLabels;
			var resolveFilter = (ambiguous.length > 0)  ? ambiguous[0] : ((unresolved.length > 0 ) ?  unresolved[0]  : null);
			if (resolveFilter) {
				internal.uiFieldHidden.attr('resolveFilter', resolveFilter);
				internal.setData(labelResolveData.lookupData);
				internal.renderDBLookup();
				internal.setParameter('initialBlank', false);
			}
			else {
				internal.updateUIFields(labelResolveData.resolvedData);
				if (uiFieldHidden.attr('onchange') || uiFieldHidden[0].onchange) {
					try {
						uiFieldHidden.change();
					} catch (e) {
						// do nothing, bad custom code
					}
				}
				internal.isResolveSubmit = true;
				uiFieldHidden.removeAttr('resolveFilter');
				internal.resetDBLookup();
			}
		},

		refreshData : function(params) {
			internal.retrieveData(params);
		}
	};

	var methods = {
		init : function(initParams) {
			if (!internal.initialize(this, initParams)) {
				return;
			}
			internal.retrieveData(initParams, true);

			return internal.me;
		},

		resolve : function(initParams) {
			if (!internal.initialize(this, initParams)) {
				return;
			}
			internal.initialize(this, initParams);
			internal.retrieveResolveData(initParams);

			return internal.me;
		}
	};

	$.fn.wb_dblookup = function( method ) {
		if ( methods[method] ) {
			return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
		} else if ( typeof method === 'object' || ! method ) {
			return methods.init.apply( this, arguments );
		} else {
			$.error( 'Method ' +  method + ' does not exist on wb_dblookup' );
		}
	};

})( jQuery );


function dltKP(event,e) {
	if (event.keyCode==13) {
		e.blur();
		if (event.stopPropagation) {
			event.stopPropagation();
		} else {
			event.cancelBubble = true;
		}
		return false;
	}
}

function dltKD(event,e) {
	if (event.keyCode==13) {
		e.blur();
		if (event.stopPropagation) {
			event.stopPropagation();
		} else {
			event.cancelBubble = true;
		}
		return false;
	}
}

var DBL_REUSE_PATTERN = /^DS_[0-9]+$/;

function dlbCl(name,btn) {
	if (btn) {
		name = btn.name.substring(0, btn.name.lastIndexOf('_button'));
	}
	dlAW(name);
	var ats = document.getElementById(name+'_layer').attributes;
	var fvis = ats.fvi ? ats.fvi.value : ats.fhi.value + '_label';
	dblookup_layer(
		ats.fhi.value,
		fvis,
		getReusedAttribute(ats.key),
		getReusedAttribute(ats.lbl),
		getReusedAttribute(ats.fls),
		ats.nul ? ats.nul.value : '',
		ats.mul ? ats.mul.value : '',
		ats.psz ? ats.psz.value : '',
		ats.tou ? ats.tou.value : '',
		ats.dst.value,
		getReusedAttribute(ats.dss),
		ats.dsp ? ats.dsp.value : '',
		getReusedAttribute(ats.whr),
		ats.pty ? ats.pty.value : '',
		ats.fdu ? ats.fdu.value : '',
        ats.caw ? ats.caw.value : '',
        ats.cawp ? ats.cawp.value : '',
        getCustomAddWhereValues(name)
	);
}

function dltCh(tb,name) {
	if (tb.name.lastIndexOf('_label')+6 == tb.name.length) {
		name = tb.name.substring(0,tb.name.lastIndexOf('_label'));
	}
	var layer = document.getElementById(name+'_layer');
	var hi = document.getElementsByName(name)[0];
	if (hi.onfocus) {
		hi.onfocus();
	}
	tb.wbValid=true;
	hi.setAttribute('rsl','');
	hi.setAttribute('itc','0');
	if (Trim(tb.value)==='') {
		hi.value='';
		var lookup = $(layer).data("dbLookup");
		if(lookup){
			lookup.setResolvedValues(null);
		}
		if (hi.onchange) {
			$(hi).change();
		}
		return;
	}
	dlAW(name);
	var ats = layer.attributes;
	var fvis = ats.fvi ? ats.fvi.value : ats.fhi.value + '_label';
	resolveLabels_layer(
		ats.fhi.value,
		fvis,
		getReusedAttribute(ats.key),
		getReusedAttribute(ats.lbl),
		getReusedAttribute(ats.fls),
		ats.nul ? ats.nul.value : '',
		ats.mul ? ats.mul.value : '',
		ats.psz ? ats.psz.value : '',
		ats.tou ? ats.tou.value : '',
		ats.dst.value,
		getReusedAttribute(ats.dss),
		ats.dsp ? ats.dsp.value : '',
		getReusedAttribute(ats.whr),
		ats.pty ? ats.pty.value : '',
		ats.fdu ? ats.fdu.value : '',
		document.getElementsByName(fvis)[0].value,
        ats.caw ? ats.caw.value : '',
        ats.cawp ? ats.cawp.value : '',
        getCustomAddWhereValues(name)
	);
}

function getCustomAddWhereValues(name){
    var ats = document.getElementById(name+'_layer').attributes;
    var customAddWhereValues = {};
    if (!ats.cawf || ats.cawf.value==='') {
        return;
    }
    var customAddWhereFields = ats.cawf.value.split(",");
    customAddWhereFields.forEach(function(inputField){
    	var field = document.getElementsByName(inputField)[0];
    	if(field.value == null || field.value === ''){
            customAddWhereValues[inputField] = '';
		}else{
            customAddWhereValues[inputField] = field.value;
        }
	});
	return customAddWhereValues;
}

function dlAW(name) {
	var ats = document.getElementById(name+'_layer').attributes;
	if (!ats.mif || ats.mif.value==='') {
		return;
	}
	var master = null;
	var slave = document.forms[0][name];
	if (!slave.attributes.masterslaveaddwhere) {
		slave.setAttribute('masterslaveaddwhere','');
	}
	var masterSlaveAddWhere = slave.attributes.masterslaveaddwhere;
	masterSlaveAddWhere.value = '';
	if (!ats.mxp) {
		var masterInputFields = ats.mif.value.split(",");
	} else {
		var masterInputFields = ats.mif.value.split("-!-");
	}
	for (var i=0; i<masterInputFields.length; i++) {
		master = document.forms[0][masterInputFields[i]];
		if (!master) {
			var xpathResult = document.evaluate(masterInputFields[i], slave, null, XPathResult.ANY_TYPE, null);
			/*
			 	Right now, we are only supporting String and Node result types. More handlings need to be added if
			 	we are going to return other types from the XPath.
			 */
			if (xpathResult.resultType === XPathResult.STRING_TYPE) {
				master = {};
				master.value = xpathResult.stringValue;
			} else {
				master = xpathResult.iterateNext();
			}
		}
		if (master && master.value !== '') {
			masterSlaveAddWhere.value = (masterSlaveAddWhere.value !=null ? masterSlaveAddWhere.value : '') + master.value + '~&~';
		}
	}
	addToElementAttribute(slave, 'masterslaveaddwhere', ats.maw.value+'~|~', true);
}

function dlaCl(hidName,lblName,locAll,btn) {
	if (btn) {
		hidName = btn.name.substring(0, btn.name.lastIndexOf('_button_ALL'));
	}
    var layer = document.getElementById(hidName+'_layer');
    var lookup = $(layer).data("dbLookup");
    if (lookup) {
    	lookup.setResolvedValues(null);
    }

    document.getElementsByName(lblName)[0].value = locAll;
    fieldHidden = document.getElementsByName(hidName)[0];
    fieldHidden.value = 'ALL';
    fieldHidden.setAttribute('rsl','');
    fieldHidden.setAttribute('itc','0');
    if (fieldHidden.onchange) {
        try {
            fieldHidden.onchange();
        } catch (e) {
            // do nothing, bad custom code
        }
    }
    return false;
}

function getReusedAttribute(attr) {
	return attr ? (DBL_REUSE_PATTERN.test(attr.value) ? window[attr.value] : attr.value) : '';
}


//wbdatepicker
(function( $ ){

	var defaults = {
		id: null,
		yyyyMMdd: null,
		editable: true,
		onChange: null,
		onKeypress: null,
		dateFormat: 'MM/dd/yyyy',
		firstDay: 0,

		me : null,
		myTextBox : null,
		myTextBoxName : null,
		topDocument : null,
		topMe : null,
		topDiv : null,
		homeDocument : null,
		uiBackgroundOverlay : null,
		uiFieldHidden : null,
		uiFieldVisible : null,
		isFohoXi : false
	};

	var staticData = {
		initializedLocalization : false
	};

	var internal = {
		initialize : function(textbox, initParams) {
			if (null != internal.topDocument) {
				return false;
			}
			if ($(getWfmTopWindow().document).find('#ui_background_overlay').length < 1) {
				getWfmTopWindow().document.body.firstChild.parentNode.insertBefore($('<div id="ui_background_overlay"></div>')[0], getWfmTopWindow().document.body.firstChild);
			}
			if ($(getWfmTopWindow().document).find('#datepickerDiv').length < 1) {
				getWfmTopWindow().document.body.firstChild.parentNode.insertBefore($('<div id="datepickerDiv"></div>')[0], getWfmTopWindow().document.body.firstChild);
			}
			internal.resetInternal();
			internal.isFohoXi = (typeof(getWfmTopWindow().FohoXi) != "undefined");
			internal.myTextBox = textbox;
			internal.myTextBoxName = $(textbox).attr('name');
			internal.me = $(textbox);
			internal.topDocument = getWfmTopWindow().document;
			internal.topDiv = $(getWfmTopWindow().document).find('#datepickerDiv');
			internal.topMe = $(internal.topDiv);
			internal.homeDocument = document;
			internal.uiBackgroundOverlay = $(internal.topDocument).find('#ui_background_overlay');
			if (internal.myTextBoxName.lastIndexOf('_dummy') > -1) {
				var baseFieldName = internal.myTextBoxName.substring(0, internal.myTextBoxName.lastIndexOf('_dummy'));
				internal.uiFieldHidden = $(document.getElementsByName(baseFieldName)[0]);
			} else {
				internal.uiFieldHidden = $(document.getElementsByName(internal.myTextBoxName+'_hidden')[0]);
			}
			internal.uiFieldVisible = $(internal.myTextBox);
			internal.renderDatePicker(initParams);
			// return true;
		},

		renderDatePicker : function(o) {
			var me = internal.topMe;
			me.removeAttr('style');
			me.addClass('datepickerLayer');
			me.click(function(event){event.stopPropagation();});
			internal.scrollToVisible(true);
			internal.showOverlay();
			internal.renderPlugin(o);
			// me.datepicker();
		},

		renderPlugin : function(o) {
			o = $.extend(true, {}, defaults, o);
			var me = internal.topMe; // to
			if (!staticData.initializedLocalization && dpl10n != null) {
				dpl10n(); // Initializes date picker locale data.
				staticData.initializedLocalization = true;
			}
			if (o.onKeypress !== null) {
				me.bind("keydown", o.onKeypress);
			}
			me.datepicker({
				changeMonth: o.changeMonth,
				changeYear: o.changeYear,
				disabled: false,
				dateFormat: convertToJquiDateFormat(o.dateFormat),
				firstDay: o.firstDay,
				gotoCurrent: false,
				showOtherMonths: true,
				selectOtherMonths: true,
				defaultDate : $.datepicker.parseDate('yymmdd', o.yyyyMMdd),
				yearRange: internal.getRelativeYearRange(o.yearRange, o.yyyyMMdd),
				altField: 'input[name="' + internal.myTextBoxName + '"]',
				showButtonPanel: internal.isFohoXi,
				beforeShow: function(input, inst) {
					setTimeout(function(){
						internal.updateUI(input);
					}, 10);
				},
				beforeShowDay: function (date) {
					return [true, ""];
				},
				onChangeMonthYear: function(year, month, inst) {
					var input = this;
					setTimeout(function(){
						internal.updateUI(input);
					}, 10);
				},
				onSelect: function(date, inst) {
					var field = internal.uiFieldVisible;
					var homeDoc = $(internal.homeDocument);
					if (o.autoClose) {
						me.datepicker('destroy');
						internal.resetDatePicker();
						getNextFocusableInputElement(homeDoc, field[0], 1).focus();
					}
					if (field.change) {
						field.change();
					}
				},
				onClose: function(date, inst) {
					this.focus();
				}
			});
			me.datepicker('setDate', $.datepicker.parseDate('yymmdd', o.yyyyMMdd));
			internal.uiFieldVisible.prop('wbValid', true);
			internal.scrollToVisible(me);
			// fix for datepicker jquery-ui plugin bug in firefox - sometimes calendar opens with all text selected
			if (document.getSelection) {
				document.getSelection().removeAllRanges();
			}

			return me;
		},

		updateUI: function(input) {
			if (internal.isFohoXi) {
				var FohoXi = getWfmTopWindow().FohoXi;

				// Update Month/Year SELECT Classes:
				var $selects = $(input).find(".ui-datepicker-title").children("select");
				$selects.toggleClass("inforDropdownList", true);

				// Add Prev/Next SVG Icons:
				var $prev = $(input).find(".ui-datepicker-prev");
				var $next = $(input).find(".ui-datepicker-next");

				$prev.append(FohoXi.Icon.createIconElement({icon: "caret-left"}));
				$next.append(FohoXi.Icon.createIconElement({icon: "caret-right"}));

				// Focus on Current Day:
				$currentDay = $(input).find(".ui-datepicker-current-day > a");
				$currentDay.focus();
			}
		},

		animateDatePicker : function(remove) {
			var me = internal.topMe;
			var fhi = internal.uiFieldHidden[0];
			me.hide();
			me.unbind('keydown');
			internal.hideOverlay();
			if (internal.isSubmit) {
				if (fhi.onfocus) {
					try {
						fhi.onfocus();
					} catch (e) {
						// do nothing, bad custom code
					}
				}
				if (fhi.onchange) {
					try {
						fhi.onchange();
					} catch (e) {
						// do nothing, bad custom code
					}
				}
				if (fhi.onblur) {
					try {
						fhi.onblur();
					} catch (e) {
						// do nothing, bad custom code
					}
				}
			}
			// if (internal.isSubmit && internal.uiFieldVisible.attr('onchange')) {
				// internal.uiFieldVisible.change();
			// }
			me.remove();
			internal.resetInternal();
		},

		scrollToVisible : function(initialOpen) {
			var topMe = internal.topMe;
			if (initialOpen) {
				topMe.css("opacity",0).show();
			}

			var offset = internal.me.offset();
			offset.top += internal.me.outerHeight();
			var framesOffset = internal.getFramesOffset(internal.topDocument,internal.myTextBoxName,null);
			if (null != framesOffset) {
				offset.top += (framesOffset.top - $(internal.homeDocument).scrollTop());
				offset.left += (framesOffset.left - $(internal.homeDocument).scrollLeft());
			}
			//browsers speak different dialects
			var windowTopScrollTop = Math.max(getWfmTopWindow().document.documentElement.scrollTop, getWfmTopWindow().document.body.scrollTop);
			var windowTopScrollLeft = Math.max(getWfmTopWindow().document.documentElement.scrollLeft, getWfmTopWindow().document.body.scrollLeft);
			if (offset.left + topMe.outerWidth() > windowTopScrollLeft + $(getWfmTopWindow()).width()) {
				offset.left = Math.max(0, windowTopScrollLeft + $(getWfmTopWindow()).width() - topMe.outerWidth() - 3);
			}

			var bottomUp = Math.max(0, offset.top + topMe.outerHeight() - windowTopScrollTop - $(getWfmTopWindow()).height());
			if (bottomUp > 0) {
				if (offset.top - windowTopScrollTop < $(getWfmTopWindow()).height() / 2) {
					offset.top = Math.max(3, offset.top - bottomUp);
				} else {
					offset.top = Math.max(3, offset.top-topMe.outerHeight() - internal.uiFieldVisible.outerHeight() - 3);
				}
			}
			if (offset.top < windowTopScrollTop) {
				offset.top = windowTopScrollTop + 3;
			}
			if (offset.left < windowTopScrollLeft) {
				offset.left = windowTopScrollLeft + 3;
			}
			$(internal.topDiv).offset(offset);

			if (initialOpen) {
				topMe.animate({opacity:1}, 150, 'linear');
			}
		},

		getFramesOffset : function(doc, name, offset) {
			var frames = $(doc).find('frame,iframe');
			for (var i=0; i<frames.length; i++) {
				var frameDoc = frames[i].contentWindow.document;
				if ($(frameDoc).find('input[name="' + name + '"]').length > 0) {
					offset = {'top': $(frames[i]).offset().top, 'left': $(frames[i]).offset().left};
					return offset;
				} else {
					offset = internal.getFramesOffset(frameDoc, name, offset);
					if (null != offset) {
						offset = {'top': offset.top + $(frames[i]).offset().top, 'left': offset.left + $(frames[i]).offset().left};
						//browsers speak different dialects
						var frameScrollTop = Math.max(frameDoc.documentElement.scrollTop, frameDoc.body.scrollTop);
						var frameScrollLeft = Math.max(frameDoc.documentElement.scrollLeft, frameDoc.body.scrollLeft);
						offset.top -= frameScrollTop;
						offset.left -= frameScrollLeft;
						return offset;
					}
				}
			}
			return offset;
		},

		resetInternal : function() {
			$.extend(internal, defaults);
		},

		resetDatePicker : function(error) {
			//to avoid chained events from executing twice, eg.topFrameDocument events already executed before topDocument events
			if (!internal.topDocument) {
				return;
			}

			if (error && error.message) {
				alert('Error: ' + error.message);
			}

			internal.animateDatePicker();
		},

		showOverlay : function() {
			internal.uiBackgroundOverlay.css('opacity', 0).show();
			internal.uiBackgroundOverlay.bind('click', internal.resetDatePicker);
			$(window).bind('beforeunload', internal.resetDatePicker);
		},

		hideOverlay : function() {
			internal.uiBackgroundOverlay.hide();
			internal.uiBackgroundOverlay.unbind('click', internal.resetDatePicker);
			$(window).unbind('beforeunload', internal.resetDatePicker);
		},

		getConfigurer : function(type, cfgKey) {
			if (!internal.configOn) {
				return '';
			}

			var key = cfgKey;
			var url = contextPath + '/system/' + type + '_configurer.jsp?';
			var imageSrc = contextPath + '/images/interface/';
			if (type=='security') {
				cfgKey = 'security_dblookupBlock_' + cfgKey;
				url += ('securityName=' + cfgKey + '&mfrm_id=1810');
				imageSrc += 'key.gif';
			} else {
				url += ('field_name=' + cfgKey + '&domain=workbrain_system&override=-1&required=' + (type=='field') + '\'');
				imageSrc += 'bullet-orange.gif';
			}

			var href = $('<a>', {
				href : '#',
				title : cfgKey
			}).addClass(type + '_configurer');

			href.click(function() {
				window.open(url,'localize','left=75,top=75,width=370,height=170,resizable=1,dependent=1,scrollbars=1');
				return false;
			});

			href.append($('<img>', {
				border : '0',
				alt : cfgKey,
				src : imageSrc
			}));
			return href;
		},

		getMessageConfigurer : function(locKey) {
			return internal.getConfigurer('message',locKey);
		},

		getFieldConfigurer : function(locKey) {
			return internal.getConfigurer('field',locKey);
		},

		getSecurityConfigurer : function(secKey) {
			return internal.getConfigurer('security',secKey.toLowerCase());
		},

		refreshData : function(params) {
			internal.retrieveData(params);
		},

		getRelativeYearRange : function (yearRange, yyyyMMdd) {
			var yRange = yearRange.split(':');
			var cYear = new Date().getFullYear();
			var sYear = (yyyyMMdd && yyyyMMdd.length > 4) ? yyyyMMdd.substring(0,4) : new Date().getFullYear();
			var startOffset = 10;
			var endOffset = 10;
			var interval = Math.abs(yRange[1] - yRange[0]);
			if (yRange[0] <= sYear && yRange[1] >= sYear) {
				startOffset = sYear - yRange[0];
			} else {
				startOffset = Math.floor(interval / 2);
				endOffset = interval - startOffset;
			}
			endOffset = interval - startOffset;
			return 'c-' + startOffset + ':c+' + endOffset;
		}

	};

	var methods = {
		wbui : function(o) {
			if (!internal.initialize(this, o)) {
				return;
			}

			return internal.me;
		}
	};

	$.fn.wbdatepicker = function( method ) {
		if ( methods[method] ) {
			return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
		} else if ( typeof method === 'object' || ! method ) {
			return methods.init.apply( this, arguments );
		} else {
			$.error( 'Method ' +  method + ' does not exist on wb_dblookup' );
		}
	};

})( jQuery );

function dpbCl(name) {
	var hiddenFieldName = name;
	var visibleField = document.getElementsByName(name+'_dummy')[0];
	if (!visibleField) {
		//String field type
		visibleField = document.getElementsByName(name)[0];
		hiddenFieldName = name + '_hidden';
	}
	var hiddenField = document.getElementsByName(hiddenFieldName)[0];
	var ats = hiddenField.attributes;
	var value = hiddenField.value;
	value = !value ? '' : value.length > 8 ? value.substring(0,8) : value;
	$(visibleField).wbdatepicker("wbui", {
		id: name,
		yyyyMMdd: value,
		firstDay: ats.fdw.value,
		dateFormat: ats.dft.value,
		yearRange: '' + ats.yds.value + ':' + ats.yde.value,
		changeMonth: !ats.smy,
		changeYear:  !ats.smy,
		autoClose: !ats.acl
	});
}

/*
   This method is neccessary to close the gap between Java's SimpleDateFormat and jQuery UI datepicker formatDate methods.
   Takes the SimpleDateFormat string from the server and turns it into the expected jQueryUI formatDate.
   Note: the jQueryUI formatDate only supports some of SimpleDateFormat settings.  Basically only Years, months, days, day of week
*/
function convertToJquiDateFormat(localFormatString){
    //Year
    if(localFormatString.search(/y{3,}/g) >=0){                 /* YYYY */
        localFormatString = localFormatString.replace(/y{3,}/g,     "yy");
    }else if(localFormatString.search(/y{2}/g) >=0){            /* YY   */
        localFormatString = localFormatString.replace(/y{2}/g,      "y");
    }

    //Month
    if(localFormatString.search(/M{4,}/g) >=0){                 /* MMMM */
        localFormatString = localFormatString.replace(/M{4,}/g,     "MM");
    }else if(localFormatString.search(/M{3}/g) >=0){            /* MMM  */
        localFormatString = localFormatString.replace(/M{3}/g,      "M");
    }else if(localFormatString.search(/M{2}/g) >=0){            /* MM   */
        localFormatString = localFormatString.replace(/M{2}/g,      "mm");
    }else if(localFormatString.search(/M{1}/g) >=0){            /* M    */
        localFormatString = localFormatString.replace(/M{1}/g,      "m");
    }

    //Day
    if(localFormatString.search(/D{2,}/g) >=0){                 /* DD   */
        localFormatString = localFormatString.replace(/D{2,}/g,     "oo");
    }else if(localFormatString.search(/D{1}/g) >=0){            /* D    */
        localFormatString = localFormatString.replace(/D{1}/g,      "o");
    }

    //Day of month
    if(localFormatString.search(/E{4,}/g) >=0){                 /* EEEE */
        localFormatString = localFormatString.replace(/E{4,}/g,     "DD");
    }else if(localFormatString.search(/E{2,3}/g) >=0){          /* EEE  */
        localFormatString = localFormatString.replace(/E{2,3}/g,    "D");
    }
    return localFormatString;
}

function getNextFocusableInputElement(doc, field, offset) {
	var inputFields = doc.find(':input:enabled[type!="hidden"][type!="HIDDEN"][type!="Hidden"]');
	var fieldIndex = jQuery.inArray(field, inputFields) + offset + 1;
	if (fieldIndex < 0 || fieldIndex > inputFields.length-1) {
		return field;
	}
	var inputField;
	while (true) {
		inputField = inputFields[fieldIndex];
		if (inputField && (inputField.offsetWidth > 0 || inputField.offsetHeight > 0)) {
			return inputField;
		}
		fieldIndex++;
		if (fieldIndex > inputFields.length-1) {
			return field;
		}
	}
}

/* WB Dialog Helper */
var WBDialogHelper = (function WBDialogHelper() {
	/**
	 * Default Dialog Options.
	 * @type {{}}
	 */
	var dialogOptions = {
		appendTo: "body",
		autoOpen: false,
		buttons: [],
		closeOnEscape: true,
		dialogClass: "wbDialog",
		draggable: false,
		height: "auto",
		maxHeight: null,
		maxWidth: null,
		minHeight: 100,
		minWidth: 200, // Dialog Widget Default = "150".
		modal: true,
		resizable: false,
		title: "",
		width: "300" // Dialog Widget Default = 300.
	};

	/**
	 * Error Level Classes.
	 * @type {{error: string, notice: string, success: string, warning: string}}
	 */
	var errorLevels = {
		error: "error",
		notice: "info",
		success: "confirm",
		warning: "alert"
	};

	/**
	 * WBDialog Constructor Function
	 * @param params
	 * @constructor
	 */
	function WBDialog(params) {
		this.params = params;
		this.options = {};
		this.$content = null;
		this.$dialog = null;
		this.$titlebar = null;
		this.$message = null;
		this.$buttonpane = null;
		this.$overlay = null;
		this.init();
	}
	WBDialog.prototype.init = function() {
		this.prepOptions();
		this.prepContent();
		this.prepEvents();
		this.initDialog();
	}
	WBDialog.prototype.prepOption = function(option, param) {
		if (typeof(param) != "undefined" && param !== null) {
			this.options[option] = param;
		}
	}
	WBDialog.prototype.prepOptions = function() {
		this.options = $.extend(true, {}, dialogOptions);
		this.prepOption('closeOnEscape', this.params.closeOnEscape);
		this.prepOption('height', this.params.height);
		this.prepOption('maxHeight', this.params.maxHeight);
		this.prepOption('maxWidth', this.params.maxWidth);
		this.prepOption('modal', this.params.modal);
		this.prepOption('position', this.params.position);
		this.prepOption('title', this.params.title);
		this.prepOption('width', this.params.width);
		this.initButtonOptions();
	}
	WBDialog.prototype.initButtonOptions = function() {
		var buttons = this.params.buttons;
		if (buttons.length <= 0) return;
		for (var i = 0; i < buttons.length; i++) {
			var button = (function(button){
				return {
					text: button.text,
					click: function() {
						$(this).dialog("close");
						if (typeof button.click == "function") {
							button.click();
						}
					}
				}
			})(buttons[i]);
			this.options.buttons.push(button);
		}
	}
	WBDialog.prototype.prepContent = function() {
		var $content = $("<div />");
		var $message = $("<div />");
		$message.addClass("_ui-dialog-content-message");
		var message = this.params.message;
		if (message instanceof jQuery) {
			$message.append(message);
		} else {
			$message.html(message);
		}
		$content.append($message);
		this.$content = $content;
		this.$message = $message;
	}
	WBDialog.prototype.prepEvents = function() {
		var wbDialog = this;
		this.$content.on("dialogcreate", function(event, ui) {
			wbDialog.dialogCreated(event);
		});
		this.$content.on("dialogopen", function(event, ui) {
			wbDialog.dialogOpened(event);
		});
		this.$content.on("dialogbeforeclose", function(event, ui) {
			wbDialog.dialogBeforeClosed(event);
		});
		this.$content.on("dialogclose", function(event, ui) {
			wbDialog.dialogClosed(event);
		});
	}
	// Prepare UI:
	WBDialog.prototype.prepUI = function() {
		this.$dialog = this.$content.dialog("widget");
		this.$overlay = this.$dialog.prev(".ui-widget-overlay");
		var id = this.params.id || "";
		if (id) {
			this.$dialog.attr("id", id);
			this.$overlay.attr("id", id + "_overlay");
		}
		var maxWidth = this.params.maxWidth || null;
		if (maxWidth) {
			this.$dialog.css("max-width", maxWidth);
		}
		var minWidth = this.params.minWidth || null;
		if (minWidth) {
			this.$dialog.css("min-width", minWidth);
		}
		this.prepUITitlebar();
		this.prepUIButtonpane();
	}
	// Title Bar
	WBDialog.prototype.prepUITitlebar = function() {
		var $titlebar = this.$dialog.children(".ui-dialog-titlebar");
		var errorLevel = this.params.errorLevel;
		// Title Bar (Error Levels):
		if (errorLevel) {
			$titlebar.addClass("_is-ui-" + errorLevel);
		}
		this.$titlebar = $titlebar;
		// Title Bar / Icon:
		this.prepUITitlebarIcon();
		// Title Bar / Close:
		this.prepUITitlebarClose();
		// Hide Title Bar?
		var hasTitle = (typeof(this.params.title) == "string" && this.params.title != "");
		var hasIcon = $titlebar.hasClass("_has-ui-dialog-titlebar-icon");
		var hasClose = $titlebar.hasClass("_has-ui-dialog-titlebar-close");
		if (hasTitle || hasIcon || hasClose) {
			this.$dialog.addClass("_has-ui-dialog-titlebar");
		}
	}
	// Title Bar / Icon:
	WBDialog.prototype.prepUITitlebarIcon = function() {
		var icon = this.params.icon || "";
		var errorLevel = this.params.errorLevel;
		if (!icon && errorLevel) {
			icon = "icon-" + errorLevel;
		}
		if (icon) {
			var $titleIcon = $("<span />");
			$titleIcon.addClass("_ui-dialog-titlebar-icon");
			if (icon instanceof jQuery) {
				$titleIcon.append(icon);
			} else {
				// On "FoHo Xi", use an SVG Icon:
				if (FohoXi) {
					var $icon = FohoXi.Icon.createIconElement({icon: icon});
					$titleIcon.append($icon);
				}
			}
			this.$titlebar.addClass("_has-ui-dialog-titlebar-icon");
			this.$titlebar.prepend($titleIcon);
		}
	}
	// Title Bar / Close:
	WBDialog.prototype.prepUITitlebarClose = function() {
		if (!this.params.hideClose) {
			this.$titlebar.addClass("_has-ui-dialog-titlebar-close");
			// On "FoHo Xi", use an SVG Icon:
			if (FohoXi) {
				var $closeIcon = FohoXi.Icon.createIconElement({icon: 'close'});
				var $closeButton = this.$titlebar.find(".ui-dialog-titlebar-close");
				$closeButton.children(".ui-icon").append($closeIcon);
			}
		}
	}
	WBDialog.prototype.prepUIButtonpane = function() {
		var $buttonpane = this.$dialog.children(".ui-dialog-buttonpane");
		var $buttons = $buttonpane.find("button");
		var total = $buttons.length;
		if (total > 1) {
			var width = (100 / total).toFixed(2);
			$buttons.css("width", width + "%");
		}
		this.$buttonpane = $buttonpane;
	}
	WBDialog.prototype.initDialog = function() {
		this.$content.dialog(this.options);
	}
	// Initialize UI:
	WBDialog.prototype.initUI = function() {
		this.initUIContent();
		this.initUIProgressbar();
		this.initUIzIndex();
	}
	WBDialog.prototype.initUIContent = function() {
		var contentWidth = this.$content.width();
		var messageWidth = this.$message.width();
		if (messageWidth != contentWidth) {
			this.$message.width(contentWidth);
		}
	}
	WBDialog.prototype.initUIProgressbar = function() {
		var isToast = this.params.isToast;
		var autoClose = this.params.autoClose || 0;
		if (isToast && autoClose) {
			this.$dialog.addClass("_is-ui-toast");
			var $progress = $("<div />");
			$progress.addClass("_ui-dialog-progress");
			this.$dialog.append($progress);
			var wbDialog = this;
			$progress.animate({width: "0%"}, autoClose, function() {
				wbDialog.close();
			});
		}
	}
	WBDialog.prototype.initUIzIndex = function() {
		var zIndex = 0;
		if (this.params.zIndex) {
			zIndex = this.params.zIndex;
		} else {
			var $dialogs = this.$dialog.siblings(".ui-dialog").filter(":visible");
			$dialogs.each(function(){
				var currZIndex = parseInt($(this).css("z-index"));
				if (!isNaN(currZIndex) && (currZIndex > zIndex)) {
					zIndex = currZIndex;
				}
			});
			zIndex += (zIndex > 0) ? 1: 9999;
		}
		this.$dialog.css("z-index", zIndex);
		this.$overlay.css("z-index", zIndex);
	}
	WBDialog.prototype.open = function() {
		this.$content.dialog("open");
	}
	WBDialog.prototype.close = function() {
		this.$content.dialog("close");
	}
	WBDialog.prototype.dialogCreated = function(event) {
		this.prepUI();
	}
	WBDialog.prototype.dialogOpened = function(event) {
		this.initUI();
	}
	WBDialog.prototype.dialogBeforeClosed = function(event) {
	}
	WBDialog.prototype.dialogClosed = function(event) {
		this.$content.dialog("destroy");
	}

	/**
	 * WB Dialog Helper Object
	 * @type {{alert, confirm, message, toast}}
	 */
	var WBDialogHelperObject = (function WBDialogHelperObject() {
		/**
		 * Default Dialog Params.
		 * @type {{}}
		 */
		var defaultParams = {
			autoClose: 0,
			buttons: [],
			height: null,
			hideClose: true,
			icon: null,
			isToast: false,
			message: "",
			title: "",
			width: null
		};

		/**
		 * Creates and Opens a Dialog.
		 * @param params
		 */
		function openDialog(params) {
			var params = $.extend(true, {}, defaultParams, params);
			var wbDialog = new WBDialog(params);
			wbDialog.open();
		}

		/**
		 * Opens an Alert Dialog.
		 * @param title
		 * @param message
		 * @param buttonText
		 * @param buttonClick
		 * @param args {{}}
		 */
		function openAlert(title, message, buttonText, buttonClick, args) {
			var args = args || {};
			var params = {
				title: title,
				message: message,
				buttons: [
					{text: buttonText, click: buttonClick}
				],
				errorLevel: args.errorLevel || null,
				height: args.height || null,
				width: args.width || null
			};
			openDialog(params);
		}

		function openAlertError(title, message, buttonText, buttonClick, args) {
			var args = args || {};
			args.errorLevel = errorLevels.error;
			openAlert(title, message, buttonText, buttonClick, args);
		}

		function openAlertNotice(title, message, buttonText, buttonClick, args) {
			var args = args || {};
			args.errorLevel = errorLevels.notice;
			openAlert(title, message, buttonText, buttonClick, args);
		}

		function openAlertSuccess(title, message, buttonText, buttonClick, args) {
			var args = args || {};
			args.errorLevel = errorLevels.success;
			openAlert(title, message, buttonText, buttonClick, args);
		}

		function openAlertWarning(title, message, buttonText, buttonClick, args) {
			var args = args || {};
			args.errorLevel = errorLevels.warning;
			openAlert(title, message, buttonText, buttonClick, args);
		}

		/**
		 * Opens a Confirmation Dialog.
		 * @param title
		 * @param message
		 * @param okText
		 * @param okClick
		 * @param cancelText
		 * @param cancelClick
		 * @param args {{}}
		 */
		function openConfirm(title, message, okText, okClick, cancelText, cancelClick, args) {
			var args = args || {};
			var params = {
				title: title,
				message: message,
				buttons: [
					{text: okText, click: okClick},
					{text: cancelText, click: cancelClick}
				],
				closeOnEscape: false,
				height: args.height || null,
				width: args.width || null
			};
			openDialog(params);
		}

		/**
		 * Opens an Input Dialog
		 * @param title
		 * @param message
		 * @param buttons
		 * @param args {{}}
		 */
		function openInput(title, content, buttons, args) {
			var args = args || {};
			var params = {
				title: title,
				message: content,
				buttons: buttons || [],
				closeOnEscape: false,
				height: args.height || null,
				icon: args.icon || null,
				minWidth: 200,
				width: args.width || "auto"
			}
			openDialog(params);
		}

		/**
		 * Opens a Message Dialog.
		 * @param title
		 * @param message
		 * @param buttons
		 * @param args {{}}
		 */
		function openMessage(title, message, buttons, args) {
			var args = args || {};
			var params = {
				title: title,
				message: message,
				buttons: buttons || [],
				closeOnEscape: false,
				height: args.height || null,
				icon: args.icon || null,
				minWidth: 200,
				width: args.width || "auto"
			};
			openDialog(params);
		}

		/**
		 * Opens a Toast Dialog.
		 * @param title
		 * @param message
		 * @param duration
		 */
		function openToast(title, message, duration) {
			var params = {
				title: title,
				message: message,
				autoClose: duration || 6000,
				hideClose: false,
				isToast: true,
				maxWidth: 350,
				minWidth: 150,
				modal: false,
				position: {
					my: "right-20px top+20px",
					at: "right top"
				},
				width: "auto"
			};
			openDialog(params);
		}

		/**
		 * Opens a Window-like Dialog.
		 * @param title
		 * @param content
		 * @param args
		 */
		function openWindow(title, content, args) {
			var args = args || {};
			var params = {
				title: title,
				message: content,
				height: args.height || null,
				hideClose: false,
				icon: args.icon || null,
				minWidth: 200,
				width: args.width || "auto"
			};
			openDialog(params);
		}

		// Public Members:
		return {
			alert: openAlert,
			alertError: openAlertError,
			alertNotice: openAlertNotice,
			alertSuccess: openAlertSuccess,
			alertWarning: openAlertWarning,
			confirm: openConfirm,
			input: openInput,
			message: openMessage,
			//prompt: openPrompt,
			toast: openToast,
			window: openWindow
		};
	})();

	// Public Object:
	return WBDialogHelperObject;
})();

/* WB Splitter Helper */
var WBSplitterHelper = (function WBDSplitterHelper() {
	/**
	 * Default Resizable Options.
	 * @type {{}}
	 */
	var resizableOptions = {
		autoHide: false,
		containment: "parent",
		handles: "e",
		maxHeight: null,
		maxWidth: null,
		minHeight: 20, // Resizable Widget Default = "10".
		minWidth: 20 // Resizable Widget Default = "10".
	};

	/**
	 * WBSplitter Constructor Function
	 * @param params
	 * @constructor
	 */
	function WBSplitter(params) {
		this.params = params;
		this.options = {};
		this.$container = null;
		this.$splitter = null;
		this.$sibling = null;
		this.init();
	}
	WBSplitter.prototype.init = function() {
		this.prepOptions();
		this.prepContent();
		this.prepEvents();
		this.initResizable();
	}
	WBSplitter.prototype.prepOption = function(option, param) {
		if (typeof(param) != "undefined" && param !== null) {
			this.options[option] = param;
		}
	}
	WBSplitter.prototype.prepOptions = function() {
		this.options = $.extend(true, {}, resizableOptions);
		this.prepOption('maxHeight', this.params.maxHeight);
		this.prepOption('maxWidth', this.params.maxWidth);
		this.prepOption('minHeight', this.params.minHeight);
		this.prepOption('minWidth', this.params.minWidth);
	}
	WBSplitter.prototype.prepContent = function() {
		var $splitter = $(this.params.splitter);
		if ($splitter.length === 1) {
			this.$container = $splitter.parent(".splitter-container");
			this.$sibling = $splitter.siblings(".content");
			this.$splitter = $splitter;
		}
	}
	WBSplitter.prototype.prepEvents = function() {
		var wbSplitter = this;
		this.$splitter.on("resizecreate", function(event, ui) {
			wbSplitter.resizeCreated(event);
		});
		this.$splitter.on("resize", function(event, ui) {
			https://bugs.jqueryui.com/ticket/7514
			event.stopPropagation();

			wbSplitter.resized(event, ui);
		});
		this.$splitter.on("resizestart", function(event, ui) {
			//https://bugs.jqueryui.com/ticket/14998
			ui.originalSize.width = ui.originalElement.outerWidth();

			wbSplitter.resizeStarted(event, ui);
		});
		this.$splitter.on("resizestop", function(event, ui) {
			wbSplitter.resizeStopped(event, ui);
		});
	}
	WBSplitter.prototype.initResizable = function() {
		this.$splitter.resizable(this.options);
	}
	WBSplitter.prototype.resizeSibling = function() {
		var splitterWidth = this.$splitter.outerWidth();
		this.$sibling.css("width", "calc(100% - "+ splitterWidth +"px)");
	}
	WBSplitter.prototype.resizeCreated = function(event) {
		if (typeof this.params.onResizeCreated == "function") {
			this.params.onResizeCreated(event);
		}
	}
	WBSplitter.prototype.resized = function(event, ui) {
		this.resizeSibling();
		if (typeof this.params.onResized == "function") {
			this.params.onResized(event, ui);
		}
	}
	WBSplitter.prototype.resizeStarted = function(event, ui) {
		if (typeof this.params.onResizeStarted == "function") {
			this.params.onResizeStarted(event, ui);
		}
	}
	WBSplitter.prototype.resizeStopped = function(event, ui) {
		if (typeof this.params.onResizeStopped == "function") {
			this.params.onResizeStopped(event, ui);
		}
	}

	/**
	 * WB Splitter Helper Object
	 */
	var WBSplitterHelperObject = (function WBSplitterHelperObject() {
		/**
		 * Default Splitter Params.
		 * @type {{}}
		 */
		var defaultParams = {
			splitter: "",
			onResizeCreated: null,
			onResized: null,
			onResizeStarted: null,
			onResizeStopped: null
		};

		/**
		 * Creates a Splitter.
		 * @param params
		 */
		function createSplitter(params) {
			var params = $.extend(true, {}, defaultParams, params);
			var wbSplitter = new WBSplitter(params);
			return wbSplitter;
		}

		function splitHorizontal(selector, params) {
			var params = params || {};
			params.splitter = selector;
			return createSplitter(params);
		}

		// Public Members:
		return {
			horizontal: splitHorizontal
		};
	})();

	// Public Object:
	return WBSplitterHelperObject;
})();